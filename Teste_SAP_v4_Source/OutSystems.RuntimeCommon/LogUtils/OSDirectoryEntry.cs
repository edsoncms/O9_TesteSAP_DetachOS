/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Diagnostics;
using System.DirectoryServices;
using OutSystems.RuntimeCommon;
using System.Text.RegularExpressions;
using System.Collections;

namespace OutSystems.RuntimeCommon {

    /// <summary>
    /// Provides OSTrace logging for all relevant DirectoryEntry operations
    /// - 'CommitChanges', 'DeleteTree' and 'Invoke' are logged in Info level
    /// - All remaining operations are logged in Debug level
    /// </summary>
    public static class OSDirectoryEntry {

        public static DirectoryEntry New(string path) {
            OSTrace.Debug("OSDirectoryEntry.New('" + path + "')\n" + GetCallingStack());
            DirectoryEntry entry = null;
            try {
                entry = new DirectoryEntry(path);
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Debug("Finish OSDirectoryEntry.New('" + path + "')");
            return entry;
        }
                

        public static void CommitChanges(DirectoryEntry entry) {
            OSTrace.Info("OSDirectoryEntry.CommitChanges([DirectoryEntry.Path='" + entry.Path + "'])\n" + GetCallingStack());
            try {
                entry.CommitChanges();
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Info("Finish OSDirectoryEntry.CommitChanges([DirectoryEntry.Path='" + entry.Path + "'])");
        }

        public static bool Exists(string path) {
            OSTrace.Debug("OSDirectoryEntry.Exists('" + path + "')\n" + GetCallingStack());
            bool result = false;
            try {
                result = DirectoryEntry.Exists(path);
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Debug("Finish OSDirectoryEntry.Exists('" + path + "')");
            return result;
        }


        public static DirectoryEntries GetChildren(DirectoryEntry entry) {
            OSTrace.Debug("OSDirectoryEntry.GetChildren([DirectoryEntry.Path='" + entry.Path + "'])\n" + GetCallingStack());
            DirectoryEntries entries = null;
            try {
                entries = entry.Children;
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Debug("Finish OSDirectoryEntry.GetChildren([DirectoryEntry.Path='" + entry.Path + "'])");
            return entries;
        }


        public static DirectoryEntry FindChildren(DirectoryEntry entry, string name, string schemaClassName) {
            OSTrace.Debug("OSDirectoryEntry.FindChildren([DirectoryEntry.Path='" + entry.Path + "'], '" + name + "', '" + schemaClassName + "')\n", GetCallingStack);
            DirectoryEntry result = null;
            try {
                result = entry.Children.Find(name, schemaClassName);
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Debug("Finish OSDirectoryEntry.FindChildren([DirectoryEntry.Path='" + entry.Path + "'], '" + name + "', '" + schemaClassName + "')");
            return result;
        }

        private static Regex systemStackRegex;

        /// <summary>
        /// Gets the Calling stack of an OSDirectoryEntry call
        /// </summary>
        /// <returns></returns>
        private static string GetCallingStack() {
            if (systemStackRegex == null) {
                systemStackRegex = new Regex("\\s*\\w*\\s*(?:(?:System.Runtime.Remoting.Messaging)|(?:System.Threading)).*$", RegexOptions.Compiled | RegexOptions.Singleline);
            }

            // skip the first two frames: GetCallingStack() and OSDirectoryEntry.Command(...)    
            string stack = new StackTrace(2, true).ToString();            
            // trim the stack after any System.Runtime.Remoting.Messaging or System.Threading
            return systemStackRegex.Replace(stack, "")
                                   .TrimEnd(new char[] { '\r', '\n' }); // remove the last new line
        }

        /// <remarks>Must use CommitChanges before any property reads.</remarks>
        public static DirectoryEntry AddChildren(DirectoryEntry entry, string name, string schemaClassName) {
            OSTrace.Debug("OSDirectoryEntry.AddChildren([DirectoryEntry.Path='" + entry.Path + "'], '" + name + "', '" + schemaClassName + "')\n", GetCallingStack);
            DirectoryEntry result = null;
            try {
                result = entry.Children.Add(name, schemaClassName);
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Debug("Finish OSDirectoryEntry.AddChildren([DirectoryEntry.Path='" + entry.Path + "'], '" + name + "', '" + schemaClassName + "')");
            return result;
        }

        public static void SafeRemoveChildren(DirectoryEntry entry, DirectoryEntry entryToRemove) {
            try {
                if (entryToRemove != null) {
                    RemoveChildren(entry, entryToRemove);
                }
            } catch { }
        }

        public static void RemoveChildren(DirectoryEntry entry, DirectoryEntry entryToRemove) {
            OSTrace.Debug("Start OSDirectoryEntry.RemoveChildren([DirectoryEntry.Path='" + entry.Path + "'], [DirectoryEntryToRemove.Path='" + entryToRemove.Path + "'])\n", GetCallingStack);
            try {
                entry.Children.Remove(entryToRemove);
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Debug("Finish OSDirectoryEntry.RemoveChildren([DirectoryEntry.Path='" + entry.Path + "'], [DirectoryEntryToRemove.Path='" + entryToRemove.Path + "'])");
        }


        public static DirectoryEntry Invoke(DirectoryEntry entry, string methodName, params object[] args) {
            OSTrace.Info("Start OSDirectoryEntry.Invoke([DirectoryEntry.Path='" + entry.Path + "'], '" + methodName + "', " + args + ")\n", GetCallingStack);
            DirectoryEntry result = null;
            try {
                result = (DirectoryEntry)entry.Invoke(methodName, args);
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Info("Finish OSDirectoryEntry.Invoke([DirectoryEntry.Path='" + entry.Path + "'], '" + methodName + "', " + args + ")");
            return result;
        }


        public static void DeleteTree(DirectoryEntry entry) {
            OSTrace.Info("Start OSDirectoryEntry.DeleteTree([DirectoryEntry.Path='" + entry.Path + "'])\n", GetCallingStack);
            try {
                entry.DeleteTree();
            } catch (Exception e) {
                OSTrace.Exception(e);
                throw e;
            }
            OSTrace.Info("Finish OSDirectoryEntry.DeleteTree([DirectoryEntry.Path='" + entry.Path + "'])");
        }

        public static object GetProperty(DirectoryEntry entry, string propertyName) {
            object result = entry.Properties[propertyName].Value;
            OSTrace.Debug("OSDirectoryEntry.GetProperty([DirectoryEntry.Path='" + entry.Path + "'], " + propertyName + " = ", () => (result ?? "null").ToString() + ")");
            return result;
        }

        public static bool SetProperty(DirectoryEntry entry, string propertyName, object value) {
            bool contains = entry.Properties.Contains(propertyName);
            object currentValue = contains ? entry.Properties[propertyName].Value : null;

            OSTrace.Debug("OSDirectoryEntry.SetProperty([DirectoryEntry.Path='" + entry.Path + "'], " + propertyName, () => contains ? ("[Current='" + Convert.ToString(currentValue) + "'] = ") : " = ", () => Convert.ToString(value) + ")");

            if (value == null && (!contains || currentValue == null)) {
                return false;

            } else if (value == null // unset the property
                || value is ICollection) { // Not going to try even check array values since all other insert methods fail with COMExceptions most of the times
                entry.Properties[propertyName].Value = value;
                return true;

            } else if (contains) { // If it is null, cant set a new non-array value or we get COMException 0x80005005
                if (!Object.Equals(currentValue, value)) {
                    entry.Properties[propertyName][0] = value;
                    return true;
                }
            } else { // if (!contains)
                entry.Properties[propertyName].Add(value);
                return true;
            }
            return false;
        }
    }
}
