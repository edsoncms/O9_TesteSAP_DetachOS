/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Text;
using System.Net;
using System.Xml;
using System.IO;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Callbacks.Invoke;
using OutSystems.RuntimeCommon;
using System.Web;
using System.Web.Hosting;
using System.Reflection;

namespace OutSystems.HubEdition.RuntimePlatform.Callbacks.Invoke {

    //#140978
    internal class ForeignCallbackProviderInvoke : WebServiceCallbackInvoke {

        private enum InvocationMethod { ApplicationDomain, WebService }
        
        private readonly string _service;
        private readonly string _method;

        private InvocationMethod _invocationMethod = InvocationMethod.ApplicationDomain;

        public ForeignCallbackProviderInvoke(string url, string serviceName, string providerName, string methodName)
            : base(url, serviceName, providerName, methodName) {

            _service = serviceName;
            _method = methodName;
        }

        protected override bool Equals(AbstractStringCallbackInvoke obj) {
            return base.Equals(obj) &&
                obj is ForeignCallbackProviderInvoke && Equals((ForeignCallbackProviderInvoke) obj);
        }

        private bool Equals(ForeignCallbackProviderInvoke obj) {
            return _service.Equals(obj._service) &&
                _method.Equals(obj._method);
        }

        public override int GetHashCode() {
            return base.GetHashCode() ^
                _service.GetHashCode() ^
                _method.GetHashCode();
        }

        public override string InvokeInner(string locale, AppInfo app, SessionInfo session, AbstractCallback.EventListener listener) {
            switch (_invocationMethod) {
            case InvocationMethod.ApplicationDomain:
                try {
                    return ForeignProviderInvoke(locale, app, session, listener);
                } catch {
                    // ForeignProvider method failed. In next retries, use the WebService method.
                    _invocationMethod = InvocationMethod.WebService;
                    throw;
                }
            case InvocationMethod.WebService:
            default:
                return base.InvokeInner(locale, app, session, listener);
            }
        }

        private string ForeignProviderInvoke(string locale, AppInfo app, SessionInfo session, AbstractCallback.EventListener listener) {
            ForeignCallbackProviderInForeignApplication foreignCallback = new ForeignCallbackProviderInForeignApplication(ProviderName, _service, _method) {
                ESpaceId = GetESpaceId(app),
                UserId = GetUserId(session),
                Locale = locale,
            };

            foreignCallback.Invoke();
            return foreignCallback.Output;
        }

        private interface IForeignCallbackProviderProxy : IForeignServiceProxy {
            string Output { get; }
        }

        private class ForeignCallbackProviderInForeignApplication : ForeignApplicationHostedService, IForeignCallbackProviderProxy {

            public ForeignCallbackProviderInForeignApplication() : base() {
            }

            public ForeignCallbackProviderInForeignApplication(string provider, string service, string method) : base(provider) {
                _provider = provider;
                _service = service;
                _method = method;
            }

            private string _provider;
            private string _service;
            private string _method;

            public int ESpaceId { get; set; }
            public int UserId { get; set; }
            public string Locale { get; set; }
            public string Data { get; set; }
            public string Output { get; private set; }

            public override State SaveState() {
                return new CallbackInvocationState() {
                    Provider = this._provider,
                    Service = this._service,
                    Method = this._method,
                    ESpaceId = this.ESpaceId,
                    UserId = this.UserId,
                    Locale = this.Locale,
                    Data = this.Data,
                };
            }

            public override void LoadState(State s) {
                CallbackInvocationState state = (CallbackInvocationState) s;
                this._provider = state.Provider;
                this._service = state.Service;
                this._method = state.Method;
                this.ESpaceId = state.ESpaceId;
                this.UserId = state.UserId;
                this.Locale = state.Locale;
                this.Data = state.Data;
            }

            protected override void Invoke(IForeignServiceProxy proxy) {
                base.Invoke(proxy);
                Output = ((IForeignCallbackProviderProxy) proxy).Output;
            }

            protected override void ExecuteService(HttpContext context) {
                Assembly provider = Assembly.Load(_provider);
                Type actionsClass = provider.GetType("ss" + _provider + ".Actions");
                Type webServiceClass = actionsClass.GetNestedType("Ws" + _service);
                MethodInfo webMethod = webServiceClass.GetMethod("WebSrvc" + _service + _method, BindingFlags.Static | BindingFlags.Public);

                HeContext heContext = new HeContext(context);
                object[] webMethodParameters;

                switch (webMethod.GetParameters().Length) {
                case 4:
                    webMethodParameters = new object[] {
                        heContext,
                        ESpaceId,
                        UserId,
                        /*output*/ null
                    };
                    break;

                case 5:
                    webMethodParameters = new object[] {
                        heContext,
                        ESpaceId,
                        UserId,
                        Data,
                        /*output*/ null
                    };
                    break;

                case 6:
                default:
                    webMethodParameters = new object[] {
                        heContext,
                        ESpaceId,
                        UserId,
                        Locale,
                        Data,
                        /*output*/ null
                    };
                    break;
                }

                webMethod.Invoke(null, webMethodParameters);
                Output = (string) webMethodParameters[webMethodParameters.Length - 1];
            }


            [Serializable]
            private sealed class CallbackInvocationState : State {
                public string Provider { get; set; }
                public string Service { get; set; }
                public string Method { get; set; }

                public int ESpaceId { get; set; }
                public int UserId { get; set; }
                public string Locale { get; set; }
                public string Data { get; set; }
            }

        }
    }
}