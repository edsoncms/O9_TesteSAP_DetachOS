/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Log {
    [Serializable()]
    public class ExtensionLog : ICloneable {
        // TODO : Create readonly accessor function for this batch of variables
        public DateTime Instant;
        public int Duration;
        public string Action_Name;
        public string SessionId;
        public int UserId;
        public int EspaceId;
        public int TenantId;
        public int Extension_Id;
        public string ExecutedBy;
        public string ErrorId;
        public string RequestKey;
        // END OF TODO

        [NonSerialized()]
        Action<ExtensionLog> logger = log => RuntimeLogger.Log(log);

        public const int MAX_ACTION_NAME_SIZE = 50;
        public const int MAX_SESSION_ID_SIZE = 50;
        public const int MAX_EXECUTED_BY_SIZE = 50;
        public const int MAX_ERROR_ID_SIZE = 50;


        public ExtensionLog() {
        }

        public ExtensionLog(ExtensionLog obj) {
            Instant = obj.Instant;
            Duration = obj.Duration;
            Action_Name = obj.Action_Name;
            SessionId = obj.SessionId;
            UserId = obj.UserId;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            Extension_Id = obj.Extension_Id;
            ExecutedBy = obj.ExecutedBy;
            ErrorId = obj.ErrorId;
        }

        public ExtensionLog(DateTime instant, int duration, string action_name, string sessionId, int espaceId, int tenantId, int userId, int extensionId, string executedBy, string errorId) {
            Instant = instant;
            Duration = duration;
            Action_Name = action_name;
            SessionId = sessionId;
            UserId = userId;
            EspaceId = espaceId;
            TenantId = tenantId;
            Extension_Id = extensionId;
            ExecutedBy = executedBy;
            ErrorId = errorId;

            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                RequestKey = reqTracer.RequestKey;
            }
        }

        public object Clone() {
            return new ExtensionLog(this);
        }

        public static void StaticWrite(
            DateTime instant,
            int duration,
            string action_name,
            string sessionId,
            int espaceId,
            int tenantId,
            int userId,
            int extensionId,
            string executedBy,
            string errorId) {

            ExtensionLog log = new ExtensionLog();
            log.Write(instant, duration, action_name, sessionId, espaceId, tenantId, userId, extensionId, executedBy, errorId);
        }

        public void Write(
            DateTime instant,
            int duration,
            string action_name,
            string sessionId,
            int espaceId,
            int tenantId,
            int userId,
            int extensionId,
            string executedBy,
            string errorId) {

            Instant = instant;
            Duration = duration;
            Action_Name = action_name;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Extension_Id = extensionId;
            ExecutedBy = executedBy;
            ErrorId = errorId;

            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                RequestKey = reqTracer.RequestKey;
            }

            logger(this);
        }

        public void LogTo(Action<ExtensionLog> logger) {
            this.logger = logger;
        }
    }
}
