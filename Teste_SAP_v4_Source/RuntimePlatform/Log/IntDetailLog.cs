/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.RuntimeCommon;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace OutSystems.HubEdition.RuntimePlatform.Log {
    [Serializable()]
    public class IntDetailLog : ICloneable {

        // TODO : Create readonly accessor function for this batch of variables        
        public string Id;
        public DateTime Instant;
        public int TenantId;
        public string Message;
        public string Detail;
        public string DetailLabel;
        // END OF TODO

        public IntDetailLog() {
        }

        public IntDetailLog(string id, DateTime instant, int tenant_Id, string message, string detail, string detailLabel) {
            Id = id;
            Instant = instant;
            TenantId = tenant_Id;
            Message = message;
            Detail = detail;
            DetailLabel = detailLabel;
        }

        public IntDetailLog(IntDetailLog log) {
            Id = log.Id;
            Instant = log.Instant;
            TenantId = log.TenantId;
            Message = log.Message;
            Detail = log.Detail;
            DetailLabel = log.DetailLabel;
        }

        private static string GenerateLogId() {
            return Guid.NewGuid().ToString();
        }

        public object Clone() {
            return new IntDetailLog(this);
        }

        public static string StaticWrite(DateTime instant, int tenant_Id, string message, string detail, string detailLabel) {
            IntDetailLog log = new IntDetailLog();
            log.Write(GenerateLogId(), instant, tenant_Id, message, detail, detailLabel);
            return log.Id;
        }

        public static string StaticWrite(string id, DateTime instant, int tenant_Id, string message, string detail, string detailLabel) {
            IntDetailLog log = new IntDetailLog();
            log.Write(id, instant, tenant_Id, message, detail, detailLabel);
            return log.Id;
        }

        public void Write(string id, DateTime instant, int tenant_Id, string message, string detail, string detailLabel) {
            Id = id;
            Instant = instant;
            TenantId = tenant_Id;
            Message = message;
            Detail = detail;
            DetailLabel = detailLabel;
            RuntimeLogger.Log(this);
        }
    }
}
