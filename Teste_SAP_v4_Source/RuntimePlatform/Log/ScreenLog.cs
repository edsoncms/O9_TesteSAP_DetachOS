/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Log {
    [Serializable()]
    public class ScreenLog : ICloneable {
        // TODO : Create readonly accessor function for this batch of variables
        public DateTime Instant;
        public int Duration;
        public string Screen;
        public string SessionId;
        public int EspaceId;
        public int TenantId;
        public int UserId;
        public string Msisdn;
        public string ScreenType; // This needs getter and setter
        public string AccessMode;
        public string ExecutedBy;
        public int SessionBytes;
        public int SessionRequests;
        public int ViewstateBytes;
        public string RequestKey;
        public string ActionName;
        // END OF TODO

        [NonSerialized()]
        private Action<ScreenLog> logger = log => RuntimeLogger.Log(log);


        public const int MAX_SESSION_ID_SIZE = 50;
        public const int MAX_SCREEN_SIZE = 50;
        public const int MAX_MSISDN_SIZE = 20;
        public const int MAX_SCREEN_TYPE_SIZE = 10;
        public const int MAX_ACCESS_MODE_SIZE = 10;
        public const int MAX_EXECUTED_BY_SIZE = 50;
        public const int MAX_ACTION_NAME = 60;

        public ScreenLog() {
        }

        public static string NotNullAccessMode(string accessMode) {
            // eSpaces that were not recompiled may send screen logs with log.AccessMode == null
            // In these cases set the mode to Screen
            if (accessMode == null) {
                return "Screen";
            } else {
                return accessMode;
            }
        }

        public ScreenLog(ScreenLog obj) {
            Instant = obj.Instant;
            Duration = obj.Duration;
            Screen = obj.Screen;
            SessionId = obj.SessionId;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            UserId = obj.UserId;
            Msisdn = obj.Msisdn;
            ScreenType = obj.ScreenType;
            AccessMode = obj.AccessMode;
            ExecutedBy = obj.ExecutedBy;
            SessionBytes = obj.SessionBytes;
            ViewstateBytes = obj.ViewstateBytes;
            SessionRequests = obj.SessionRequests;
            RequestKey = obj.RequestKey;
            ActionName = obj.ActionName;
        }

        public ScreenLog(DateTime instant, int duration, string screen, string sessionId, int espaceId, int tenantId, int userId, string msisdn, string screenType, string accessMode, string executedBy, int sessionBytes, int viewstateBytes, int sessionRequests) {
            Instant = instant;
            Duration = duration;
            Screen = screen;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Msisdn = msisdn;
            ScreenType = screenType;
            AccessMode = NotNullAccessMode(accessMode);
            ExecutedBy = executedBy;
            SessionBytes = sessionBytes;
            ViewstateBytes = viewstateBytes;
            SessionRequests = sessionRequests;


            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                RequestKey = reqTracer.RequestKey;
                ActionName = reqTracer.EntryActionName;
            }
        }

        public object Clone() {
            return new ScreenLog(this);
        }

        public static void StaticWrite(
            DateTime instant,
            int duration,
            string screen,
            string sessionId,
            int espaceId,
            int tenantId,
            int userId,
            string msisdn,
            string screenType,
            string accessMode,
            string executedBy,
            int viewstateBytes,
            int sessionBytes,
            int sessionRequests) {

            ScreenLog log = new ScreenLog();
            log.Write(instant, duration, screen, sessionId, espaceId, tenantId, userId, msisdn, screenType, accessMode, executedBy, viewstateBytes, sessionBytes, sessionRequests);
        }

        public void WriteInformation(
            DateTime instant,
            int duration,
            string screen,
            string sessionId,
            int espaceId,
            int tenantId,
            int userId,
            string msisdn,
            string screenType,
            string accessMode,
            string executedBy,
            int viewstateBytes,
            int sessionBytes,
            int sessionRequests) 
        {
            Write(instant, duration, screen, sessionId, espaceId, tenantId, userId, msisdn, screenType, accessMode, executedBy, viewstateBytes, sessionBytes, sessionRequests);
        }
            

        private void Write(
            DateTime instant,
            int duration,
            string screen,
            string sessionId,
            int espaceId,
            int tenantId,
            int userId,
            string msisdn,
            string screenType,
            string accessMode,
            string executedBy,
            int viewstateBytes,
            int sessionBytes,
            int sessionRequests)
        {
            Instant = instant;
            Duration = duration;
            Screen = screen;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Msisdn = msisdn;
            ScreenType = screenType;
            AccessMode = NotNullAccessMode(accessMode);
            ExecutedBy = executedBy;
            ViewstateBytes = viewstateBytes;
            SessionBytes = sessionBytes;
            SessionRequests = sessionRequests;

            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                RequestKey = reqTracer.RequestKey;
                ActionName = reqTracer.EntryActionName;
            }

            logger(this);
        }

        public void LogTo(Action<ScreenLog> logger) {
            this.logger = logger;
        }
    }
}
