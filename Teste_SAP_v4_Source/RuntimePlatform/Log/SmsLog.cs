/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.SMS;

namespace OutSystems.HubEdition.RuntimePlatform.Log {
    [Serializable()]
    public class SmsLog {
        // TODO : Create readonly accessor function for this batch of variables
        public DateTime Instant;
        public int EspaceId;
        public int TenantId;
        public int UserId;
        public string Tenant_Path;
        public string Screen_Name;
        public int DLR_Status;
        public string Error_Id;
        public MobileMessage Message; // Needs getter and setter
        // END OF TODO

        public SmsLog() {
        }

        public SmsLog(DateTime instant, int espaceId, int tenantId, int userId, string tenant_Path, string screen_Name, int dLR_Status, string error_Id, SMS.MobileMessage message) {
            Instant = instant;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Tenant_Path = tenant_Path;
            Screen_Name = screen_Name;
            DLR_Status = dLR_Status;
            Error_Id = error_Id;
            Message = message;
        }

        public static void Write(SMS.MobileTerminatedMessage msg, string errorId, int DlrStatus) {
            Write(DateTime.Now, msg.eSpaceId, msg.TenantId, msg.UserId, msg.TenantPath,
                  msg.ScreenName, DlrStatus, errorId, msg);
        }

        public static void Write(
            DateTime instant,
            int espaceId,
            int tenantId,
            int userId,
            string tenant_Path,
            string screen_Name,
            int dLR_Status,
            string error_Id,
            SMS.MobileMessage message) {
            SmsLog log = new SmsLog();
            log.PrivateWrite(instant, espaceId, tenantId, userId, tenant_Path, screen_Name,
                             dLR_Status, error_Id, message);
        }

        private void PrivateWrite(
            DateTime instant,
            int espaceId,
            int tenantId,
            int userId,
            string tenant_Path,
            string screen_Name,
            int dLR_Status,
            string error_Id,
            SMS.MobileMessage message) {
            Instant = instant;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Tenant_Path = tenant_Path;
            Screen_Name = screen_Name;
            DLR_Status = dLR_Status;
            Error_Id = error_Id;
            Message = message;
            RuntimeLogger.Log(this);
        }
    }
}
