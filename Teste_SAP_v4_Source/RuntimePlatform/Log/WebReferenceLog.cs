/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Log {
    [Serializable()]
    public class WebReferenceLog : ICloneable {
        // TODO : Create readonly accessor function for this batch of variables
        public DateTime Instant;
        public int Duration;
        public string URL;
        public string Method;
        public int EspaceId;
        public int TenantId;
        public string Executed_By;
        public string ErrorId;
        public string IntegrationLogId;
        // END OF TODO


        public WebReferenceLog() {
        }

        
        public WebReferenceLog(DateTime instant, int duration, string url, string method, int espaceId, int tenantId, string executed_by, string errorId, string integrationLogId) {
            Instant = instant;
            Duration = duration;
            URL = url;
            Method = method;
            EspaceId = espaceId;
            TenantId = tenantId;
            Executed_By = executed_by;
            ErrorId = errorId;
            IntegrationLogId = integrationLogId;
        }

        public WebReferenceLog(DateTime instant, int duration, string url, string method, int espaceId, int tenantId, string executed_by, string errorId) {
            Instant = instant;
            Duration = duration;
            URL = url;
            Method = method;
            EspaceId = espaceId;
            TenantId = tenantId;
            Executed_By = executed_by;
            ErrorId = errorId;
            IntegrationLogId = string.Empty;
        }

        public WebReferenceLog(WebReferenceLog obj) {
            Instant = obj.Instant;
            Duration = obj.Duration;
            URL = obj.URL;
            Method = obj.Method;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            Executed_By = obj.Executed_By;
            ErrorId = obj.ErrorId;
            IntegrationLogId = obj.IntegrationLogId;
        }

        public object Clone() {
            return new WebReferenceLog(this);
        }


        public static void StaticWrite(
            DateTime instant,
            int duration,
            string url,
            string method,
            int espaceId,
            int tenantId,
            string executed_by,
            string errorId) {
            StaticWrite(instant, duration, url, method, espaceId, tenantId, executed_by, errorId, string.Empty);
        }


        public static void StaticWrite(
            DateTime instant,
            int duration,
            string url,
            string method,
            int espaceId,
            int tenantId,
            string executed_by,
            string errorId,
            string integrationLogId) {
            WebReferenceLog log = new WebReferenceLog();
            log.Write(instant, duration, url, method, espaceId, tenantId, executed_by, errorId, integrationLogId);
        }

        public void Write(
            DateTime instant,
            int duration,
            string url,
            string method,
            int espaceId,
            int tenantId,
            string executed_by,
            string errorId,
            string integrationLogId) {
            Instant = instant;
            Duration = duration;
            URL = url;
            Method = method;
            EspaceId = espaceId;
            TenantId = tenantId;
            Executed_By = executed_by;
            ErrorId = errorId;
            IntegrationLogId = integrationLogId;
            RuntimeLogger.Log(this);
        }


        public void Write(
            DateTime instant,
            int duration,
            string url,
            string method,
            int espaceId,
            int tenantId,
            string executed_by,
            string errorId) {
            Instant = instant;
            Duration = duration;
            URL = url;
            Method = method;
            EspaceId = espaceId;
            TenantId = tenantId;
            Executed_By = executed_by;
            ErrorId = errorId;
            IntegrationLogId = string.Empty;
            RuntimeLogger.Log(this);
        }
    }
}
