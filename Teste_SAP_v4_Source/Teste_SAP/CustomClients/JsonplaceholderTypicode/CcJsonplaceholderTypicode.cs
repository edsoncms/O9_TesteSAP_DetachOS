/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Linq;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;

using System.IO;
using System.Net;
using System.Text;
using System.Data;
using System.Collections.Generic;
using Newtonsoft.Json;


namespace ssTeste_SAP {

	public class RestPluginRuntimeUtils {
		public class CustomConverters {

			public class DecimalConverter: JsonConverter {
				public override bool CanConvert(Type objectType) {
					return (objectType == typeof(decimal?));
				}

				public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
					return reader.Value;
				}

				public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
					var decimalValue = value as decimal?;
					if (decimalValue != null && decimalValue.HasValue) {
						if (decimalValue.Value == Decimal.Truncate(decimalValue.Value)) {
							writer.WriteValue(Convert.ToInt64(value));
						} else {
							writer.WriteValue(value);
						}
					}
				}
			}
		}

		public static class Helper {

			private const String DateFormat = "yyyy'-'MM'-'dd";
			private const String TimeFormat = "HH':'mm':'ss";

			public static DateTime TextToDate(string text) {
				return BuiltInFunction.TextToDate(text);
			}
			public static String DateToText(DateTime date) {
				return date.ToString(DateFormat);
			}

			public static DateTime TextToTime(string text) {
				return BuiltInFunction.TextToTime(text);
			}
			public static String TimeToText(DateTime time) {
				return time.ToString(TimeFormat);
			}

			public static DateTime TextToDateTime(string text) {
				return DateTime.Parse(text);
			}

			public static String DateTimeToText(DateTime date) {
				return date.ToUniversalTime().ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ssK");
			}

			public static DateTime DateTimeToUniversal(DateTime date) {
				return date.ToUniversalTime();
			}

			public static DateTime DateTimeToLocal(DateTime date) {
				return DateTime.SpecifyKind(date, DateTimeKind.Local).ToLocalTime();
			}

		}


		public class Configuration {
			public String Url {
				get; set; 
			}
			public String Username {
				get; set; 
			}
			public String Password {
				get; set; 
			}
			public bool TraceErrors {
				get; set; 
			}
			public bool TraceAll {
				get; set; 
			}
			public bool Trace {
				get {
					return TraceErrors || TraceAll;
				}
			}

			public Configuration(): this("", "", "", false, false) {}
			public Configuration(string url, String username, String password, bool traceErrors, bool traceAll) {
				Url = url;
				Username = username;
				Password = password;
				TraceErrors = traceErrors;
				TraceAll = traceAll;
			}

			public static Configuration GetCustomClientConfiguration(string restwebrefSSKey, int eSpaceId) {
				Func<Configuration> fetchFromDb = () => {
					using(var tran = DatabaseAccess.ForSystemDatabase.GetReadOnlyTransaction()) {
						using(IDataReader reader = GetCustomClientConfigFields(tran, restwebrefSSKey, eSpaceId)) {
							if (reader.Read()) {
								// get effective url, username and password
								var effectiveUrl = reader.SafeGet<string>("Effective_URL", string.Empty).Trim();
								var effectiveUsername = reader.SafeGet<string>("Effective_Username", string.Empty).Trim();
								var effectivePassword = reader.SafeGet<string>("Effective_Password", string.Empty).Trim();
								var traceErrors = reader.SafeGet<bool>("TraceErrors", false);
								var traceAll = reader.SafeGet<bool>("TraceAll", false);
								return new Configuration(effectiveUrl, effectiveUsername, effectivePassword, traceErrors, traceAll);
							}
							return new Configuration();
						}
					}
				};

				return ConfigurationCache.GetESpaceCachedValue(restwebrefSSKey, "RestConfigCache", eSpaceId, _ => fetchFromDb());
			}

			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			private static IDataReader GetCustomClientConfigFields(Transaction tran, String webrefSSKey, int espaceId) {
				Command cmd = tran.CreateCommand("SELECT Effective_URL, Effective_Username, Effective_Password, TraceErrors, TraceAll FROM ossys_Rest_Web_Reference WHERE Espace_Id = @espaceId AND SS_Key = @webrefSSKey");
				cmd.CreateParameter("@espaceId", DbType.Int32, espaceId);
				cmd.CreateParameter("@webrefSSKey", DbType.String, webrefSSKey);
				return cmd.ExecuteReader();
			}

			private static class ConfigurationCache {
				private static Dictionary<string, Configuration> configCache = new Dictionary<string, Configuration>();

				private static bool reentrantCall = false;

				private static void InsertESpaceCache(string cacheName, int eSpaceId) {
					System.Web.HttpRuntime.Cache.Insert(
					cacheName,
					eSpaceId,
					AppInfo.CalculateCacheDependency(eSpaceId, 0),
					DateTime.UtcNow.AddDays(1),
					TimeSpan.Zero,
					System.Web.Caching.CacheItemPriority.NotRemovable,
					new System.Web.Caching.CacheItemRemovedCallback(CacheRemovedCallback));
				}

				private static void CacheRemovedCallback(string key, object value, System.Web.Caching.CacheItemRemovedReason reason) {
					lock(configCache) {
						configCache.Remove(key);
					}
				}

				public static Configuration GetESpaceCachedValue(string key, String cacheName, int eSpaceId, Func<string, Configuration> Getter) {
					String cacheKey = cacheName + eSpaceId + key;
					return InnerGetCachedValue(cacheKey, cacheName, Getter, InsertESpaceCache, eSpaceId);
				}

				private static Configuration InnerGetCachedValue(string key, String cacheName, Func<string, Configuration> Getter, Action<string, int> CacheInsertMethod, int cacheExtraId) {
					Configuration result;
					lock(configCache) {
						if (reentrantCall) {
							throw new InvalidOperationException("Reentrant call in AppCache for key: " + key);
						}

						if (!configCache.TryGetValue(key, out result)) {
							try {
								reentrantCall = true;
								configCache.Add(key, result = Getter(key));
							} catch (ArgumentException e) {
								throw new ArgumentException("DuplicateKey was: " + key + ", map contents was: " + configCache.ToString() + ", TryGetValue was: " + configCache.TryGetValue(key, out result), e);
							} finally {
								reentrantCall = false;
							}
							CacheInsertMethod(key, cacheExtraId);
						}
					}
					return result;
				}
			}
		}

		public class NameValue {

			public String Name;
			public String Value;

			public NameValue() {}

			public NameValue(String name, String value) {
				this.Name = name;
				this.Value = value;
			}
		}


		public static void SetRequestHeader(HttpWebRequest request, String headerName, String headerValue) {
			switch (headerName.ToLowerInvariant()) {
				case "accept":
					request.Accept = headerValue; break;
				case "expect":
					request.Expect = headerValue; break;
				case "referer":
					request.Referer = headerValue; break;
				case "user-agent":
					request.UserAgent = headerValue; break;
				case "if-modified-since":
					request.IfModifiedSince = DateTime.Parse(headerValue); break;
				case "content-type":
					request.ContentType = headerValue; break;
				case "host":
					request.Host = headerValue; break;
				case "date":
					request.Date = DateTime.Parse(headerValue); break;
				case "transfer-encoding":
					// useful for sending compressed data or data in chuncks // return request.SendChunked = true; request.TransferEncoding = headerValue;
				case "connection":
					// only used in HTTP 1.0
				case "content-length":
					// this headerValue should be computed
				case "range":
					// only useful for partial downloads
				case "proxy-connection":
					// header equivalent to the connection header (no way to set it in .NET)
					break;
				default: request.Headers.Set(headerName, headerValue); break;
			}
		}

		public static string UrlEncode(String urlToEncode) {
			return Uri.EscapeDataString(Uri.UnescapeDataString(urlToEncode));
		}

		public static string UrlQueryEncode(String urlToEncode) {
			return BuiltInFunction.EncodeUrl(Uri.UnescapeDataString(urlToEncode.Replace('+', ' ')));
		}
	}
	public interface ICcJsonplaceholderTypicodeCallbacks {
		string EvaluateExtendedProperty(HeContext heContext, string name);
	}


}