/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STGetPhotosResponseStructure</code> that represents the Service Studio structure
	///  <code>GetPhotosResponse</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STGetPhotosResponseStructure: ISerializable, ITypedRecord<STGetPhotosResponseStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdAlbumId = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*jZ8TG4nP20SQ+lWGfvu2vQ");
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*sP_2xpXBnU2PKMj7I62p+Q");
		private static readonly GlobalObjectKey IdTitle = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*viu3rGKyJ0GjtW1xSwhzDw");
		private static readonly GlobalObjectKey IdUrl = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Sw_01LX21kKpZqJ5GyF06g");
		private static readonly GlobalObjectKey IdThumbnailUrl = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*elw2hFnGIEaw22YuPNM8LA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("AlbumId")]
		public long ssAlbumId;

		[System.Xml.Serialization.XmlElement("Id")]
		public long ssId;

		[System.Xml.Serialization.XmlElement("Title")]
		public string ssTitle;

		[System.Xml.Serialization.XmlElement("Url")]
		public string ssUrl;

		[System.Xml.Serialization.XmlElement("ThumbnailUrl")]
		public string ssThumbnailUrl;


		public BitArray OptimizedAttributes;

		public STGetPhotosResponseStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssAlbumId = 0L;
			ssId = 0L;
			ssTitle = "";
			ssUrl = "";
			ssThumbnailUrl = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssAlbumId = r.ReadLongInteger(index++, "GetPhotosResponse.AlbumId", 0L);
			ssId = r.ReadLongInteger(index++, "GetPhotosResponse.Id", 0L);
			ssTitle = r.ReadText(index++, "GetPhotosResponse.Title", "");
			ssUrl = r.ReadText(index++, "GetPhotosResponse.Url", "");
			ssThumbnailUrl = r.ReadText(index++, "GetPhotosResponse.ThumbnailUrl", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STGetPhotosResponseStructure r) {
			this = r;
		}


		public static bool operator == (STGetPhotosResponseStructure a, STGetPhotosResponseStructure b) {
			if (a.ssAlbumId != b.ssAlbumId) return false;
			if (a.ssId != b.ssId) return false;
			if (a.ssTitle != b.ssTitle) return false;
			if (a.ssUrl != b.ssUrl) return false;
			if (a.ssThumbnailUrl != b.ssThumbnailUrl) return false;
			return true;
		}

		public static bool operator != (STGetPhotosResponseStructure a, STGetPhotosResponseStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STGetPhotosResponseStructure)) return false;
			return (this == (STGetPhotosResponseStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssAlbumId.GetHashCode()
				^ ssId.GetHashCode()
				^ ssTitle.GetHashCode()
				^ ssUrl.GetHashCode()
				^ ssThumbnailUrl.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STGetPhotosResponseStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssAlbumId = 0L;
			ssId = 0L;
			ssTitle = "";
			ssUrl = "";
			ssThumbnailUrl = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssAlbumId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAlbumId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAlbumId = (long) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (long) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTitle", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTitle' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTitle = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUrl", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUrl' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUrl = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssThumbnailUrl", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssThumbnailUrl' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssThumbnailUrl = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STGetPhotosResponseStructure Duplicate() {
			STGetPhotosResponseStructure t;
			t.ssAlbumId = this.ssAlbumId;
			t.ssId = this.ssId;
			t.ssTitle = this.ssTitle;
			t.ssUrl = this.ssUrl;
			t.ssThumbnailUrl = this.ssThumbnailUrl;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".AlbumId")) VarValue.AppendAttribute(recordElem, "AlbumId", ssAlbumId, detailLevel, TypeKind.LongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "AlbumId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.LongInteger); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Title")) VarValue.AppendAttribute(recordElem, "Title", ssTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Title");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Url")) VarValue.AppendAttribute(recordElem, "Url", ssUrl, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Url");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ThumbnailUrl")) VarValue.AppendAttribute(recordElem, "ThumbnailUrl", ssThumbnailUrl, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ThumbnailUrl");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "albumid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AlbumId")) variable.Value = ssAlbumId; else variable.Optimized = true;
			} else if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "title") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Title")) variable.Value = ssTitle; else variable.Optimized = true;
			} else if (head == "url") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Url")) variable.Value = ssUrl; else variable.Optimized = true;
			} else if (head == "thumbnailurl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ThumbnailUrl")) variable.Value = ssThumbnailUrl; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAlbumId) {
				return ssAlbumId;
			} else if (key == IdId) {
				return ssId;
			} else if (key == IdTitle) {
				return ssTitle;
			} else if (key == IdUrl) {
				return ssUrl;
			} else if (key == IdThumbnailUrl) {
				return ssThumbnailUrl;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssAlbumId = (long) other.AttributeGet(IdAlbumId);
			ssId = (long) other.AttributeGet(IdId);
			ssTitle = (string) other.AttributeGet(IdTitle);
			ssUrl = (string) other.AttributeGet(IdUrl);
			ssThumbnailUrl = (string) other.AttributeGet(IdThumbnailUrl);
		}
	} // STGetPhotosResponseStructure
	/// <summary>
	/// Structure <code>RCGetPhotosResponseRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCGetPhotosResponseRecord: ISerializable, ITypedRecord<RCGetPhotosResponseRecord> {
		private static readonly GlobalObjectKey IdGetPhotosResponse = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Vh7VCakav8HGkDa6CEyOLA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("GetPhotosResponse")]
		public STGetPhotosResponseStructure ssSTGetPhotosResponse;


		public static implicit operator STGetPhotosResponseStructure(RCGetPhotosResponseRecord r) {
			return r.ssSTGetPhotosResponse;
		}

		public static implicit operator RCGetPhotosResponseRecord(STGetPhotosResponseStructure r) {
			RCGetPhotosResponseRecord res = new RCGetPhotosResponseRecord(null);
			res.ssSTGetPhotosResponse = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCGetPhotosResponseRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTGetPhotosResponse = new STGetPhotosResponseStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTGetPhotosResponse.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTGetPhotosResponse.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCGetPhotosResponseRecord r) {
			this = r;
		}


		public static bool operator == (RCGetPhotosResponseRecord a, RCGetPhotosResponseRecord b) {
			if (a.ssSTGetPhotosResponse != b.ssSTGetPhotosResponse) return false;
			return true;
		}

		public static bool operator != (RCGetPhotosResponseRecord a, RCGetPhotosResponseRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCGetPhotosResponseRecord)) return false;
			return (this == (RCGetPhotosResponseRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTGetPhotosResponse.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCGetPhotosResponseRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTGetPhotosResponse = new STGetPhotosResponseStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTGetPhotosResponse", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTGetPhotosResponse' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTGetPhotosResponse = (STGetPhotosResponseStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTGetPhotosResponse.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTGetPhotosResponse.InternalRecursiveSave();
		}


		public RCGetPhotosResponseRecord Duplicate() {
			RCGetPhotosResponseRecord t;
			t.ssSTGetPhotosResponse = (STGetPhotosResponseStructure) this.ssSTGetPhotosResponse.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTGetPhotosResponse.ToXml(this, recordElem, "GetPhotosResponse", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "getphotosresponse") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GetPhotosResponse")) variable.Value = ssSTGetPhotosResponse; else variable.Optimized = true;
				variable.SetFieldName("getphotosresponse");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdGetPhotosResponse) {
				return ssSTGetPhotosResponse;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTGetPhotosResponse.FillFromOther((IRecord) other.AttributeGet(IdGetPhotosResponse));
		}
	} // RCGetPhotosResponseRecord
	/// <summary>
	/// RecordList type <code>RLGetPhotosResponseRecordList</code> that represents a record list of
	///  <code>GetPhotosResponse</code>
	/// </summary>
	[Serializable()]
	public partial class RLGetPhotosResponseRecordList: GenericRecordList<RCGetPhotosResponseRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCGetPhotosResponseRecord GetElementDefaultValue() {
			return new RCGetPhotosResponseRecord("");
		}

		public T[] ToArray<T>(Func<RCGetPhotosResponseRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGetPhotosResponseRecordList recordlist, Func<RCGetPhotosResponseRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGetPhotosResponseRecordList ToList<T>(T[] array, Func <T, RCGetPhotosResponseRecord> converter) {
			RLGetPhotosResponseRecordList result = new RLGetPhotosResponseRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGetPhotosResponseRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGetPhotosResponseRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGetPhotosResponseRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGetPhotosResponseRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCGetPhotosResponseRecord> NewList() {
			return new RLGetPhotosResponseRecordList();
		}


	} // RLGetPhotosResponseRecordList
	/// <summary>
	/// RecordList type <code>RLGetPhotosResponseList</code> that represents a record list of <code>Text,
	///  Text, Text, LongInteger, LongInteger</code>
	/// </summary>
	[Serializable()]
	public partial class RLGetPhotosResponseList: GenericRecordList<STGetPhotosResponseStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STGetPhotosResponseStructure GetElementDefaultValue() {
			return new STGetPhotosResponseStructure("");
		}

		public T[] ToArray<T>(Func<STGetPhotosResponseStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLGetPhotosResponseList recordlist, Func<STGetPhotosResponseStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLGetPhotosResponseList ToList<T>(T[] array, Func <T, STGetPhotosResponseStructure> converter) {
			RLGetPhotosResponseList result = new RLGetPhotosResponseList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLGetPhotosResponseList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGetPhotosResponseList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLGetPhotosResponseList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLGetPhotosResponseList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STGetPhotosResponseStructure> NewList() {
			return new RLGetPhotosResponseList();
		}


	} // RLGetPhotosResponseList
}

namespace ssTeste_SAP {
	[XmlType("GetPhotosResponse")]
	public class WORCGetPhotosResponseRecord {
		[System.Xml.Serialization.XmlElement("AlbumId")]
		public long varWSAlbumId;

		[System.Xml.Serialization.XmlElement("Id")]
		public long varWSId;

		[System.Xml.Serialization.XmlElement("Title")]
		public string varWSTitle;

		[System.Xml.Serialization.XmlElement("Url")]
		public string varWSUrl;

		[System.Xml.Serialization.XmlElement("ThumbnailUrl")]
		public string varWSThumbnailUrl;

		public WORCGetPhotosResponseRecord() {
			varWSAlbumId = (long) 0L;
			varWSId = (long) 0L;
			varWSTitle = (string) "";
			varWSUrl = (string) "";
			varWSThumbnailUrl = (string) "";
		}

		public WORCGetPhotosResponseRecord(STGetPhotosResponseStructure r) {
			varWSAlbumId = (long) r.ssAlbumId;
			varWSId = (long) r.ssId;
			varWSTitle = BaseAppUtils.RemoveControlChars(r.ssTitle);
			varWSUrl = BaseAppUtils.RemoveControlChars(r.ssUrl);
			varWSThumbnailUrl = BaseAppUtils.RemoveControlChars(r.ssThumbnailUrl);
		}

		public static RLGetPhotosResponseList ToRecordList(WORCGetPhotosResponseRecord[] array) {
			RLGetPhotosResponseList rl = new RLGetPhotosResponseList();
			if (array != null) {
				foreach(WORCGetPhotosResponseRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCGetPhotosResponseRecord[] FromRecordList(RLGetPhotosResponseList rl) {
			WORCGetPhotosResponseRecord[] array = new WORCGetPhotosResponseRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCGetPhotosResponseRecord {
		public static implicit operator WORCGetPhotosResponseRecord(RCGetPhotosResponseRecord r) {
			return new WORCGetPhotosResponseRecord(r.ssSTGetPhotosResponse);
		}

		public static implicit operator RCGetPhotosResponseRecord(WORCGetPhotosResponseRecord w) {
			RCGetPhotosResponseRecord r = new RCGetPhotosResponseRecord("");
			if (w != null) {
				r.ssSTGetPhotosResponse = w;
			}
			return r;
		}

	}

	partial struct STGetPhotosResponseStructure {
		public static implicit operator WORCGetPhotosResponseRecord(STGetPhotosResponseStructure r) {
			return new WORCGetPhotosResponseRecord(r);
		}

		public static implicit operator STGetPhotosResponseStructure(WORCGetPhotosResponseRecord w) {
			STGetPhotosResponseStructure r = new STGetPhotosResponseStructure("");
			if (w != null) {
				r.ssAlbumId = (long) w.varWSAlbumId;
				r.ssId = (long) w.varWSId;
				r.ssTitle = ((string) w.varWSTitle ?? "");
				r.ssUrl = ((string) w.varWSUrl ?? "");
				r.ssThumbnailUrl = ((string) w.varWSThumbnailUrl ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLGetPhotosResponseRecordList {
		public WORCGetPhotosResponseRecord[] Array;


		public WORLGetPhotosResponseRecordList(WORCGetPhotosResponseRecord[] r) {
			if (r == null)
			Array = new WORCGetPhotosResponseRecord[0];
			else
			Array = r;
		}
		public WORLGetPhotosResponseRecordList() {
			Array = new WORCGetPhotosResponseRecord[0];
		}

		public WORLGetPhotosResponseRecordList(RLGetPhotosResponseRecordList rl) {
			rl=(RLGetPhotosResponseRecordList) rl.Duplicate();
			Array = new WORCGetPhotosResponseRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCGetPhotosResponseRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLGetPhotosResponseRecordList {
		public static implicit operator RLGetPhotosResponseRecordList(WORCGetPhotosResponseRecord[] array) {
			RLGetPhotosResponseRecordList rl = new RLGetPhotosResponseRecordList();
			if (array != null) {
				foreach(WORCGetPhotosResponseRecord val in array) {
					rl.Append((RCGetPhotosResponseRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCGetPhotosResponseRecord[](RLGetPhotosResponseRecordList rl) {
			WORCGetPhotosResponseRecord[] array = new WORCGetPhotosResponseRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCGetPhotosResponseRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLGetPhotosResponseRecordList {
		public static implicit operator RLGetPhotosResponseRecordList(WORLGetPhotosResponseRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLGetPhotosResponseRecordList(RLGetPhotosResponseRecordList rl) {
			return new WORLGetPhotosResponseRecordList(rl);
		}
		public static implicit operator WORCGetPhotosResponseRecord[](WORLGetPhotosResponseRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLGetPhotosResponseRecordList(WORCGetPhotosResponseRecord[] array) {
			return new WORLGetPhotosResponseRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLGetPhotosResponseList {
		public WORCGetPhotosResponseRecord[] Array;


		public WORLGetPhotosResponseList(WORCGetPhotosResponseRecord[] r) {
			if (r == null)
			Array = new WORCGetPhotosResponseRecord[0];
			else
			Array = r;
		}
		public WORLGetPhotosResponseList() {
			Array = new WORCGetPhotosResponseRecord[0];
		}

		public WORLGetPhotosResponseList(RLGetPhotosResponseList rl) {
			rl=(RLGetPhotosResponseList) rl.Duplicate();
			Array = new WORCGetPhotosResponseRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLGetPhotosResponseList {
		public static implicit operator RLGetPhotosResponseList(WORCGetPhotosResponseRecord[] array) {
			RLGetPhotosResponseList rl = new RLGetPhotosResponseList();
			if (array != null) {
				foreach(WORCGetPhotosResponseRecord val in array) {
					rl.Append((STGetPhotosResponseStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCGetPhotosResponseRecord[](RLGetPhotosResponseList rl) {
			WORCGetPhotosResponseRecord[] array = new WORCGetPhotosResponseRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STGetPhotosResponseStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLGetPhotosResponseList {
		public static implicit operator RLGetPhotosResponseList(WORLGetPhotosResponseList w) {
			return w.Array;
		}
		public static implicit operator WORLGetPhotosResponseList(RLGetPhotosResponseList rl) {
			return new WORLGetPhotosResponseList(rl);
		}
		public static implicit operator WORCGetPhotosResponseRecord[](WORLGetPhotosResponseList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLGetPhotosResponseList(WORCGetPhotosResponseRecord[] array) {
			return new WORLGetPhotosResponseList(array);
		}
	}
}


namespace ssTeste_SAP {
	using System.IO;
	using System.Net;
	using System.Text;
	using System.Data;
	using System.Collections.Generic;
	using Newtonsoft.Json;
	public static partial class CcJsonplaceholderTypicode {
		public class RESTGetPhotosResponse {
			[JsonProperty("albumId")]
			public long? restAlbumId;

			[JsonProperty("id")]
			public long? restId;

			[JsonProperty("title")]
			public string restTitle;

			[JsonProperty("url")]
			public string restUrl;

			[JsonProperty("thumbnailUrl")]
			public string restThumbnailUrl;

			public RESTGetPhotosResponse() {}

			public RESTGetPhotosResponse(STGetPhotosResponseStructure s) {
				restAlbumId = s.ssAlbumId == 0L ? null:(long?) s.ssAlbumId;
				restId = s.ssId == 0L ? null:(long?) s.ssId;
				restTitle = s.ssTitle == "" ? null: s.ssTitle;
				restUrl = s.ssUrl == "" ? null: s.ssUrl;
				restThumbnailUrl = s.ssThumbnailUrl == "" ? null: s.ssThumbnailUrl;
			}

			public static STGetPhotosResponseStructure ToStructure(RESTGetPhotosResponse obj) {
				STGetPhotosResponseStructure s = new STGetPhotosResponseStructure(null);
				if (obj != null) {
					s.ssAlbumId = obj.restAlbumId == null ? 0L: obj.restAlbumId.Value;
					s.ssId = obj.restId == null ? 0L: obj.restId.Value;
					s.ssTitle = obj.restTitle == null ? "": obj.restTitle;
					s.ssUrl = obj.restUrl == null ? "": obj.restUrl;
					s.ssThumbnailUrl = obj.restThumbnailUrl == null ? "": obj.restThumbnailUrl;
				}
				return s;
			}

			public static RESTGetPhotosResponse FromStructure(STGetPhotosResponseStructure s) {
				return new RESTGetPhotosResponse(s);
			}

		}
	}
}
