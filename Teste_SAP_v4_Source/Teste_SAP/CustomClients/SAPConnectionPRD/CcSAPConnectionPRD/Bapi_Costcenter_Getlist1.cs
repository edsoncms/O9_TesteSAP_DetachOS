/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;
using System.IO;
using System.Text;
using System.Data;
using System.Web;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Runtime.CompilerServices;
using OutSystems.HubEdition.RuntimePlatform.Db;
using SAP.Middleware.Connector;
using OutSystems.Plugin.SAP;

namespace ssTeste_SAP {
	public static partial class CcSAPConnectionPRD {
		/// <summary>
		/// Action: Bapi_Costcenter_Getlist1
		/// </summary>

		public static void ActionBapi_Costcenter_Getlist1(HeContext heContext, ICcSAPConnectionPRDCallbacks _callbacks, string inParamBusiness_Area_From, string inParamBusiness_Area_To, string inParamCompanycode_From, string inParamCompanycode_To, string inParamControllingarea, string inParamCostcentergroup, string inParamCostcenter_From, string inParamCostcenter_To, DateTime inParamDate_From, DateTime inParamDate_To, string inParamMaster_Data_Inactive, string inParamPerson_In_Charge_From, string inParamPerson_In_Charge_To, string inParamPerson_In_Charge_User_From, string inParamPerson_In_Charge_User_To, RLCostcenterlistList inParamCostcenterlist_In, RLExtensioninList inParamExtensionin_In, RLExtensioninList inParamExtensionout_In, RLBAPIRET2List inParamReturn_In, out RLCostcenterlistList outParamCostcenterlist_Out, out RLExtensioninList outParamExtensionin_Out, out RLExtensioninList outParamExtensionout_Out, out RLBAPIRET2List outParamReturn_Out) {
			outParamCostcenterlist_Out = new RLCostcenterlistList();

			outParamExtensionin_Out = new RLExtensioninList();

			outParamExtensionout_Out = new RLExtensioninList();

			outParamReturn_Out = new RLBAPIRET2List();

			String __url = "";
			String __errorLogId = "";
			String __endpoint = null;
			String __message = null;
			String __detail = null;
			String __detailLabel = null;
			DateTime __startExecution = DateTime.Now;
			try {
				SapCallContext callContext = new SapCallContext();
				OutSystems.Plugin.SAP.SapConfiguration config = OutSystems.Plugin.SAP.SapConfiguration.GetCustomClientConfiguration("b812d203-2167-447b-8715-96db326ff175", 94);
				StringBuilder detailedTrace = new StringBuilder();
				int index;
				RfcDestination destination = SapTransactionHandler.GetManualContextDestination(System.Web.HttpContext.Current, "SAPConnectionPRD");
				if (destination == null) {
					detailedTrace.AppendLine("Getting new destination.");
					RfcConfigParameters configParameters = SapPluginRuntimeUtils.GetRfcConfigParameters();
					SapNcoConnectionManager.ConnectionManager.Destination managerDestination = SapPluginRuntimeUtils.GetDestination(configParameters);
					destination = managerDestination.RfcDestination;
				}
				SapTransactionHandler.initializeContext(System.Web.HttpContext.Current, "SAPConnectionPRD", destination);
				detailedTrace.AppendLine("Parameters sent:");
				detailedTrace.AppendLine();
				CultureInfo savedCulture = Thread.CurrentThread.CurrentCulture;
				bool isInputParam = true;
				try
				{
					Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
					IRfcFunction func = destination.Repository.CreateFunction("BAPI_COSTCENTER_GETLIST1");
					IRfcStructure rfcStr = null;
					IRfcTable rfcTable = null;
					callContext.CurrentParameterName = String.Empty;
					callContext.CurrentParameterName = "Business_Area_From";
					if (!(inParamBusiness_Area_From == "")) {
						detailedTrace.AppendLine("'BUSINESS_AREA_FROM' = '" +inParamBusiness_Area_From+ "'");
						func.SetValue("BUSINESS_AREA_FROM", inParamBusiness_Area_From);
					}
					callContext.CurrentParameterName = "Business_Area_To";
					if (!(inParamBusiness_Area_To == "")) {
						detailedTrace.AppendLine("'BUSINESS_AREA_TO' = '" +inParamBusiness_Area_To+ "'");
						func.SetValue("BUSINESS_AREA_TO", inParamBusiness_Area_To);
					}
					callContext.CurrentParameterName = "Companycode_From";
					if (!(inParamCompanycode_From == "")) {
						detailedTrace.AppendLine("'COMPANYCODE_FROM' = '" +inParamCompanycode_From+ "'");
						func.SetValue("COMPANYCODE_FROM", inParamCompanycode_From);
					}
					callContext.CurrentParameterName = "Companycode_To";
					if (!(inParamCompanycode_To == "")) {
						detailedTrace.AppendLine("'COMPANYCODE_TO' = '" +inParamCompanycode_To+ "'");
						func.SetValue("COMPANYCODE_TO", inParamCompanycode_To);
					}
					callContext.CurrentParameterName = "Controllingarea";
					detailedTrace.AppendLine("'CONTROLLINGAREA' = '" +inParamControllingarea+ "'");
					func.SetValue("CONTROLLINGAREA", inParamControllingarea);
					callContext.CurrentParameterName = "Costcentergroup";
					if (!(inParamCostcentergroup == "")) {
						detailedTrace.AppendLine("'COSTCENTERGROUP' = '" +inParamCostcentergroup+ "'");
						func.SetValue("COSTCENTERGROUP", inParamCostcentergroup);
					}
					callContext.CurrentParameterName = "Costcenter_From";
					if (!(inParamCostcenter_From == "")) {
						detailedTrace.AppendLine("'COSTCENTER_FROM' = '" +inParamCostcenter_From+ "'");
						func.SetValue("COSTCENTER_FROM", inParamCostcenter_From);
					}
					callContext.CurrentParameterName = "Costcenter_To";
					if (!(inParamCostcenter_To == "")) {
						detailedTrace.AppendLine("'COSTCENTER_TO' = '" +inParamCostcenter_To+ "'");
						func.SetValue("COSTCENTER_TO", inParamCostcenter_To);
					}
					callContext.CurrentParameterName = "Date_From";
					if (!(inParamDate_From == new DateTime(1900, 1, 1, 0, 0, 0))) {
						detailedTrace.AppendLine("'DATE_FROM' = '" +inParamDate_From.ToString("yyyyMMdd") + "'");
						func.SetValue("DATE_FROM", inParamDate_From.ToString("yyyyMMdd"));
					}
					callContext.CurrentParameterName = "Date_To";
					if (!(inParamDate_To == new DateTime(1900, 1, 1, 0, 0, 0))) {
						detailedTrace.AppendLine("'DATE_TO' = '" +inParamDate_To.ToString("yyyyMMdd") + "'");
						func.SetValue("DATE_TO", inParamDate_To.ToString("yyyyMMdd"));
					}
					callContext.CurrentParameterName = "Master_Data_Inactive";
					if (!(inParamMaster_Data_Inactive == "")) {
						detailedTrace.AppendLine("'MASTER_DATA_INACTIVE' = '" +inParamMaster_Data_Inactive+ "'");
						func.SetValue("MASTER_DATA_INACTIVE", inParamMaster_Data_Inactive);
					}
					callContext.CurrentParameterName = "Person_In_Charge_From";
					if (!(inParamPerson_In_Charge_From == "")) {
						detailedTrace.AppendLine("'PERSON_IN_CHARGE_FROM' = '" +inParamPerson_In_Charge_From+ "'");
						func.SetValue("PERSON_IN_CHARGE_FROM", inParamPerson_In_Charge_From);
					}
					callContext.CurrentParameterName = "Person_In_Charge_To";
					if (!(inParamPerson_In_Charge_To == "")) {
						detailedTrace.AppendLine("'PERSON_IN_CHARGE_TO' = '" +inParamPerson_In_Charge_To+ "'");
						func.SetValue("PERSON_IN_CHARGE_TO", inParamPerson_In_Charge_To);
					}
					callContext.CurrentParameterName = "Person_In_Charge_User_From";
					if (!(inParamPerson_In_Charge_User_From == "")) {
						detailedTrace.AppendLine("'PERSON_IN_CHARGE_USER_FROM' = '" +inParamPerson_In_Charge_User_From+ "'");
						func.SetValue("PERSON_IN_CHARGE_USER_FROM", inParamPerson_In_Charge_User_From);
					}
					callContext.CurrentParameterName = "Person_In_Charge_User_To";
					if (!(inParamPerson_In_Charge_User_To == "")) {
						detailedTrace.AppendLine("'PERSON_IN_CHARGE_USER_TO' = '" +inParamPerson_In_Charge_User_To+ "'");
						func.SetValue("PERSON_IN_CHARGE_USER_TO", inParamPerson_In_Charge_User_To);
					}
					callContext.CurrentParameterName = "Costcenterlist_In";
					if (inParamCostcenterlist_In != null)
					{
						rfcTable = func.GetTable("COSTCENTERLIST");
						index = 0;
						foreach(var elem in inParamCostcenterlist_In)
						{
							rfcTable.Append();
							StructureHelperCostcenterlist.FromStructure(destination, rfcTable, (STCostcenterlistStructure) elem, "COSTCENTERLIST", "BAPI_COSTCENTER_GETLIST1", detailedTrace, "COSTCENTERLIST.[" + index + "].", callContext);
							index++;
						}
					}
					callContext.CurrentParameterName = "Extensionin_In";
					if (inParamExtensionin_In != null)
					{
						rfcTable = func.GetTable("EXTENSIONIN");
						index = 0;
						foreach(var elem in inParamExtensionin_In)
						{
							rfcTable.Append();
							StructureHelperExtensionin.FromStructure(destination, rfcTable, (STExtensioninStructure) elem, "EXTENSIONIN", "BAPI_COSTCENTER_GETLIST1", detailedTrace, "EXTENSIONIN.[" + index + "].", callContext);
							index++;
						}
					}
					callContext.CurrentParameterName = "Extensionout_In";
					if (inParamExtensionout_In != null)
					{
						rfcTable = func.GetTable("EXTENSIONOUT");
						index = 0;
						foreach(var elem in inParamExtensionout_In)
						{
							rfcTable.Append();
							StructureHelperExtensionin.FromStructure(destination, rfcTable, (STExtensioninStructure) elem, "EXTENSIONOUT", "BAPI_COSTCENTER_GETLIST1", detailedTrace, "EXTENSIONOUT.[" + index + "].", callContext);
							index++;
						}
					}
					callContext.CurrentParameterName = "Return_In";
					if (inParamReturn_In != null)
					{
						rfcTable = func.GetTable("RETURN");
						index = 0;
						foreach(var elem in inParamReturn_In)
						{
							rfcTable.Append();
							StructureHelperBAPIRET2.FromStructure(destination, rfcTable, (STBAPIRET2Structure) elem, "RETURN", "BAPI_COSTCENTER_GETLIST1", detailedTrace, "RETURN.[" + index + "].", callContext);
							index++;
						}
					}
					callContext.CurrentParameterName = String.Empty;
					isInputParam = false;
					func.Invoke(destination);
					detailedTrace.AppendLine("Parameters received:");
					detailedTrace.AppendLine();
					callContext.CurrentParameterName = "Costcenterlist_Out";
					rfcTable = func.GetTable("COSTCENTERLIST");
					outParamCostcenterlist_Out = new RLCostcenterlistList();
					index = 0;
					foreach(IRfcStructure row in rfcTable)
					{
						outParamCostcenterlist_Out.Append(StructureHelperCostcenterlist.ToStructure(destination, row, "COSTCENTERLIST", "BAPI_COSTCENTER_GETLIST1", detailedTrace, "COSTCENTERLIST.[" + index + "].", callContext));
						index++;
					}
					callContext.CurrentParameterName = "Extensionin_Out";
					rfcTable = func.GetTable("EXTENSIONIN");
					outParamExtensionin_Out = new RLExtensioninList();
					index = 0;
					foreach(IRfcStructure row in rfcTable)
					{
						outParamExtensionin_Out.Append(StructureHelperExtensionin.ToStructure(destination, row, "EXTENSIONIN", "BAPI_COSTCENTER_GETLIST1", detailedTrace, "EXTENSIONIN.[" + index + "].", callContext));
						index++;
					}
					callContext.CurrentParameterName = "Extensionout_Out";
					rfcTable = func.GetTable("EXTENSIONOUT");
					outParamExtensionout_Out = new RLExtensioninList();
					index = 0;
					foreach(IRfcStructure row in rfcTable)
					{
						outParamExtensionout_Out.Append(StructureHelperExtensionin.ToStructure(destination, row, "EXTENSIONOUT", "BAPI_COSTCENTER_GETLIST1", detailedTrace, "EXTENSIONOUT.[" + index + "].", callContext));
						index++;
					}
					callContext.CurrentParameterName = "Return_Out";
					rfcTable = func.GetTable("RETURN");
					outParamReturn_Out = new RLBAPIRET2List();
					index = 0;
					foreach(IRfcStructure row in rfcTable)
					{
						outParamReturn_Out.Append(StructureHelperBAPIRET2.ToStructure(destination, row, "RETURN", "BAPI_COSTCENTER_GETLIST1", detailedTrace, "RETURN.[" + index + "].", callContext));
						index++;
					}
					callContext.CurrentParameterName = String.Empty;
					SapTransactionHandler.commitIfNeeded(System.Web.HttpContext.Current, "SAPConnectionPRD", destination);
				} catch (Exception e) {
					SapExceptionHandler.handleException(e, isInputParam, callContext.CurrentParameterName, "Bapi_Costcenter_Getlist1", SapTransactionHandler.isManualContext(System.Web.HttpContext.Current, "SAPConnectionPRD"), destination, "BAPI_COSTCENTER_GETLIST1");
				} finally {
					SapTransactionHandler.closeContextIfNeeded(System.Web.HttpContext.Current, "SAPConnectionPRD", destination);
					Thread.CurrentThread.CurrentCulture = savedCulture;
					__endpoint = "BAPI_COSTCENTER_GETLIST1";
					if (config.TraceAll) {
						__message = "";
						__detail = detailedTrace.ToString();
						__detailLabel = "Trace";
					}
				}
			} catch (Exception __ex) {
				__errorLogId = ErrorLog.LogApplicationError(__ex, heContext, "SAP");
				throw __ex;
			} finally {
				DateTime __instant = DateTime.Now;
				TimeSpan __duration = __instant.Subtract(__startExecution);
				if (heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterConsumedIntegrationExecuted("SAPConnectionPRD_Bapi_Costcenter_Getlist1", "9e5e15d6-f0d5-4838-9923-537868aa3b1b",
					 "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP",
					 "SAP", (int) __duration.TotalMilliseconds, __instant,
					__endpoint); 
				}
				if (!String.IsNullOrEmpty(__errorLogId) ||
				(heContext.AppInfo != null && (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging))) {
					String __integrationLogId = IntegrationLog.StaticWrite(__instant,
					(int) __duration.TotalMilliseconds,
					null,
					__endpoint,
					 "SAPConnectionPRD.Bapi_Costcenter_Getlist1",
					 "SAP",
					(heContext.AppInfo != null ? heContext.AppInfo.eSpaceId: 0),
					(heContext.AppInfo != null && heContext.AppInfo.Tenant != null ? heContext.AppInfo.Tenant.Id: 0),
					__errorLogId,
					Environment.MachineName,
					false);
					if (!String.IsNullOrEmpty(__detail) ||
					!String.IsNullOrEmpty(__message)) {
						IntDetailLog.StaticWrite(__integrationLogId,
						__instant,
						(heContext.AppInfo != null && heContext.AppInfo.Tenant != null ? heContext.AppInfo.Tenant.Id: 0),
						__message,
						__detail,
						__detailLabel);
					}
				}
			}
		}
	}
}
