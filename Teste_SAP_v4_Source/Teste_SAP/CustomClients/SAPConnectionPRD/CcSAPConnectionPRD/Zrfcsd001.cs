/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;
using System.IO;
using System.Text;
using System.Data;
using System.Web;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Runtime.CompilerServices;
using OutSystems.HubEdition.RuntimePlatform.Db;
using SAP.Middleware.Connector;
using OutSystems.Plugin.SAP;

namespace ssTeste_SAP {
	public static partial class CcSAPConnectionPRD {
		/// <summary>
		/// Action: Zrfcsd001
		/// </summary>

		public static void ActionZrfcsd001(HeContext heContext, ICcSAPConnectionPRDCallbacks _callbacks, string inParamCanal_Venda, string inParamCod_Cliente, string inParamCond_Preco, string inParamMaterial, string inParamOrg_Venda, string inParamSetor_Venda, out string outParamCanal_De_Venda, out string outParamCodi_Cliente, out string outParamCondi_Preco, out string outParamNum_Material, out string outParamOrga_Venda, out string outParamSetor_De_Venda, out decimal outParamValor_Condicao) {
			outParamCanal_De_Venda = "";

			outParamCodi_Cliente = "";

			outParamCondi_Preco = "";

			outParamNum_Material = "";

			outParamOrga_Venda = "";

			outParamSetor_De_Venda = "";

			outParamValor_Condicao = 0.0M;

			String __url = "";
			String __errorLogId = "";
			String __endpoint = null;
			String __message = null;
			String __detail = null;
			String __detailLabel = null;
			DateTime __startExecution = DateTime.Now;
			try {
				SapCallContext callContext = new SapCallContext();
				OutSystems.Plugin.SAP.SapConfiguration config = OutSystems.Plugin.SAP.SapConfiguration.GetCustomClientConfiguration("b812d203-2167-447b-8715-96db326ff175", 94);
				StringBuilder detailedTrace = new StringBuilder();
				int index;
				RfcDestination destination = SapTransactionHandler.GetManualContextDestination(System.Web.HttpContext.Current, "SAPConnectionPRD");
				if (destination == null) {
					detailedTrace.AppendLine("Getting new destination.");
					RfcConfigParameters configParameters = SapPluginRuntimeUtils.GetRfcConfigParameters();
					SapNcoConnectionManager.ConnectionManager.Destination managerDestination = SapPluginRuntimeUtils.GetDestination(configParameters);
					destination = managerDestination.RfcDestination;
				}
				SapTransactionHandler.initializeContext(System.Web.HttpContext.Current, "SAPConnectionPRD", destination);
				detailedTrace.AppendLine("Parameters sent:");
				detailedTrace.AppendLine();
				CultureInfo savedCulture = Thread.CurrentThread.CurrentCulture;
				bool isInputParam = true;
				try
				{
					Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
					IRfcFunction func = destination.Repository.CreateFunction("ZRFCSD001");
					IRfcStructure rfcStr = null;
					IRfcTable rfcTable = null;
					callContext.CurrentParameterName = String.Empty;
					callContext.CurrentParameterName = "Canal_Venda";
					detailedTrace.AppendLine("'CANAL_VENDA' = '" +inParamCanal_Venda+ "'");
					func.SetValue("CANAL_VENDA", inParamCanal_Venda);
					callContext.CurrentParameterName = "Cod_Cliente";
					detailedTrace.AppendLine("'COD_CLIENTE' = '" +inParamCod_Cliente+ "'");
					func.SetValue("COD_CLIENTE", inParamCod_Cliente);
					callContext.CurrentParameterName = "Cond_Preco";
					detailedTrace.AppendLine("'COND_PRECO' = '" +inParamCond_Preco+ "'");
					func.SetValue("COND_PRECO", inParamCond_Preco);
					callContext.CurrentParameterName = "Material";
					detailedTrace.AppendLine("'MATERIAL' = '" +inParamMaterial+ "'");
					func.SetValue("MATERIAL", inParamMaterial);
					callContext.CurrentParameterName = "Org_Venda";
					detailedTrace.AppendLine("'ORG_VENDA' = '" +inParamOrg_Venda+ "'");
					func.SetValue("ORG_VENDA", inParamOrg_Venda);
					callContext.CurrentParameterName = "Setor_Venda";
					detailedTrace.AppendLine("'SETOR_VENDA' = '" +inParamSetor_Venda+ "'");
					func.SetValue("SETOR_VENDA", inParamSetor_Venda);
					callContext.CurrentParameterName = String.Empty;
					isInputParam = false;
					func.Invoke(destination);
					detailedTrace.AppendLine("Parameters received:");
					detailedTrace.AppendLine();
					callContext.CurrentParameterName = "Canal_De_Venda";
					outParamCanal_De_Venda = func.GetString("CANAL_DE_VENDA");
					detailedTrace.AppendLine("'CANAL_DE_VENDA' = '" +outParamCanal_De_Venda+ "'");
					callContext.CurrentParameterName = "Codi_Cliente";
					outParamCodi_Cliente = func.GetString("CODI_CLIENTE");
					detailedTrace.AppendLine("'CODI_CLIENTE' = '" +outParamCodi_Cliente+ "'");
					callContext.CurrentParameterName = "Condi_Preco";
					outParamCondi_Preco = func.GetString("CONDI_PRECO");
					detailedTrace.AppendLine("'CONDI_PRECO' = '" +outParamCondi_Preco+ "'");
					callContext.CurrentParameterName = "Num_Material";
					outParamNum_Material = func.GetString("NUM_MATERIAL");
					detailedTrace.AppendLine("'NUM_MATERIAL' = '" +outParamNum_Material+ "'");
					callContext.CurrentParameterName = "Orga_Venda";
					outParamOrga_Venda = func.GetString("ORGA_VENDA");
					detailedTrace.AppendLine("'ORGA_VENDA' = '" +outParamOrga_Venda+ "'");
					callContext.CurrentParameterName = "Setor_De_Venda";
					outParamSetor_De_Venda = func.GetString("SETOR_DE_VENDA");
					detailedTrace.AppendLine("'SETOR_DE_VENDA' = '" +outParamSetor_De_Venda+ "'");
					callContext.CurrentParameterName = "Valor_Condicao";
					outParamValor_Condicao = func.GetDecimal("VALOR_CONDICAO");
					detailedTrace.AppendLine("'VALOR_CONDICAO' = '" +outParamValor_Condicao+ "'");
					callContext.CurrentParameterName = String.Empty;
					SapTransactionHandler.commitIfNeeded(System.Web.HttpContext.Current, "SAPConnectionPRD", destination);
				} catch (Exception e) {
					SapExceptionHandler.handleException(e, isInputParam, callContext.CurrentParameterName, "Zrfcsd001", SapTransactionHandler.isManualContext(System.Web.HttpContext.Current, "SAPConnectionPRD"), destination, "ZRFCSD001");
				} finally {
					SapTransactionHandler.closeContextIfNeeded(System.Web.HttpContext.Current, "SAPConnectionPRD", destination);
					Thread.CurrentThread.CurrentCulture = savedCulture;
					__endpoint = "ZRFCSD001";
					if (config.TraceAll) {
						__message = "";
						__detail = detailedTrace.ToString();
						__detailLabel = "Trace";
					}
				}
			} catch (Exception __ex) {
				__errorLogId = ErrorLog.LogApplicationError(__ex, heContext, "SAP");
				throw __ex;
			} finally {
				DateTime __instant = DateTime.Now;
				TimeSpan __duration = __instant.Subtract(__startExecution);
				if (heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterConsumedIntegrationExecuted("SAPConnectionPRD_Zrfcsd001", "199f23f5-e11d-44b1-b996-3d58e55e5173",
					 "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP",
					 "SAP", (int) __duration.TotalMilliseconds, __instant,
					__endpoint); 
				}
				if (!String.IsNullOrEmpty(__errorLogId) ||
				(heContext.AppInfo != null && (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging))) {
					String __integrationLogId = IntegrationLog.StaticWrite(__instant,
					(int) __duration.TotalMilliseconds,
					null,
					__endpoint,
					 "SAPConnectionPRD.Zrfcsd001",
					 "SAP",
					(heContext.AppInfo != null ? heContext.AppInfo.eSpaceId: 0),
					(heContext.AppInfo != null && heContext.AppInfo.Tenant != null ? heContext.AppInfo.Tenant.Id: 0),
					__errorLogId,
					Environment.MachineName,
					false);
					if (!String.IsNullOrEmpty(__detail) ||
					!String.IsNullOrEmpty(__message)) {
						IntDetailLog.StaticWrite(__integrationLogId,
						__instant,
						(heContext.AppInfo != null && heContext.AppInfo.Tenant != null ? heContext.AppInfo.Tenant.Id: 0),
						__message,
						__detail,
						__detailLabel);
					}
				}
			}
		}
	}
}
