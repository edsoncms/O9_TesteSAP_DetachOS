/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STBAPIRET2Structure</code> that represents the Service Studio structure
	///  <code>BAPIRET2</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STBAPIRET2Structure: ISerializable, ITypedRecord<STBAPIRET2Structure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdType = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*9SAhPprIdE+d4qYZditw2A");
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*CxicjbuUwEWcSWmwQOQZ+A");
		private static readonly GlobalObjectKey IdNumber = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*3zEfBKNPB0GZostENcSltw");
		private static readonly GlobalObjectKey IdMessage = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*T1rDJjaVYUygjQEEb3dqRA");
		private static readonly GlobalObjectKey IdLog_No = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*XKVp1YS+O0CfvTRwq7SIGw");
		private static readonly GlobalObjectKey IdLog_Msg_No = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*IDBJzbVFJEie0tC55xYbNw");
		private static readonly GlobalObjectKey IdMessage_V1 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*gcxOwMsaMkyHg4OzNy7j5Q");
		private static readonly GlobalObjectKey IdMessage_V2 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*+RQPHSKm+0C5Uxva5JTf_Q");
		private static readonly GlobalObjectKey IdMessage_V3 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*AEo6V8L+pUel4E9wJ_kB+w");
		private static readonly GlobalObjectKey IdMessage_V4 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Y2ix9EWAaUiYJxJUH1ElQQ");
		private static readonly GlobalObjectKey IdParameter = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*0KBEwh2IVUKycDmCdb66dw");
		private static readonly GlobalObjectKey IdRow = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*FijM7dq_jUSUt48sTj+1eQ");
		private static readonly GlobalObjectKey IdField = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*C5ghElVj9EKpjjPKrlrWFQ");
		private static readonly GlobalObjectKey IdSystem = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*qHWRGq0A7UWvxt0qCtHOPA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Type")]
		public string ssType;

		[System.Xml.Serialization.XmlElement("Id")]
		public string ssId;

		[System.Xml.Serialization.XmlElement("Number")]
		public string ssNumber;

		[System.Xml.Serialization.XmlElement("Message")]
		public string ssMessage;

		[System.Xml.Serialization.XmlElement("Log_No")]
		public string ssLog_No;

		[System.Xml.Serialization.XmlElement("Log_Msg_No")]
		public string ssLog_Msg_No;

		[System.Xml.Serialization.XmlElement("Message_V1")]
		public string ssMessage_V1;

		[System.Xml.Serialization.XmlElement("Message_V2")]
		public string ssMessage_V2;

		[System.Xml.Serialization.XmlElement("Message_V3")]
		public string ssMessage_V3;

		[System.Xml.Serialization.XmlElement("Message_V4")]
		public string ssMessage_V4;

		[System.Xml.Serialization.XmlElement("Parameter")]
		public string ssParameter;

		[System.Xml.Serialization.XmlElement("Row")]
		public int ssRow;

		[System.Xml.Serialization.XmlElement("Field")]
		public string ssField;

		[System.Xml.Serialization.XmlElement("System")]
		public string ssSystem;


		public BitArray OptimizedAttributes;

		public STBAPIRET2Structure(params string[] dummy) {
			OptimizedAttributes = null;
			ssType = "";
			ssId = "";
			ssNumber = "";
			ssMessage = "";
			ssLog_No = "";
			ssLog_Msg_No = "";
			ssMessage_V1 = "";
			ssMessage_V2 = "";
			ssMessage_V3 = "";
			ssMessage_V4 = "";
			ssParameter = "";
			ssRow = 0;
			ssField = "";
			ssSystem = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssType = r.ReadText(index++, "BAPIRET2.Type", "");
			ssId = r.ReadText(index++, "BAPIRET2.Id", "");
			ssNumber = r.ReadText(index++, "BAPIRET2.Number", "");
			ssMessage = r.ReadText(index++, "BAPIRET2.Message", "");
			ssLog_No = r.ReadText(index++, "BAPIRET2.Log_No", "");
			ssLog_Msg_No = r.ReadText(index++, "BAPIRET2.Log_Msg_No", "");
			ssMessage_V1 = r.ReadText(index++, "BAPIRET2.Message_V1", "");
			ssMessage_V2 = r.ReadText(index++, "BAPIRET2.Message_V2", "");
			ssMessage_V3 = r.ReadText(index++, "BAPIRET2.Message_V3", "");
			ssMessage_V4 = r.ReadText(index++, "BAPIRET2.Message_V4", "");
			ssParameter = r.ReadText(index++, "BAPIRET2.Parameter", "");
			ssRow = r.ReadInteger(index++, "BAPIRET2.Row", 0);
			ssField = r.ReadText(index++, "BAPIRET2.Field", "");
			ssSystem = r.ReadText(index++, "BAPIRET2.System", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STBAPIRET2Structure r) {
			this = r;
		}


		public static bool operator == (STBAPIRET2Structure a, STBAPIRET2Structure b) {
			if (a.ssType != b.ssType) return false;
			if (a.ssId != b.ssId) return false;
			if (a.ssNumber != b.ssNumber) return false;
			if (a.ssMessage != b.ssMessage) return false;
			if (a.ssLog_No != b.ssLog_No) return false;
			if (a.ssLog_Msg_No != b.ssLog_Msg_No) return false;
			if (a.ssMessage_V1 != b.ssMessage_V1) return false;
			if (a.ssMessage_V2 != b.ssMessage_V2) return false;
			if (a.ssMessage_V3 != b.ssMessage_V3) return false;
			if (a.ssMessage_V4 != b.ssMessage_V4) return false;
			if (a.ssParameter != b.ssParameter) return false;
			if (a.ssRow != b.ssRow) return false;
			if (a.ssField != b.ssField) return false;
			if (a.ssSystem != b.ssSystem) return false;
			return true;
		}

		public static bool operator != (STBAPIRET2Structure a, STBAPIRET2Structure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STBAPIRET2Structure)) return false;
			return (this == (STBAPIRET2Structure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssType.GetHashCode()
				^ ssId.GetHashCode()
				^ ssNumber.GetHashCode()
				^ ssMessage.GetHashCode()
				^ ssLog_No.GetHashCode()
				^ ssLog_Msg_No.GetHashCode()
				^ ssMessage_V1.GetHashCode()
				^ ssMessage_V2.GetHashCode()
				^ ssMessage_V3.GetHashCode()
				^ ssMessage_V4.GetHashCode()
				^ ssParameter.GetHashCode()
				^ ssRow.GetHashCode()
				^ ssField.GetHashCode()
				^ ssSystem.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STBAPIRET2Structure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssType = "";
			ssId = "";
			ssNumber = "";
			ssMessage = "";
			ssLog_No = "";
			ssLog_Msg_No = "";
			ssMessage_V1 = "";
			ssMessage_V2 = "";
			ssMessage_V3 = "";
			ssMessage_V4 = "";
			ssParameter = "";
			ssRow = 0;
			ssField = "";
			ssSystem = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssType = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssId = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNumber", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNumber' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNumber = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessage = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLog_No", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLog_No' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLog_No = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLog_Msg_No", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLog_Msg_No' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLog_Msg_No = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessage_V1", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessage_V1' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessage_V1 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessage_V2", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessage_V2' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessage_V2 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessage_V3", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessage_V3' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessage_V3 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessage_V4", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessage_V4' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessage_V4 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssParameter", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssParameter' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssParameter = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssRow", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssRow' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssRow = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssField' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssField = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSystem", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSystem' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSystem = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STBAPIRET2Structure Duplicate() {
			STBAPIRET2Structure t;
			t.ssType = this.ssType;
			t.ssId = this.ssId;
			t.ssNumber = this.ssNumber;
			t.ssMessage = this.ssMessage;
			t.ssLog_No = this.ssLog_No;
			t.ssLog_Msg_No = this.ssLog_Msg_No;
			t.ssMessage_V1 = this.ssMessage_V1;
			t.ssMessage_V2 = this.ssMessage_V2;
			t.ssMessage_V3 = this.ssMessage_V3;
			t.ssMessage_V4 = this.ssMessage_V4;
			t.ssParameter = this.ssParameter;
			t.ssRow = this.ssRow;
			t.ssField = this.ssField;
			t.ssSystem = this.ssSystem;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Type")) VarValue.AppendAttribute(recordElem, "Type", ssType, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Number")) VarValue.AppendAttribute(recordElem, "Number", ssNumber, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Number");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Message")) VarValue.AppendAttribute(recordElem, "Message", ssMessage, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Message");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Log_No")) VarValue.AppendAttribute(recordElem, "Log_No", ssLog_No, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Log_No");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Log_Msg_No")) VarValue.AppendAttribute(recordElem, "Log_Msg_No", ssLog_Msg_No, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Log_Msg_No");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Message_V1")) VarValue.AppendAttribute(recordElem, "Message_V1", ssMessage_V1, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Message_V1");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Message_V2")) VarValue.AppendAttribute(recordElem, "Message_V2", ssMessage_V2, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Message_V2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Message_V3")) VarValue.AppendAttribute(recordElem, "Message_V3", ssMessage_V3, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Message_V3");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Message_V4")) VarValue.AppendAttribute(recordElem, "Message_V4", ssMessage_V4, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Message_V4");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Parameter")) VarValue.AppendAttribute(recordElem, "Parameter", ssParameter, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Parameter");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Row")) VarValue.AppendAttribute(recordElem, "Row", ssRow, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Row");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Field")) VarValue.AppendAttribute(recordElem, "Field", ssField, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Field");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".System")) VarValue.AppendAttribute(recordElem, "System", ssSystem, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "System");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Type")) variable.Value = ssType; else variable.Optimized = true;
			} else if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "number") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Number")) variable.Value = ssNumber; else variable.Optimized = true;
			} else if (head == "message") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Message")) variable.Value = ssMessage; else variable.Optimized = true;
			} else if (head == "log_no") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Log_No")) variable.Value = ssLog_No; else variable.Optimized = true;
			} else if (head == "log_msg_no") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Log_Msg_No")) variable.Value = ssLog_Msg_No; else variable.Optimized = true;
			} else if (head == "message_v1") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Message_V1")) variable.Value = ssMessage_V1; else variable.Optimized = true;
			} else if (head == "message_v2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Message_V2")) variable.Value = ssMessage_V2; else variable.Optimized = true;
			} else if (head == "message_v3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Message_V3")) variable.Value = ssMessage_V3; else variable.Optimized = true;
			} else if (head == "message_v4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Message_V4")) variable.Value = ssMessage_V4; else variable.Optimized = true;
			} else if (head == "parameter") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Parameter")) variable.Value = ssParameter; else variable.Optimized = true;
			} else if (head == "row") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Row")) variable.Value = ssRow; else variable.Optimized = true;
			} else if (head == "field") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Field")) variable.Value = ssField; else variable.Optimized = true;
			} else if (head == "system") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".System")) variable.Value = ssSystem; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdType) {
				return ssType;
			} else if (key == IdId) {
				return ssId;
			} else if (key == IdNumber) {
				return ssNumber;
			} else if (key == IdMessage) {
				return ssMessage;
			} else if (key == IdLog_No) {
				return ssLog_No;
			} else if (key == IdLog_Msg_No) {
				return ssLog_Msg_No;
			} else if (key == IdMessage_V1) {
				return ssMessage_V1;
			} else if (key == IdMessage_V2) {
				return ssMessage_V2;
			} else if (key == IdMessage_V3) {
				return ssMessage_V3;
			} else if (key == IdMessage_V4) {
				return ssMessage_V4;
			} else if (key == IdParameter) {
				return ssParameter;
			} else if (key == IdRow) {
				return ssRow;
			} else if (key == IdField) {
				return ssField;
			} else if (key == IdSystem) {
				return ssSystem;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssType = (string) other.AttributeGet(IdType);
			ssId = (string) other.AttributeGet(IdId);
			ssNumber = (string) other.AttributeGet(IdNumber);
			ssMessage = (string) other.AttributeGet(IdMessage);
			ssLog_No = (string) other.AttributeGet(IdLog_No);
			ssLog_Msg_No = (string) other.AttributeGet(IdLog_Msg_No);
			ssMessage_V1 = (string) other.AttributeGet(IdMessage_V1);
			ssMessage_V2 = (string) other.AttributeGet(IdMessage_V2);
			ssMessage_V3 = (string) other.AttributeGet(IdMessage_V3);
			ssMessage_V4 = (string) other.AttributeGet(IdMessage_V4);
			ssParameter = (string) other.AttributeGet(IdParameter);
			ssRow = (int) other.AttributeGet(IdRow);
			ssField = (string) other.AttributeGet(IdField);
			ssSystem = (string) other.AttributeGet(IdSystem);
		}
	} // STBAPIRET2Structure
	/// <summary>
	/// Structure <code>RCBAPIRET2Record</code>
	/// </summary>
	[Serializable()]
	public partial struct RCBAPIRET2Record: ISerializable, ITypedRecord<RCBAPIRET2Record> {
		private static readonly GlobalObjectKey IdBAPIRET2 = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*2R9OaG1L5gC48zzMvwLwuQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("BAPIRET2")]
		public STBAPIRET2Structure ssSTBAPIRET2;


		public static implicit operator STBAPIRET2Structure(RCBAPIRET2Record r) {
			return r.ssSTBAPIRET2;
		}

		public static implicit operator RCBAPIRET2Record(STBAPIRET2Structure r) {
			RCBAPIRET2Record res = new RCBAPIRET2Record(null);
			res.ssSTBAPIRET2 = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCBAPIRET2Record(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTBAPIRET2 = new STBAPIRET2Structure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTBAPIRET2.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTBAPIRET2.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCBAPIRET2Record r) {
			this = r;
		}


		public static bool operator == (RCBAPIRET2Record a, RCBAPIRET2Record b) {
			if (a.ssSTBAPIRET2 != b.ssSTBAPIRET2) return false;
			return true;
		}

		public static bool operator != (RCBAPIRET2Record a, RCBAPIRET2Record b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCBAPIRET2Record)) return false;
			return (this == (RCBAPIRET2Record) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTBAPIRET2.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCBAPIRET2Record(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTBAPIRET2 = new STBAPIRET2Structure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTBAPIRET2", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTBAPIRET2' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTBAPIRET2 = (STBAPIRET2Structure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTBAPIRET2.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTBAPIRET2.InternalRecursiveSave();
		}


		public RCBAPIRET2Record Duplicate() {
			RCBAPIRET2Record t;
			t.ssSTBAPIRET2 = (STBAPIRET2Structure) this.ssSTBAPIRET2.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTBAPIRET2.ToXml(this, recordElem, "BAPIRET2", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "bapiret2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".BAPIRET2")) variable.Value = ssSTBAPIRET2; else variable.Optimized = true;
				variable.SetFieldName("bapiret2");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdBAPIRET2) {
				return ssSTBAPIRET2;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTBAPIRET2.FillFromOther((IRecord) other.AttributeGet(IdBAPIRET2));
		}
	} // RCBAPIRET2Record
	/// <summary>
	/// RecordList type <code>RLBAPIRET2RecordList</code> that represents a record list of
	///  <code>BAPIRET2</code>
	/// </summary>
	[Serializable()]
	public partial class RLBAPIRET2RecordList: GenericRecordList<RCBAPIRET2Record>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCBAPIRET2Record GetElementDefaultValue() {
			return new RCBAPIRET2Record("");
		}

		public T[] ToArray<T>(Func<RCBAPIRET2Record, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLBAPIRET2RecordList recordlist, Func<RCBAPIRET2Record, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLBAPIRET2RecordList ToList<T>(T[] array, Func <T, RCBAPIRET2Record> converter) {
			RLBAPIRET2RecordList result = new RLBAPIRET2RecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLBAPIRET2RecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBAPIRET2RecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBAPIRET2RecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLBAPIRET2RecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCBAPIRET2Record> NewList() {
			return new RLBAPIRET2RecordList();
		}


	} // RLBAPIRET2RecordList
	/// <summary>
	/// RecordList type <code>RLBAPIRET2List</code> that represents a record list of <code>Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLBAPIRET2List: GenericRecordList<STBAPIRET2Structure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STBAPIRET2Structure GetElementDefaultValue() {
			return new STBAPIRET2Structure("");
		}

		public T[] ToArray<T>(Func<STBAPIRET2Structure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLBAPIRET2List recordlist, Func<STBAPIRET2Structure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLBAPIRET2List ToList<T>(T[] array, Func <T, STBAPIRET2Structure> converter) {
			RLBAPIRET2List result = new RLBAPIRET2List();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLBAPIRET2List(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBAPIRET2List(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBAPIRET2List(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLBAPIRET2List(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STBAPIRET2Structure> NewList() {
			return new RLBAPIRET2List();
		}


	} // RLBAPIRET2List
}

namespace ssTeste_SAP {
	[XmlType("BAPIRET2")]
	public class WORCBAPIRET2Record {
		[System.Xml.Serialization.XmlElement("Type")]
		public string varWSType;

		[System.Xml.Serialization.XmlElement("Id")]
		public string varWSId;

		[System.Xml.Serialization.XmlElement("Number")]
		public string varWSNumber;

		[System.Xml.Serialization.XmlElement("Message")]
		public string varWSMessage;

		[System.Xml.Serialization.XmlElement("Log_No")]
		public string varWSLog_No;

		[System.Xml.Serialization.XmlElement("Log_Msg_No")]
		public string varWSLog_Msg_No;

		[System.Xml.Serialization.XmlElement("Message_V1")]
		public string varWSMessage_V1;

		[System.Xml.Serialization.XmlElement("Message_V2")]
		public string varWSMessage_V2;

		[System.Xml.Serialization.XmlElement("Message_V3")]
		public string varWSMessage_V3;

		[System.Xml.Serialization.XmlElement("Message_V4")]
		public string varWSMessage_V4;

		[System.Xml.Serialization.XmlElement("Parameter")]
		public string varWSParameter;

		[System.Xml.Serialization.XmlElement("Row")]
		public int varWSRow;

		[System.Xml.Serialization.XmlElement("Field")]
		public string varWSField;

		[System.Xml.Serialization.XmlElement("System")]
		public string varWSSystem;

		public WORCBAPIRET2Record() {
			varWSType = (string) "";
			varWSId = (string) "";
			varWSNumber = (string) "";
			varWSMessage = (string) "";
			varWSLog_No = (string) "";
			varWSLog_Msg_No = (string) "";
			varWSMessage_V1 = (string) "";
			varWSMessage_V2 = (string) "";
			varWSMessage_V3 = (string) "";
			varWSMessage_V4 = (string) "";
			varWSParameter = (string) "";
			varWSRow = (int) 0;
			varWSField = (string) "";
			varWSSystem = (string) "";
		}

		public WORCBAPIRET2Record(STBAPIRET2Structure r) {
			varWSType = BaseAppUtils.RemoveControlChars(r.ssType);
			varWSId = BaseAppUtils.RemoveControlChars(r.ssId);
			varWSNumber = BaseAppUtils.RemoveControlChars(r.ssNumber);
			varWSMessage = BaseAppUtils.RemoveControlChars(r.ssMessage);
			varWSLog_No = BaseAppUtils.RemoveControlChars(r.ssLog_No);
			varWSLog_Msg_No = BaseAppUtils.RemoveControlChars(r.ssLog_Msg_No);
			varWSMessage_V1 = BaseAppUtils.RemoveControlChars(r.ssMessage_V1);
			varWSMessage_V2 = BaseAppUtils.RemoveControlChars(r.ssMessage_V2);
			varWSMessage_V3 = BaseAppUtils.RemoveControlChars(r.ssMessage_V3);
			varWSMessage_V4 = BaseAppUtils.RemoveControlChars(r.ssMessage_V4);
			varWSParameter = BaseAppUtils.RemoveControlChars(r.ssParameter);
			varWSRow = (int) r.ssRow;
			varWSField = BaseAppUtils.RemoveControlChars(r.ssField);
			varWSSystem = BaseAppUtils.RemoveControlChars(r.ssSystem);
		}

		public static RLBAPIRET2List ToRecordList(WORCBAPIRET2Record[] array) {
			RLBAPIRET2List rl = new RLBAPIRET2List();
			if (array != null) {
				foreach(WORCBAPIRET2Record val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCBAPIRET2Record[] FromRecordList(RLBAPIRET2List rl) {
			WORCBAPIRET2Record[] array = new WORCBAPIRET2Record[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCBAPIRET2Record {
		public static implicit operator WORCBAPIRET2Record(RCBAPIRET2Record r) {
			return new WORCBAPIRET2Record(r.ssSTBAPIRET2);
		}

		public static implicit operator RCBAPIRET2Record(WORCBAPIRET2Record w) {
			RCBAPIRET2Record r = new RCBAPIRET2Record("");
			if (w != null) {
				r.ssSTBAPIRET2 = w;
			}
			return r;
		}

	}

	partial struct STBAPIRET2Structure {
		public static implicit operator WORCBAPIRET2Record(STBAPIRET2Structure r) {
			return new WORCBAPIRET2Record(r);
		}

		public static implicit operator STBAPIRET2Structure(WORCBAPIRET2Record w) {
			STBAPIRET2Structure r = new STBAPIRET2Structure("");
			if (w != null) {
				r.ssType = ((string) w.varWSType ?? "");
				r.ssId = ((string) w.varWSId ?? "");
				r.ssNumber = ((string) w.varWSNumber ?? "");
				r.ssMessage = ((string) w.varWSMessage ?? "");
				r.ssLog_No = ((string) w.varWSLog_No ?? "");
				r.ssLog_Msg_No = ((string) w.varWSLog_Msg_No ?? "");
				r.ssMessage_V1 = ((string) w.varWSMessage_V1 ?? "");
				r.ssMessage_V2 = ((string) w.varWSMessage_V2 ?? "");
				r.ssMessage_V3 = ((string) w.varWSMessage_V3 ?? "");
				r.ssMessage_V4 = ((string) w.varWSMessage_V4 ?? "");
				r.ssParameter = ((string) w.varWSParameter ?? "");
				r.ssRow = (int) w.varWSRow;
				r.ssField = ((string) w.varWSField ?? "");
				r.ssSystem = ((string) w.varWSSystem ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLBAPIRET2RecordList {
		public WORCBAPIRET2Record[] Array;


		public WORLBAPIRET2RecordList(WORCBAPIRET2Record[] r) {
			if (r == null)
			Array = new WORCBAPIRET2Record[0];
			else
			Array = r;
		}
		public WORLBAPIRET2RecordList() {
			Array = new WORCBAPIRET2Record[0];
		}

		public WORLBAPIRET2RecordList(RLBAPIRET2RecordList rl) {
			rl=(RLBAPIRET2RecordList) rl.Duplicate();
			Array = new WORCBAPIRET2Record[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCBAPIRET2Record(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLBAPIRET2RecordList {
		public static implicit operator RLBAPIRET2RecordList(WORCBAPIRET2Record[] array) {
			RLBAPIRET2RecordList rl = new RLBAPIRET2RecordList();
			if (array != null) {
				foreach(WORCBAPIRET2Record val in array) {
					rl.Append((RCBAPIRET2Record) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCBAPIRET2Record[](RLBAPIRET2RecordList rl) {
			WORCBAPIRET2Record[] array = new WORCBAPIRET2Record[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCBAPIRET2Record) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLBAPIRET2RecordList {
		public static implicit operator RLBAPIRET2RecordList(WORLBAPIRET2RecordList w) {
			return w.Array;
		}
		public static implicit operator WORLBAPIRET2RecordList(RLBAPIRET2RecordList rl) {
			return new WORLBAPIRET2RecordList(rl);
		}
		public static implicit operator WORCBAPIRET2Record[](WORLBAPIRET2RecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLBAPIRET2RecordList(WORCBAPIRET2Record[] array) {
			return new WORLBAPIRET2RecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLBAPIRET2List {
		public WORCBAPIRET2Record[] Array;


		public WORLBAPIRET2List(WORCBAPIRET2Record[] r) {
			if (r == null)
			Array = new WORCBAPIRET2Record[0];
			else
			Array = r;
		}
		public WORLBAPIRET2List() {
			Array = new WORCBAPIRET2Record[0];
		}

		public WORLBAPIRET2List(RLBAPIRET2List rl) {
			rl=(RLBAPIRET2List) rl.Duplicate();
			Array = new WORCBAPIRET2Record[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLBAPIRET2List {
		public static implicit operator RLBAPIRET2List(WORCBAPIRET2Record[] array) {
			RLBAPIRET2List rl = new RLBAPIRET2List();
			if (array != null) {
				foreach(WORCBAPIRET2Record val in array) {
					rl.Append((STBAPIRET2Structure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCBAPIRET2Record[](RLBAPIRET2List rl) {
			WORCBAPIRET2Record[] array = new WORCBAPIRET2Record[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STBAPIRET2Structure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLBAPIRET2List {
		public static implicit operator RLBAPIRET2List(WORLBAPIRET2List w) {
			return w.Array;
		}
		public static implicit operator WORLBAPIRET2List(RLBAPIRET2List rl) {
			return new WORLBAPIRET2List(rl);
		}
		public static implicit operator WORCBAPIRET2Record[](WORLBAPIRET2List w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLBAPIRET2List(WORCBAPIRET2Record[] array) {
			return new WORLBAPIRET2List(array);
		}
	}
}


namespace ssTeste_SAP {
	using System;
	using System.Data;
	using System.Runtime.Serialization;
	using System.Reflection;
	using System.Xml;
	using OutSystems.ObjectKeys;
	using OutSystems.RuntimeCommon;
	using OutSystems.HubEdition.RuntimePlatform;
	using OutSystems.HubEdition.RuntimePlatform.Db;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Collections.Generic;
	using SAP.Middleware.Connector;
	using System.Text;
	using OutSystems.Plugin.SAP;
	public static partial class CcSAPConnectionPRD {
		public class StructureHelperBAPIRET2
		{
			public static STBAPIRET2Structure ToStructure(RfcDestination destination, IRfcDataContainer container, string containerName, string functionName, StringBuilder detailedTrace, string prefix, SapCallContext callContext)
			{
				IRfcStructure rfcStr = null;
				IRfcTable rfcTable = null;
				int index = 0;
				STBAPIRET2Structure str = new STBAPIRET2Structure(null);
				String structParamName = callContext.CurrentParameterName;
				callContext.CurrentParameterName = structParamName+ ".Type";
				str.ssType = container.GetString("TYPE");
				detailedTrace.AppendLine("'" + prefix + "TYPE' = '" +str.ssType+ "'");
				callContext.CurrentParameterName = structParamName+ ".Id";
				str.ssId = container.GetString("ID");
				detailedTrace.AppendLine("'" + prefix + "ID' = '" +str.ssId+ "'");
				callContext.CurrentParameterName = structParamName+ ".Number";
				str.ssNumber = container.GetString("NUMBER");
				detailedTrace.AppendLine("'" + prefix + "NUMBER' = '" +str.ssNumber+ "'");
				callContext.CurrentParameterName = structParamName+ ".Message";
				str.ssMessage = container.GetString("MESSAGE");
				detailedTrace.AppendLine("'" + prefix + "MESSAGE' = '" +str.ssMessage+ "'");
				callContext.CurrentParameterName = structParamName+ ".Log_No";
				str.ssLog_No = container.GetString("LOG_NO");
				detailedTrace.AppendLine("'" + prefix + "LOG_NO' = '" +str.ssLog_No+ "'");
				callContext.CurrentParameterName = structParamName+ ".Log_Msg_No";
				str.ssLog_Msg_No = container.GetString("LOG_MSG_NO");
				detailedTrace.AppendLine("'" + prefix + "LOG_MSG_NO' = '" +str.ssLog_Msg_No+ "'");
				callContext.CurrentParameterName = structParamName+ ".Message_V1";
				str.ssMessage_V1 = container.GetString("MESSAGE_V1");
				detailedTrace.AppendLine("'" + prefix + "MESSAGE_V1' = '" +str.ssMessage_V1+ "'");
				callContext.CurrentParameterName = structParamName+ ".Message_V2";
				str.ssMessage_V2 = container.GetString("MESSAGE_V2");
				detailedTrace.AppendLine("'" + prefix + "MESSAGE_V2' = '" +str.ssMessage_V2+ "'");
				callContext.CurrentParameterName = structParamName+ ".Message_V3";
				str.ssMessage_V3 = container.GetString("MESSAGE_V3");
				detailedTrace.AppendLine("'" + prefix + "MESSAGE_V3' = '" +str.ssMessage_V3+ "'");
				callContext.CurrentParameterName = structParamName+ ".Message_V4";
				str.ssMessage_V4 = container.GetString("MESSAGE_V4");
				detailedTrace.AppendLine("'" + prefix + "MESSAGE_V4' = '" +str.ssMessage_V4+ "'");
				callContext.CurrentParameterName = structParamName+ ".Parameter";
				str.ssParameter = container.GetString("PARAMETER");
				detailedTrace.AppendLine("'" + prefix + "PARAMETER' = '" +str.ssParameter+ "'");
				callContext.CurrentParameterName = structParamName+ ".Row";
				str.ssRow = container.GetInt("ROW");
				detailedTrace.AppendLine("'" + prefix + "ROW' = '" +str.ssRow+ "'");
				callContext.CurrentParameterName = structParamName+ ".Field";
				str.ssField = container.GetString("FIELD");
				detailedTrace.AppendLine("'" + prefix + "FIELD' = '" +str.ssField+ "'");
				callContext.CurrentParameterName = structParamName+ ".System";
				str.ssSystem = container.GetString("SYSTEM");
				detailedTrace.AppendLine("'" + prefix + "SYSTEM' = '" +str.ssSystem+ "'");
				callContext.CurrentParameterName = structParamName;
				return str;
			}

			public static void FromStructure(RfcDestination destination, IRfcDataContainer container, STBAPIRET2Structure str, string containerName, string functionName, StringBuilder detailedTrace, string prefix, SapCallContext callContext)
			{
				String structParamName = callContext.CurrentParameterName;
				callContext.CurrentParameterName = structParamName+ ".Type";
				if (!(str.ssType == "")) {
					detailedTrace.AppendLine("'" + prefix + "TYPE' = '" +str.ssType+ "'");
					container.SetValue("TYPE", str.ssType);
				}
				callContext.CurrentParameterName = structParamName+ ".Id";
				if (!(str.ssId == "")) {
					detailedTrace.AppendLine("'" + prefix + "ID' = '" +str.ssId+ "'");
					container.SetValue("ID", str.ssId);
				}
				callContext.CurrentParameterName = structParamName+ ".Number";
				if (!(str.ssNumber == "")) {
					detailedTrace.AppendLine("'" + prefix + "NUMBER' = '" +str.ssNumber+ "'");
					container.SetValue("NUMBER", str.ssNumber);
				}
				callContext.CurrentParameterName = structParamName+ ".Message";
				if (!(str.ssMessage == "")) {
					detailedTrace.AppendLine("'" + prefix + "MESSAGE' = '" +str.ssMessage+ "'");
					container.SetValue("MESSAGE", str.ssMessage);
				}
				callContext.CurrentParameterName = structParamName+ ".Log_No";
				if (!(str.ssLog_No == "")) {
					detailedTrace.AppendLine("'" + prefix + "LOG_NO' = '" +str.ssLog_No+ "'");
					container.SetValue("LOG_NO", str.ssLog_No);
				}
				callContext.CurrentParameterName = structParamName+ ".Log_Msg_No";
				if (!(str.ssLog_Msg_No == "")) {
					detailedTrace.AppendLine("'" + prefix + "LOG_MSG_NO' = '" +str.ssLog_Msg_No+ "'");
					container.SetValue("LOG_MSG_NO", str.ssLog_Msg_No);
				}
				callContext.CurrentParameterName = structParamName+ ".Message_V1";
				if (!(str.ssMessage_V1 == "")) {
					detailedTrace.AppendLine("'" + prefix + "MESSAGE_V1' = '" +str.ssMessage_V1+ "'");
					container.SetValue("MESSAGE_V1", str.ssMessage_V1);
				}
				callContext.CurrentParameterName = structParamName+ ".Message_V2";
				if (!(str.ssMessage_V2 == "")) {
					detailedTrace.AppendLine("'" + prefix + "MESSAGE_V2' = '" +str.ssMessage_V2+ "'");
					container.SetValue("MESSAGE_V2", str.ssMessage_V2);
				}
				callContext.CurrentParameterName = structParamName+ ".Message_V3";
				if (!(str.ssMessage_V3 == "")) {
					detailedTrace.AppendLine("'" + prefix + "MESSAGE_V3' = '" +str.ssMessage_V3+ "'");
					container.SetValue("MESSAGE_V3", str.ssMessage_V3);
				}
				callContext.CurrentParameterName = structParamName+ ".Message_V4";
				if (!(str.ssMessage_V4 == "")) {
					detailedTrace.AppendLine("'" + prefix + "MESSAGE_V4' = '" +str.ssMessage_V4+ "'");
					container.SetValue("MESSAGE_V4", str.ssMessage_V4);
				}
				callContext.CurrentParameterName = structParamName+ ".Parameter";
				if (!(str.ssParameter == "")) {
					detailedTrace.AppendLine("'" + prefix + "PARAMETER' = '" +str.ssParameter+ "'");
					container.SetValue("PARAMETER", str.ssParameter);
				}
				callContext.CurrentParameterName = structParamName+ ".Row";
				if (!(str.ssRow == 0)) {
					detailedTrace.AppendLine("'" + prefix + "ROW' = '" +str.ssRow+ "'");
					container.SetValue("ROW", str.ssRow);
				}
				callContext.CurrentParameterName = structParamName+ ".Field";
				if (!(str.ssField == "")) {
					detailedTrace.AppendLine("'" + prefix + "FIELD' = '" +str.ssField+ "'");
					container.SetValue("FIELD", str.ssField);
				}
				callContext.CurrentParameterName = structParamName+ ".System";
				if (!(str.ssSystem == "")) {
					detailedTrace.AppendLine("'" + prefix + "SYSTEM' = '" +str.ssSystem+ "'");
					container.SetValue("SYSTEM", str.ssSystem);
				}
				callContext.CurrentParameterName = structParamName;
			}
		}
	}
}
