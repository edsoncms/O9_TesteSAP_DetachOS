/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STCostcenterlistStructure</code> that represents the Service Studio structure
	///  <code>Costcenterlist</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STCostcenterlistStructure: ISerializable, ITypedRecord<STCostcenterlistStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdCo_Area = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*dd6iZ24btU+DbIEiBFRAhw");
		private static readonly GlobalObjectKey IdCostcenter = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*ddyQq+8s+EeQqdlyMNC18g");
		private static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*ewgZe_XMsUGNzmTnO8d_Nw");
		private static readonly GlobalObjectKey IdDescript = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*a4TEw4AZp0uHttq23OciFg");
		private static readonly GlobalObjectKey IdAct_State = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*VEvO48ZCwkWdFtv5hxCioQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Co_Area")]
		public string ssCo_Area;

		[System.Xml.Serialization.XmlElement("Costcenter")]
		public string ssCostcenter;

		[System.Xml.Serialization.XmlElement("Name")]
		public string ssName;

		[System.Xml.Serialization.XmlElement("Descript")]
		public string ssDescript;

		[System.Xml.Serialization.XmlElement("Act_State")]
		public string ssAct_State;


		public BitArray OptimizedAttributes;

		public STCostcenterlistStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssCo_Area = "";
			ssCostcenter = "";
			ssName = "";
			ssDescript = "";
			ssAct_State = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssCo_Area = r.ReadText(index++, "Costcenterlist.Co_Area", "");
			ssCostcenter = r.ReadText(index++, "Costcenterlist.Costcenter", "");
			ssName = r.ReadText(index++, "Costcenterlist.Name", "");
			ssDescript = r.ReadText(index++, "Costcenterlist.Descript", "");
			ssAct_State = r.ReadText(index++, "Costcenterlist.Act_State", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STCostcenterlistStructure r) {
			this = r;
		}


		public static bool operator == (STCostcenterlistStructure a, STCostcenterlistStructure b) {
			if (a.ssCo_Area != b.ssCo_Area) return false;
			if (a.ssCostcenter != b.ssCostcenter) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssDescript != b.ssDescript) return false;
			if (a.ssAct_State != b.ssAct_State) return false;
			return true;
		}

		public static bool operator != (STCostcenterlistStructure a, STCostcenterlistStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STCostcenterlistStructure)) return false;
			return (this == (STCostcenterlistStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssCo_Area.GetHashCode()
				^ ssCostcenter.GetHashCode()
				^ ssName.GetHashCode()
				^ ssDescript.GetHashCode()
				^ ssAct_State.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STCostcenterlistStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssCo_Area = "";
			ssCostcenter = "";
			ssName = "";
			ssDescript = "";
			ssAct_State = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssCo_Area", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCo_Area' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCo_Area = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCostcenter", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCostcenter' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCostcenter = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDescript", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDescript' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDescript = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAct_State", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAct_State' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAct_State = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STCostcenterlistStructure Duplicate() {
			STCostcenterlistStructure t;
			t.ssCo_Area = this.ssCo_Area;
			t.ssCostcenter = this.ssCostcenter;
			t.ssName = this.ssName;
			t.ssDescript = this.ssDescript;
			t.ssAct_State = this.ssAct_State;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Co_Area")) VarValue.AppendAttribute(recordElem, "Co_Area", ssCo_Area, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Co_Area");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Costcenter")) VarValue.AppendAttribute(recordElem, "Costcenter", ssCostcenter, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Costcenter");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Descript")) VarValue.AppendAttribute(recordElem, "Descript", ssDescript, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Descript");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Act_State")) VarValue.AppendAttribute(recordElem, "Act_State", ssAct_State, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Act_State");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "co_area") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Co_Area")) variable.Value = ssCo_Area; else variable.Optimized = true;
			} else if (head == "costcenter") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Costcenter")) variable.Value = ssCostcenter; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "descript") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Descript")) variable.Value = ssDescript; else variable.Optimized = true;
			} else if (head == "act_state") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Act_State")) variable.Value = ssAct_State; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCo_Area) {
				return ssCo_Area;
			} else if (key == IdCostcenter) {
				return ssCostcenter;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdDescript) {
				return ssDescript;
			} else if (key == IdAct_State) {
				return ssAct_State;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssCo_Area = (string) other.AttributeGet(IdCo_Area);
			ssCostcenter = (string) other.AttributeGet(IdCostcenter);
			ssName = (string) other.AttributeGet(IdName);
			ssDescript = (string) other.AttributeGet(IdDescript);
			ssAct_State = (string) other.AttributeGet(IdAct_State);
		}
	} // STCostcenterlistStructure
	/// <summary>
	/// Structure <code>RCCostcenterlistRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCCostcenterlistRecord: ISerializable, ITypedRecord<RCCostcenterlistRecord> {
		private static readonly GlobalObjectKey IdCostcenterlist = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*wAjepqr9jfHRBTse8QINqw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Costcenterlist")]
		public STCostcenterlistStructure ssSTCostcenterlist;


		public static implicit operator STCostcenterlistStructure(RCCostcenterlistRecord r) {
			return r.ssSTCostcenterlist;
		}

		public static implicit operator RCCostcenterlistRecord(STCostcenterlistStructure r) {
			RCCostcenterlistRecord res = new RCCostcenterlistRecord(null);
			res.ssSTCostcenterlist = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCCostcenterlistRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTCostcenterlist = new STCostcenterlistStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTCostcenterlist.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTCostcenterlist.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCCostcenterlistRecord r) {
			this = r;
		}


		public static bool operator == (RCCostcenterlistRecord a, RCCostcenterlistRecord b) {
			if (a.ssSTCostcenterlist != b.ssSTCostcenterlist) return false;
			return true;
		}

		public static bool operator != (RCCostcenterlistRecord a, RCCostcenterlistRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCCostcenterlistRecord)) return false;
			return (this == (RCCostcenterlistRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTCostcenterlist.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCCostcenterlistRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTCostcenterlist = new STCostcenterlistStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTCostcenterlist", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTCostcenterlist' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTCostcenterlist = (STCostcenterlistStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTCostcenterlist.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTCostcenterlist.InternalRecursiveSave();
		}


		public RCCostcenterlistRecord Duplicate() {
			RCCostcenterlistRecord t;
			t.ssSTCostcenterlist = (STCostcenterlistStructure) this.ssSTCostcenterlist.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTCostcenterlist.ToXml(this, recordElem, "Costcenterlist", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "costcenterlist") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Costcenterlist")) variable.Value = ssSTCostcenterlist; else variable.Optimized = true;
				variable.SetFieldName("costcenterlist");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdCostcenterlist) {
				return ssSTCostcenterlist;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTCostcenterlist.FillFromOther((IRecord) other.AttributeGet(IdCostcenterlist));
		}
	} // RCCostcenterlistRecord
	/// <summary>
	/// RecordList type <code>RLCostcenterlistRecordList</code> that represents a record list of
	///  <code>Costcenterlist</code>
	/// </summary>
	[Serializable()]
	public partial class RLCostcenterlistRecordList: GenericRecordList<RCCostcenterlistRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCCostcenterlistRecord GetElementDefaultValue() {
			return new RCCostcenterlistRecord("");
		}

		public T[] ToArray<T>(Func<RCCostcenterlistRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCostcenterlistRecordList recordlist, Func<RCCostcenterlistRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCostcenterlistRecordList ToList<T>(T[] array, Func <T, RCCostcenterlistRecord> converter) {
			RLCostcenterlistRecordList result = new RLCostcenterlistRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCostcenterlistRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCostcenterlistRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCostcenterlistRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCostcenterlistRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCCostcenterlistRecord> NewList() {
			return new RLCostcenterlistRecordList();
		}


	} // RLCostcenterlistRecordList
	/// <summary>
	/// RecordList type <code>RLCostcenterlistList</code> that represents a record list of <code>Text,
	///  Text, Text, Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLCostcenterlistList: GenericRecordList<STCostcenterlistStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STCostcenterlistStructure GetElementDefaultValue() {
			return new STCostcenterlistStructure("");
		}

		public T[] ToArray<T>(Func<STCostcenterlistStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLCostcenterlistList recordlist, Func<STCostcenterlistStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLCostcenterlistList ToList<T>(T[] array, Func <T, STCostcenterlistStructure> converter) {
			RLCostcenterlistList result = new RLCostcenterlistList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLCostcenterlistList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCostcenterlistList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLCostcenterlistList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLCostcenterlistList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STCostcenterlistStructure> NewList() {
			return new RLCostcenterlistList();
		}


	} // RLCostcenterlistList
}

namespace ssTeste_SAP {
	[XmlType("Costcenterlist")]
	public class WORCCostcenterlistRecord {
		[System.Xml.Serialization.XmlElement("Co_Area")]
		public string varWSCo_Area;

		[System.Xml.Serialization.XmlElement("Costcenter")]
		public string varWSCostcenter;

		[System.Xml.Serialization.XmlElement("Name")]
		public string varWSName;

		[System.Xml.Serialization.XmlElement("Descript")]
		public string varWSDescript;

		[System.Xml.Serialization.XmlElement("Act_State")]
		public string varWSAct_State;

		public WORCCostcenterlistRecord() {
			varWSCo_Area = (string) "";
			varWSCostcenter = (string) "";
			varWSName = (string) "";
			varWSDescript = (string) "";
			varWSAct_State = (string) "";
		}

		public WORCCostcenterlistRecord(STCostcenterlistStructure r) {
			varWSCo_Area = BaseAppUtils.RemoveControlChars(r.ssCo_Area);
			varWSCostcenter = BaseAppUtils.RemoveControlChars(r.ssCostcenter);
			varWSName = BaseAppUtils.RemoveControlChars(r.ssName);
			varWSDescript = BaseAppUtils.RemoveControlChars(r.ssDescript);
			varWSAct_State = BaseAppUtils.RemoveControlChars(r.ssAct_State);
		}

		public static RLCostcenterlistList ToRecordList(WORCCostcenterlistRecord[] array) {
			RLCostcenterlistList rl = new RLCostcenterlistList();
			if (array != null) {
				foreach(WORCCostcenterlistRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCCostcenterlistRecord[] FromRecordList(RLCostcenterlistList rl) {
			WORCCostcenterlistRecord[] array = new WORCCostcenterlistRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCCostcenterlistRecord {
		public static implicit operator WORCCostcenterlistRecord(RCCostcenterlistRecord r) {
			return new WORCCostcenterlistRecord(r.ssSTCostcenterlist);
		}

		public static implicit operator RCCostcenterlistRecord(WORCCostcenterlistRecord w) {
			RCCostcenterlistRecord r = new RCCostcenterlistRecord("");
			if (w != null) {
				r.ssSTCostcenterlist = w;
			}
			return r;
		}

	}

	partial struct STCostcenterlistStructure {
		public static implicit operator WORCCostcenterlistRecord(STCostcenterlistStructure r) {
			return new WORCCostcenterlistRecord(r);
		}

		public static implicit operator STCostcenterlistStructure(WORCCostcenterlistRecord w) {
			STCostcenterlistStructure r = new STCostcenterlistStructure("");
			if (w != null) {
				r.ssCo_Area = ((string) w.varWSCo_Area ?? "");
				r.ssCostcenter = ((string) w.varWSCostcenter ?? "");
				r.ssName = ((string) w.varWSName ?? "");
				r.ssDescript = ((string) w.varWSDescript ?? "");
				r.ssAct_State = ((string) w.varWSAct_State ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLCostcenterlistRecordList {
		public WORCCostcenterlistRecord[] Array;


		public WORLCostcenterlistRecordList(WORCCostcenterlistRecord[] r) {
			if (r == null)
			Array = new WORCCostcenterlistRecord[0];
			else
			Array = r;
		}
		public WORLCostcenterlistRecordList() {
			Array = new WORCCostcenterlistRecord[0];
		}

		public WORLCostcenterlistRecordList(RLCostcenterlistRecordList rl) {
			rl=(RLCostcenterlistRecordList) rl.Duplicate();
			Array = new WORCCostcenterlistRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCCostcenterlistRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLCostcenterlistRecordList {
		public static implicit operator RLCostcenterlistRecordList(WORCCostcenterlistRecord[] array) {
			RLCostcenterlistRecordList rl = new RLCostcenterlistRecordList();
			if (array != null) {
				foreach(WORCCostcenterlistRecord val in array) {
					rl.Append((RCCostcenterlistRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCostcenterlistRecord[](RLCostcenterlistRecordList rl) {
			WORCCostcenterlistRecord[] array = new WORCCostcenterlistRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCCostcenterlistRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLCostcenterlistRecordList {
		public static implicit operator RLCostcenterlistRecordList(WORLCostcenterlistRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLCostcenterlistRecordList(RLCostcenterlistRecordList rl) {
			return new WORLCostcenterlistRecordList(rl);
		}
		public static implicit operator WORCCostcenterlistRecord[](WORLCostcenterlistRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCostcenterlistRecordList(WORCCostcenterlistRecord[] array) {
			return new WORLCostcenterlistRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLCostcenterlistList {
		public WORCCostcenterlistRecord[] Array;


		public WORLCostcenterlistList(WORCCostcenterlistRecord[] r) {
			if (r == null)
			Array = new WORCCostcenterlistRecord[0];
			else
			Array = r;
		}
		public WORLCostcenterlistList() {
			Array = new WORCCostcenterlistRecord[0];
		}

		public WORLCostcenterlistList(RLCostcenterlistList rl) {
			rl=(RLCostcenterlistList) rl.Duplicate();
			Array = new WORCCostcenterlistRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLCostcenterlistList {
		public static implicit operator RLCostcenterlistList(WORCCostcenterlistRecord[] array) {
			RLCostcenterlistList rl = new RLCostcenterlistList();
			if (array != null) {
				foreach(WORCCostcenterlistRecord val in array) {
					rl.Append((STCostcenterlistStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCCostcenterlistRecord[](RLCostcenterlistList rl) {
			WORCCostcenterlistRecord[] array = new WORCCostcenterlistRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STCostcenterlistStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLCostcenterlistList {
		public static implicit operator RLCostcenterlistList(WORLCostcenterlistList w) {
			return w.Array;
		}
		public static implicit operator WORLCostcenterlistList(RLCostcenterlistList rl) {
			return new WORLCostcenterlistList(rl);
		}
		public static implicit operator WORCCostcenterlistRecord[](WORLCostcenterlistList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLCostcenterlistList(WORCCostcenterlistRecord[] array) {
			return new WORLCostcenterlistList(array);
		}
	}
}


namespace ssTeste_SAP {
	using System;
	using System.Data;
	using System.Runtime.Serialization;
	using System.Reflection;
	using System.Xml;
	using OutSystems.ObjectKeys;
	using OutSystems.RuntimeCommon;
	using OutSystems.HubEdition.RuntimePlatform;
	using OutSystems.HubEdition.RuntimePlatform.Db;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Collections.Generic;
	using SAP.Middleware.Connector;
	using System.Text;
	using OutSystems.Plugin.SAP;
	public static partial class CcSAPConnectionPRD {
		public class StructureHelperCostcenterlist
		{
			public static STCostcenterlistStructure ToStructure(RfcDestination destination, IRfcDataContainer container, string containerName, string functionName, StringBuilder detailedTrace, string prefix, SapCallContext callContext)
			{
				IRfcStructure rfcStr = null;
				IRfcTable rfcTable = null;
				int index = 0;
				STCostcenterlistStructure str = new STCostcenterlistStructure(null);
				String structParamName = callContext.CurrentParameterName;
				callContext.CurrentParameterName = structParamName+ ".Co_Area";
				str.ssCo_Area = container.GetString("CO_AREA");
				detailedTrace.AppendLine("'" + prefix + "CO_AREA' = '" +str.ssCo_Area+ "'");
				callContext.CurrentParameterName = structParamName+ ".Costcenter";
				str.ssCostcenter = container.GetString("COSTCENTER");
				detailedTrace.AppendLine("'" + prefix + "COSTCENTER' = '" +str.ssCostcenter+ "'");
				callContext.CurrentParameterName = structParamName+ ".Name";
				str.ssName = container.GetString("NAME");
				detailedTrace.AppendLine("'" + prefix + "NAME' = '" +str.ssName+ "'");
				callContext.CurrentParameterName = structParamName+ ".Descript";
				str.ssDescript = container.GetString("DESCRIPT");
				detailedTrace.AppendLine("'" + prefix + "DESCRIPT' = '" +str.ssDescript+ "'");
				callContext.CurrentParameterName = structParamName+ ".Act_State";
				str.ssAct_State = container.GetString("ACT_STATE");
				detailedTrace.AppendLine("'" + prefix + "ACT_STATE' = '" +str.ssAct_State+ "'");
				callContext.CurrentParameterName = structParamName;
				return str;
			}

			public static void FromStructure(RfcDestination destination, IRfcDataContainer container, STCostcenterlistStructure str, string containerName, string functionName, StringBuilder detailedTrace, string prefix, SapCallContext callContext)
			{
				String structParamName = callContext.CurrentParameterName;
				callContext.CurrentParameterName = structParamName+ ".Co_Area";
				if (!(str.ssCo_Area == "")) {
					detailedTrace.AppendLine("'" + prefix + "CO_AREA' = '" +str.ssCo_Area+ "'");
					container.SetValue("CO_AREA", str.ssCo_Area);
				}
				callContext.CurrentParameterName = structParamName+ ".Costcenter";
				if (!(str.ssCostcenter == "")) {
					detailedTrace.AppendLine("'" + prefix + "COSTCENTER' = '" +str.ssCostcenter+ "'");
					container.SetValue("COSTCENTER", str.ssCostcenter);
				}
				callContext.CurrentParameterName = structParamName+ ".Name";
				if (!(str.ssName == "")) {
					detailedTrace.AppendLine("'" + prefix + "NAME' = '" +str.ssName+ "'");
					container.SetValue("NAME", str.ssName);
				}
				callContext.CurrentParameterName = structParamName+ ".Descript";
				if (!(str.ssDescript == "")) {
					detailedTrace.AppendLine("'" + prefix + "DESCRIPT' = '" +str.ssDescript+ "'");
					container.SetValue("DESCRIPT", str.ssDescript);
				}
				callContext.CurrentParameterName = structParamName+ ".Act_State";
				if (!(str.ssAct_State == "")) {
					detailedTrace.AppendLine("'" + prefix + "ACT_STATE' = '" +str.ssAct_State+ "'");
					container.SetValue("ACT_STATE", str.ssAct_State);
				}
				callContext.CurrentParameterName = structParamName;
			}
		}
	}
}
