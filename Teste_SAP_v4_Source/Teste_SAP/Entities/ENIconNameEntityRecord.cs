/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssTeste_SAP {

	public sealed partial class ENIconNameEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceRichWidgets.ENIconNameEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceRichWidgets.ENIconNameEntity.eSpaceId;
	} // ENIconNameEntity

	/// <summary>
	/// Entity <code>ENIconNameEntityRecord</code> that represents the Service Studio entity
	///  <code>IconName</code> <p> Description: The list of icons you can use. For more information, pleas
	/// e refer to http://fontawesome.io/icons/</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("IconName", "YQRuVlDB9kmYnzpwJWAXxg", "sxSgg9oQRkKKlyKvezqjKg", 0, "IconName", "")]
	[Serializable()]
	public partial struct ENIconNameEntityRecord: ISerializable, ITypedRecord<ENIconNameEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdClass = GlobalObjectKey.Parse("sxSgg9oQRkKKlyKvezqjKg*rXd6SatCc0uk4oJ8umg5Fw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CLASS", 50, false, true, false, true)]
		[System.Xml.Serialization.XmlElement("Class")]
		private string _ssClass;
		public string ssClass {
			get {
				return _ssClass;
			}
			set {
				if ((_ssClass!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(1, true);
					_ssClass = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENIconNameEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(1, true);
			OptimizedAttributes = new BitArray(1, false);
			_ssClass = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssClass = r.ReadText(index++, "IconName.Class", "");
			ChangedAttributes = new BitArray(1, false);
			OptimizedAttributes = new BitArray(1, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENIconNameEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENIconNameEntityRecord a, ENIconNameEntityRecord b) {
			if (a.ssClass != b.ssClass) return false;
			return true;
		}

		public static bool operator != (ENIconNameEntityRecord a, ENIconNameEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENIconNameEntityRecord)) return false;
			return (this == (ENIconNameEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssClass.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENIconNameEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(1, true);
			OptimizedAttributes = new BitArray(1, false);
			_ssClass = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_ssClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssClass' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssClass = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENIconNameEntityRecord Duplicate() {
			ENIconNameEntityRecord t;
			t._ssClass = this._ssClass;
			t.ChangedAttributes = new BitArray(1);
			t.OptimizedAttributes = new BitArray(1);
			for (int i = 0; i < 1; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Class")) VarValue.AppendAttribute(recordElem, "Class", ssClass, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Class");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "class") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Class")) variable.Value = ssClass; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdClass)) {
				return ChangedAttributes[0];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdClass)) {
				return OptimizedAttributes[0];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdClass) {
				return ssClass;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(1);
			OptimizedAttributes = new BitArray(1);
			if (other == null) return;
			ssClass = (string) other.AttributeGet(IdClass);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdClass);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdClass);
		}
	} // ENIconNameEntityRecord
	/// <summary>
	/// Static Entity <code>ENIconNameEntity</code> gets the values for this static entity records in
	///  runtime <code>IconName</code>
	/// </summary>
	partial class ENIconNameEntity {


		static ENIconNameEntity() {
			ENIconNameEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENIconNameEntityRecord GetRecordById(string id) {
			return (ENIconNameEntityRecord) RsseSpaceRichWidgets.ENIconNameEntity.GetRecordById(id);
		}

		public static ENIconNameEntityRecord GetRecordByName(string name) {
			return (ENIconNameEntityRecord) RsseSpaceRichWidgets.ENIconNameEntity.GetRecordByName(name);
		}

		public static ENIconNameEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENIconNameEntityRecord) RsseSpaceRichWidgets.ENIconNameEntity.GetRecordByKey(key);
		}
	} // ENIconNameEntity;
	/// <summary>
	/// Structure <code>RCIconNameRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCIconNameRecord: ISerializable, ITypedRecord<RCIconNameRecord> {
		private static readonly GlobalObjectKey IdIconName = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*AWfT0bSela9HfzTIeb6lXQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("IconName")]
		public ENIconNameEntityRecord ssENIconName;


		public static implicit operator ENIconNameEntityRecord(RCIconNameRecord r) {
			return r.ssENIconName;
		}

		public static implicit operator RCIconNameRecord(ENIconNameEntityRecord r) {
			RCIconNameRecord res = new RCIconNameRecord(null);
			res.ssENIconName = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENIconName.ChangedAttributes = value;
			}
			get {
				return ssENIconName.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCIconNameRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENIconName = new ENIconNameEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(1, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENIconName.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENIconName.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENIconName.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENIconName.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCIconNameRecord r) {
			this = r;
		}


		public static bool operator == (RCIconNameRecord a, RCIconNameRecord b) {
			if (a.ssENIconName != b.ssENIconName) return false;
			return true;
		}

		public static bool operator != (RCIconNameRecord a, RCIconNameRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCIconNameRecord)) return false;
			return (this == (RCIconNameRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENIconName.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCIconNameRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENIconName = new ENIconNameEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENIconName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENIconName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENIconName = (ENIconNameEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENIconName.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENIconName.InternalRecursiveSave();
		}


		public RCIconNameRecord Duplicate() {
			RCIconNameRecord t;
			t.ssENIconName = (ENIconNameEntityRecord) this.ssENIconName.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENIconName.ToXml(this, recordElem, "IconName", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "iconname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IconName")) variable.Value = ssENIconName; else variable.Optimized = true;
				variable.SetFieldName("iconname");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENIconName.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENIconName.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdIconName) {
				return ssENIconName;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENIconName.FillFromOther((IRecord) other.AttributeGet(IdIconName));
		}
	} // RCIconNameRecord
	/// <summary>
	/// RecordList type <code>RLIconNameRecordList</code> that represents a record list of
	///  <code>IconName</code>
	/// </summary>
	[Serializable()]
	public partial class RLIconNameRecordList: GenericRecordList<RCIconNameRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCIconNameRecord GetElementDefaultValue() {
			return new RCIconNameRecord("");
		}

		public T[] ToArray<T>(Func<RCIconNameRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLIconNameRecordList recordlist, Func<RCIconNameRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLIconNameRecordList ToList<T>(T[] array, Func <T, RCIconNameRecord> converter) {
			RLIconNameRecordList result = new RLIconNameRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLIconNameRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIconNameRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIconNameRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLIconNameRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(1, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCIconNameRecord> NewList() {
			return new RLIconNameRecordList();
		}


	} // RLIconNameRecordList

	/// <summary>
	/// RecordList type <code>RLIconNameList</code> that represents a record list of <code>Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLIconNameList: GenericRecordList<ENIconNameEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENIconNameEntityRecord GetElementDefaultValue() {
			return new ENIconNameEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENIconNameEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLIconNameList recordlist, Func<ENIconNameEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLIconNameList ToList<T>(T[] array, Func <T, ENIconNameEntityRecord> converter) {
			RLIconNameList result = new RLIconNameList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLIconNameList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIconNameList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIconNameList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLIconNameList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENIconNameEntityRecord> NewList() {
			return new RLIconNameList();
		}


	} // RLIconNameList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetIconName
		/// </summary>

		public static void GetIconName(HeContext heContext, string inParamId, out RCIconNameRecord outParamRecord) {
			outParamRecord = new RCIconNameRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENIconNameEntity.eSpaceId;
				try {
					outParamRecord = ENIconNameEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [CLASS]" +
						 " FROM " + ENIconNameEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [CLASS] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetIconName", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENIconNameEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssTeste_SAP {
	[XmlType("IconName")]
	public class WORCIconNameRecord {
		[System.Xml.Serialization.XmlElement("Class")]
		public string varWSClass;

		public WORCIconNameRecord() {
			varWSClass = (string) "";
		}

		public WORCIconNameRecord(ENIconNameEntityRecord r) {
			varWSClass = BaseAppUtils.RemoveControlChars(r.ssClass);
		}

		public static RLIconNameList ToRecordList(WORCIconNameRecord[] array) {
			RLIconNameList rl = new RLIconNameList();
			if (array != null) {
				foreach(WORCIconNameRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCIconNameRecord[] FromRecordList(RLIconNameList rl) {
			WORCIconNameRecord[] array = new WORCIconNameRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCIconNameRecord {
		public static implicit operator WORCIconNameRecord(RCIconNameRecord r) {
			return new WORCIconNameRecord(r.ssENIconName);
		}

		public static implicit operator RCIconNameRecord(WORCIconNameRecord w) {
			RCIconNameRecord r = new RCIconNameRecord("");
			if (w != null) {
				r.ssENIconName = w;
			}
			return r;
		}

	}

	partial struct ENIconNameEntityRecord {
		public static implicit operator WORCIconNameRecord(ENIconNameEntityRecord r) {
			return new WORCIconNameRecord(r);
		}

		public static implicit operator ENIconNameEntityRecord(WORCIconNameRecord w) {
			ENIconNameEntityRecord r = new ENIconNameEntityRecord("");
			if (w != null) {
				r.ssClass = ((string) w.varWSClass ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLIconNameRecordList {
		public WORCIconNameRecord[] Array;


		public WORLIconNameRecordList(WORCIconNameRecord[] r) {
			if (r == null)
			Array = new WORCIconNameRecord[0];
			else
			Array = r;
		}
		public WORLIconNameRecordList() {
			Array = new WORCIconNameRecord[0];
		}

		public WORLIconNameRecordList(RLIconNameRecordList rl) {
			rl=(RLIconNameRecordList) rl.Duplicate();
			Array = new WORCIconNameRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCIconNameRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLIconNameRecordList {
		public static implicit operator RLIconNameRecordList(WORCIconNameRecord[] array) {
			RLIconNameRecordList rl = new RLIconNameRecordList();
			if (array != null) {
				foreach(WORCIconNameRecord val in array) {
					rl.Append((RCIconNameRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCIconNameRecord[](RLIconNameRecordList rl) {
			WORCIconNameRecord[] array = new WORCIconNameRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCIconNameRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLIconNameRecordList {
		public static implicit operator RLIconNameRecordList(WORLIconNameRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLIconNameRecordList(RLIconNameRecordList rl) {
			return new WORLIconNameRecordList(rl);
		}
		public static implicit operator WORCIconNameRecord[](WORLIconNameRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLIconNameRecordList(WORCIconNameRecord[] array) {
			return new WORLIconNameRecordList(array);
		}
	}
}

