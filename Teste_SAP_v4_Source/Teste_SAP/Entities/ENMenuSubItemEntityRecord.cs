/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssTeste_SAP {

	public sealed partial class ENMenuSubItemEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			switch (locale == null ? "":
					locale.ToLowerInvariant()) {
				default:

					int pos;
					if (!string.IsNullOrEmpty(locale) && ((pos = locale.IndexOf('-')) > 0))
					return ViewName(tenant, locale.Substring(0, pos)); // fallback
					else
					return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase(94), "MenuSubItem44");
				}
			}
		} // ENMenuSubItemEntity

		/// <summary>
		/// Entity <code>ENMenuSubItemEntityRecord</code> that represents the Service Studio entity
		///  <code>MenuSubItem</code> <p> Description: Records in this entity will be automatically created whe
		/// n dragging web screens to the Common\Menu web block. Their labels can later be changed.</p>
		/// </summary>
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("MenuSubItem", "_AlAd77Q40qB90+b+ar8kg", "N2UIQTt6+k6ug6JI4E9zoQ", 0, "MenuSubItem44", null)]
		[Serializable()]
		public partial struct ENMenuSubItemEntityRecord: ISerializable, ITypedRecord<ENMenuSubItemEntityRecord>, ISimpleRecord {
			private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*MwXuS_MKKUy2c4wBTUCivA");
			private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*QCHQ4zctj0SwAfYh6VESVA");
			private static readonly GlobalObjectKey IdCaption = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*_XjyTo8c8k+d2KI0zVNxww");
			private static readonly GlobalObjectKey IdMenuItemId = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*SlTN33Yy9EqR9MHDEJTHnQ");

			public static void EnsureInitialized() {}
			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
			[System.Xml.Serialization.XmlElement("Id")]
			private int _ssId;
			public int ssId {
				get {
					return _ssId;
				}
				set {
					if ((_ssId!=value) || OptimizedAttributes[0]) {
						ChangedAttributes = new BitArray(4, true);
						_ssId = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false, true)]
			[System.Xml.Serialization.XmlElement("Order")]
			private int _ssOrder;
			public int ssOrder {
				get {
					return _ssOrder;
				}
				set {
					if ((_ssOrder!=value) || OptimizedAttributes[1]) {
						ChangedAttributes[1] = true;
						_ssOrder = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CAPTION", 50, false, false, false, true)]
			[System.Xml.Serialization.XmlElement("Caption")]
			private string _ssCaption;
			public string ssCaption {
				get {
					return _ssCaption;
				}
				set {
					if ((_ssCaption!=value) || OptimizedAttributes[2]) {
						ChangedAttributes[2] = true;
						_ssCaption = value;
					}
				}
			}

			[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MENUITEMID", 0, false, false, true, false)]
			[System.Xml.Serialization.XmlElement("MenuItemId")]
			private int _ssMenuItemId;
			public int ssMenuItemId {
				get {
					return _ssMenuItemId;
				}
				set {
					if ((_ssMenuItemId!=value) || OptimizedAttributes[3]) {
						ChangedAttributes[3] = true;
						_ssMenuItemId = value;
					}
				}
			}


			public BitArray ChangedAttributes;

			public BitArray OptimizedAttributes;

			public ENMenuSubItemEntityRecord(params string[] dummy) {
				ChangedAttributes = new BitArray(4, true);
				OptimizedAttributes = new BitArray(4, false);
				_ssId = 0;
				_ssOrder = 0;
				_ssCaption = "";
				_ssMenuItemId = 0;
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[0];
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
					} else {
					}
				}
				get {
					BitArray[] all = new BitArray[0];
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssId = r.ReadInteger(index++, "MenuSubItem.Id", 0);
				ssOrder = r.ReadInteger(index++, "MenuSubItem.Order", 0);
				ssCaption = r.ReadText(index++, "MenuSubItem.Caption", "");
				ssMenuItemId = r.ReadEntityReference(index++, "MenuSubItem.MenuItemId", 0);
				ChangedAttributes = new BitArray(4, false);
				OptimizedAttributes = new BitArray(4, false);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(ENMenuSubItemEntityRecord r) {
				this = r;
			}


			public static bool operator == (ENMenuSubItemEntityRecord a, ENMenuSubItemEntityRecord b) {
				if (a.ssId != b.ssId) return false;
				if (a.ssOrder != b.ssOrder) return false;
				if (a.ssCaption != b.ssCaption) return false;
				if (a.ssMenuItemId != b.ssMenuItemId) return false;
				return true;
			}

			public static bool operator != (ENMenuSubItemEntityRecord a, ENMenuSubItemEntityRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(ENMenuSubItemEntityRecord)) return false;
				return (this == (ENMenuSubItemEntityRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssId.GetHashCode()
					^ ssOrder.GetHashCode()
					^ ssCaption.GetHashCode()
					^ ssMenuItemId.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public ENMenuSubItemEntityRecord(SerializationInfo info, StreamingContext context) {
				ChangedAttributes = new BitArray(4, true);
				OptimizedAttributes = new BitArray(4, false);
				_ssId = 0;
				_ssOrder = 0;
				_ssCaption = "";
				_ssMenuItemId = 0;
				Type objInfo = this.GetType();
				FieldInfo fieldInfo = null;
				fieldInfo = objInfo.GetField("_ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fieldInfo == null) {
					throw new Exception("The field named '_ssId' was not found.");
				}
				if (fieldInfo.FieldType.IsSerializable) {
					_ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
				}
				fieldInfo = objInfo.GetField("_ssOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fieldInfo == null) {
					throw new Exception("The field named '_ssOrder' was not found.");
				}
				if (fieldInfo.FieldType.IsSerializable) {
					_ssOrder = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
				}
				fieldInfo = objInfo.GetField("_ssCaption", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fieldInfo == null) {
					throw new Exception("The field named '_ssCaption' was not found.");
				}
				if (fieldInfo.FieldType.IsSerializable) {
					_ssCaption = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
				}
				fieldInfo = objInfo.GetField("_ssMenuItemId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fieldInfo == null) {
					throw new Exception("The field named '_ssMenuItemId' was not found.");
				}
				if (fieldInfo.FieldType.IsSerializable) {
					_ssMenuItemId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
				}
			}

			public void RecursiveReset() {
			}

			public void InternalRecursiveSave() {
			}


			public ENMenuSubItemEntityRecord Duplicate() {
				ENMenuSubItemEntityRecord t;
				t._ssId = this._ssId;
				t._ssOrder = this._ssOrder;
				t._ssCaption = this._ssCaption;
				t._ssMenuItemId = this._ssMenuItemId;
				t.ChangedAttributes = new BitArray(4);
				t.OptimizedAttributes = new BitArray(4);
				for (int i = 0; i < 4; i++) {
					t.ChangedAttributes[i] = ChangedAttributes[i];
					t.OptimizedAttributes[i] = OptimizedAttributes[i];
				}
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
					fieldName = fieldName.ToLowerInvariant();
				}
				if (detailLevel > 0) {
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".Caption")) VarValue.AppendAttribute(recordElem, "Caption", ssCaption, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Caption");
					if (!VarValue.FieldIsOptimized(parent, fieldName + ".MenuItemId")) VarValue.AppendAttribute(recordElem, "MenuItemId", ssMenuItemId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MenuItemId");
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "id") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
				} else if (head == "order") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
				} else if (head == "caption") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".Caption")) variable.Value = ssCaption; else variable.Optimized = true;
				} else if (head == "menuitemid") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".MenuItemId")) variable.Value = ssMenuItemId; else variable.Optimized = true;
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdId)) {
					return ChangedAttributes[0];
				} else if (key.Equals(IdOrder)) {
					return ChangedAttributes[1];
				} else if (key.Equals(IdCaption)) {
					return ChangedAttributes[2];
				} else if (key.Equals(IdMenuItemId)) {
					return ChangedAttributes[3];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				if (key.Equals(IdId)) {
					return OptimizedAttributes[0];
				} else if (key.Equals(IdOrder)) {
					return OptimizedAttributes[1];
				} else if (key.Equals(IdCaption)) {
					return OptimizedAttributes[2];
				} else if (key.Equals(IdMenuItemId)) {
					return OptimizedAttributes[3];
				} else {
					throw new Exception("Invalid key");
				}
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdId) {
					return ssId;
				} else if (key == IdOrder) {
					return ssOrder;
				} else if (key == IdCaption) {
					return ssCaption;
				} else if (key == IdMenuItemId) {
					return ssMenuItemId;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				ChangedAttributes = new BitArray(4);
				OptimizedAttributes = new BitArray(4);
				if (other == null) return;
				ssId = (int) other.AttributeGet(IdId);
				ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
				OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
				ssOrder = (int) other.AttributeGet(IdOrder);
				ChangedAttributes[1] = other.ChangedAttributeGet(IdOrder);
				OptimizedAttributes[1] = other.OptimizedAttributeGet(IdOrder);
				ssCaption = (string) other.AttributeGet(IdCaption);
				ChangedAttributes[2] = other.ChangedAttributeGet(IdCaption);
				OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCaption);
				ssMenuItemId = (int) other.AttributeGet(IdMenuItemId);
				ChangedAttributes[3] = other.ChangedAttributeGet(IdMenuItemId);
				OptimizedAttributes[3] = other.OptimizedAttributeGet(IdMenuItemId);
			}
		} // ENMenuSubItemEntityRecord
		partial class ENMenuSubItemEntity: StaticEntityRuntime {


			public class ENMenuSubItemEntityRecordMetadata: StaticEntityRuntime.StaticRecordMetadata {
				public virtual int DataId {
					get {
						return (int) _dataId;
					}
				}

				protected override object IdReader(IDataReader r) {
					Object column = r["Data_Id"];
					return (column != System.DBNull.Value ? Convert.ToInt32(column.ToString()): 0);
				}
			} // " + DeclStaticMetadataClass);


			private static ENMenuSubItemEntity instance = new ENMenuSubItemEntity(94, ObjectKey.Parse("_AlAd77Q40qB90+b+ar8kg"));

			public static ENMenuSubItemEntity GetInstance() {
				return instance;
			}

			private ENMenuSubItemEntity(int espaceId, ObjectKey entityKey): base(espaceId, entityKey) {
			}


			protected override StaticRecordMetadata newStaticRecord() {
				return new ENMenuSubItemEntityRecordMetadata();
			}

			private ENMenuSubItemEntityRecord GetRecord(ENMenuSubItemEntityRecordMetadata meta) {
				return GetRecord(meta.DataId);
			}

			private ENMenuSubItemEntityRecord GetRecord(int id) {
				string locale = BuiltInFunction.GetCurrentLocale();
				Object recordObj = RecordsById(locale)[id];
				if (recordObj != null) {
					return (ENMenuSubItemEntityRecord) recordObj;
				} else {
					using(Transaction tran = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {

						int pos = 0;
						ENMenuSubItemEntityRecord record = new ENMenuSubItemEntityRecord(null);

						string sql= "SELECT TOP (1) " +
						 " [ID]  o1" +
						 ", [ORDER]  o2" +
						 ", [CAPTION]  o3" +
						 ", [MENUITEMID]  o4" +
						 " FROM " + ENMenuSubItemEntity.LocalViewName(null, locale) + " " +
						 " WHERE [ID] = @DataId";


						Command cmd = tran.CreateCommand(sql);
						cmd.CreateParameter("@DataId", DbType.Int32, id);

						using(IDataReader reader = cmd.ExecuteReader()) {
							if (reader.Read()) {
								record.Read(reader, ref pos);
								RecordsById(locale)[id] = record;
							} else {
								throw new DataBaseException(ViewName(null, "") + " with key " + id + " was not found.");
							}
						}
						return record;
					}

				}
			}

			public static ENMenuSubItemEntityRecord GetRecordById(int id) {
				return instance.GetRecord(id);
			}

			public static ENMenuSubItemEntityRecord GetRecordByName(string name) {
				ENMenuSubItemEntityRecordMetadata meta = (ENMenuSubItemEntityRecordMetadata) instance.GetRecordMetadataByName(name);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record with Identifier " + name + " was not found.");
				}
				return instance.GetRecord(meta);
			}

			public static ENMenuSubItemEntityRecord GetRecordByKey(ObjectKey key) {
				ENMenuSubItemEntityRecordMetadata meta = (ENMenuSubItemEntityRecordMetadata) instance.GetRecordMetadataByKey(key);
				if (meta == null || !meta.Valid) {
					throw new DataBaseException(ViewName(null, "") + ", record metadata '" + ObjectKeyUtils.DatabaseValue(key) + "' was " + (meta == null ? "not found": "invalid") + ".");
				}
				return instance.GetRecord(meta);
			}

		} // ENMenuSubItemEntity;

		/// <summary>
		/// Structure <code>RCMenuSubItemRecord</code>
		/// </summary>
		[Serializable()]
		public partial struct RCMenuSubItemRecord: ISerializable, ITypedRecord<RCMenuSubItemRecord> {
			private static readonly GlobalObjectKey IdMenuSubItem = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6STE3A3iPUS_lPdKP78b_g");

			public static void EnsureInitialized() {}
			[System.Xml.Serialization.XmlElement("MenuSubItem")]
			public ENMenuSubItemEntityRecord ssENMenuSubItem;


			public static implicit operator ENMenuSubItemEntityRecord(RCMenuSubItemRecord r) {
				return r.ssENMenuSubItem;
			}

			public static implicit operator RCMenuSubItemRecord(ENMenuSubItemEntityRecord r) {
				RCMenuSubItemRecord res = new RCMenuSubItemRecord(null);
				res.ssENMenuSubItem = r;
				return res;
			}

			public BitArray ChangedAttributes {
				set {
					ssENMenuSubItem.ChangedAttributes = value;
				}
				get {
					return ssENMenuSubItem.ChangedAttributes;
				}
			}
			public BitArray OptimizedAttributes;

			public RCMenuSubItemRecord(params string[] dummy) {
				OptimizedAttributes = null;
				ssENMenuSubItem = new ENMenuSubItemEntityRecord(null);
			}

			public BitArray[] GetDefaultOptimizedValues() {
				BitArray[] all = new BitArray[1];
				all[0] = new BitArray(4, false);
				return all;
			}

			public BitArray[] AllOptimizedAttributes {
				set {
					if (value == null) {
						ssENMenuSubItem.OptimizedAttributes = GetDefaultOptimizedValues()[0];
					} else {
						ssENMenuSubItem.OptimizedAttributes = value[0];
					}
				}
				get {
					BitArray[] all = new BitArray[1];
					all[0] = ssENMenuSubItem.OptimizedAttributes;
					return all;
				}
			}

			/// <summary>
			/// Read a record from database
			/// </summary>
			/// <param name="r"> Data base reader</param>
			/// <param name="index"> index</param>
			public void Read(IDataReader r, ref int index) {
				ssENMenuSubItem.Read(r, ref index);
			}
			/// <summary>
			/// Read from database
			/// </summary>
			/// <param name="r"> Data reader</param>
			public void ReadDB(IDataReader r) {
				int index = 0;
				Read(r, ref index);
			}

			/// <summary>
			/// Read from record
			/// </summary>
			/// <param name="r"> Record</param>
			public void ReadIM(RCMenuSubItemRecord r) {
				this = r;
			}


			public static bool operator == (RCMenuSubItemRecord a, RCMenuSubItemRecord b) {
				if (a.ssENMenuSubItem != b.ssENMenuSubItem) return false;
				return true;
			}

			public static bool operator != (RCMenuSubItemRecord a, RCMenuSubItemRecord b) {
				return !(a==b);
			}

			public override bool Equals(object o) {
				if (o.GetType() != typeof(RCMenuSubItemRecord)) return false;
				return (this == (RCMenuSubItemRecord) o);
			}

			public override int GetHashCode() {
				try {
					return base.GetHashCode()
					^ ssENMenuSubItem.GetHashCode()
					;
				} catch {
					return base.GetHashCode();
				}
			}

			public void GetObjectData(SerializationInfo info, StreamingContext context) {
				Type objInfo = this.GetType();
				FieldInfo[] fields;
				fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				for (int i = 0; i < fields.Length; i++)
				if (fields[i] .FieldType.IsSerializable)
				info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
			}

			public RCMenuSubItemRecord(SerializationInfo info, StreamingContext context) {
				OptimizedAttributes = null;
				ssENMenuSubItem = new ENMenuSubItemEntityRecord(null);
				Type objInfo = this.GetType();
				FieldInfo fieldInfo = null;
				fieldInfo = objInfo.GetField("ssENMenuSubItem", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
				if (fieldInfo == null) {
					throw new Exception("The field named 'ssENMenuSubItem' was not found.");
				}
				if (fieldInfo.FieldType.IsSerializable) {
					ssENMenuSubItem = (ENMenuSubItemEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
				}
			}

			public void RecursiveReset() {
				ssENMenuSubItem.RecursiveReset();
			}

			public void InternalRecursiveSave() {
				ssENMenuSubItem.InternalRecursiveSave();
			}


			public RCMenuSubItemRecord Duplicate() {
				RCMenuSubItemRecord t;
				t.ssENMenuSubItem = (ENMenuSubItemEntityRecord) this.ssENMenuSubItem.Duplicate();
				t.OptimizedAttributes = null;
				return t;
			}

			IRecord IRecord.Duplicate() {
				return Duplicate();
			}

			public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
				System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
				if (fieldName != null) {
					VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				}
				if (detailLevel > 0) {
					ssENMenuSubItem.ToXml(this, recordElem, "MenuSubItem", detailLevel - 1);
				} else {
					VarValue.AppendDeferredEvaluationElement(recordElem);
				}
			}

			public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
				String head = VarValue.GetHead(fields);
				String tail = VarValue.GetTail(fields);
				variable.Found = false;
				if (head == "menusubitem") {
					if (!VarValue.FieldIsOptimized(parent, baseName + ".MenuSubItem")) variable.Value = ssENMenuSubItem; else variable.Optimized = true;
					variable.SetFieldName("menusubitem");
				}
				if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
			}

			public bool ChangedAttributeGet(GlobalObjectKey key) {
				return ssENMenuSubItem.ChangedAttributeGet(key);
			}

			public bool OptimizedAttributeGet(GlobalObjectKey key) {
				return ssENMenuSubItem.OptimizedAttributeGet(key);
			}

			public object AttributeGet(GlobalObjectKey key) {
				if (key == IdMenuSubItem) {
					return ssENMenuSubItem;
				} else {
					throw new Exception("Invalid key");
				}
			}
			public void FillFromOther(IRecord other) {
				if (other == null) return;
				ssENMenuSubItem.FillFromOther((IRecord) other.AttributeGet(IdMenuSubItem));
			}
		} // RCMenuSubItemRecord
		/// <summary>
		/// RecordList type <code>RLMenuSubItemRecordList</code> that represents a record list of
		///  <code>MenuSubItem</code>
		/// </summary>
		[Serializable()]
		public partial class RLMenuSubItemRecordList: GenericRecordList<RCMenuSubItemRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override RCMenuSubItemRecord GetElementDefaultValue() {
				return new RCMenuSubItemRecord("");
			}

			public T[] ToArray<T>(Func<RCMenuSubItemRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLMenuSubItemRecordList recordlist, Func<RCMenuSubItemRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLMenuSubItemRecordList ToList<T>(T[] array, Func <T, RCMenuSubItemRecord> converter) {
				RLMenuSubItemRecordList result = new RLMenuSubItemRecordList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLMenuSubItemRecordList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLMenuSubItemRecordList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLMenuSubItemRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLMenuSubItemRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[1];
				def[0] = new BitArray(4, false);
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<RCMenuSubItemRecord> NewList() {
				return new RLMenuSubItemRecordList();
			}


		} // RLMenuSubItemRecordList

		/// <summary>
		/// RecordList type <code>RLMenuSubItemList</code> that represents a record list of
		///  <code>MenuItemIdentifier, Text, Integer, Integer</code>
		/// </summary>
		[Serializable()]
		public partial class RLMenuSubItemList: GenericRecordList<ENMenuSubItemEntityRecord>, IEnumerable, IEnumerator, ISerializable {
			public static void EnsureInitialized() {}

			protected override ENMenuSubItemEntityRecord GetElementDefaultValue() {
				return new ENMenuSubItemEntityRecord("");
			}

			public T[] ToArray<T>(Func<ENMenuSubItemEntityRecord, T> converter) {
				return ToArray(this, converter);
			}

			public static T[] ToArray<T>(RLMenuSubItemList recordlist, Func<ENMenuSubItemEntityRecord, T> converter) {
				T[] result = new T[recordlist.Length];
				recordlist.StartIteration();
				while (!recordlist.Eof) {
					result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
					recordlist.Advance();
				}
				recordlist.EndIteration();
				return result;
			}

			public static RLMenuSubItemList ToList<T>(T[] array, Func <T, ENMenuSubItemEntityRecord> converter) {
				RLMenuSubItemList result = new RLMenuSubItemList();
				if (array != null) {
					foreach(T item in array) {
						result.Append(converter(item));
					}
				}
				return result;
			}
			/// <summary>
			/// Default Constructor
			/// </summary>
			public RLMenuSubItemList(): base() {
			}

			/// <summary>
			/// Constructor with transaction parameter
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLMenuSubItemList(IDbTransaction trans): base(trans) {
			}

			/// <summary>
			/// Constructor with transaction parameter and alternate read method
			/// </summary>
			/// <param name="trans"> IDbTransaction Parameter</param>
			/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
			[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
			public RLMenuSubItemList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
				this.alternateReadDBMethod = alternateReadDBMethod;
			}

			/// <summary>
			/// Constructor declaration for serialization
			/// </summary>
			/// <param name="info"> SerializationInfo</param>
			/// <param name="context"> StreamingContext</param>
			public RLMenuSubItemList(SerializationInfo info, StreamingContext context): base(info, context) {
			}

			public override BitArray[] GetDefaultOptimizedValues() {
				BitArray[] def = new BitArray[0];
				return def;
			}
			/// <summary>
			/// Create as new list
			/// </summary>
			/// <returns>The new record list</returns>
			protected override OSList<ENMenuSubItemEntityRecord> NewList() {
				return new RLMenuSubItemList();
			}


		} // RLMenuSubItemList
		public partial class ExtendedActions {
			/// <summary>
			/// Action: GetMenuSubItem
			/// </summary>

			public static void GetMenuSubItem(HeContext heContext, int inParamId, out RCMenuSubItemRecord outParamRecord) {
				outParamRecord = new RCMenuSubItemRecord(null);

				try {
					outParamRecord = ENMenuSubItemEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [ORDER]" +
						 ", [CAPTION]" +
						 ", [MENUITEMID]" +
						 " FROM " + ENMenuSubItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetMenuSubItem", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENMenuSubItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			}

		}
	}

	namespace ssTeste_SAP {
		[XmlType("MenuSubItem")]
		public class WORCMenuSubItemRecord {
			[System.Xml.Serialization.XmlElement("Id")]
			public int varWSId;

			[System.Xml.Serialization.XmlElement("Order")]
			public int varWSOrder;

			[System.Xml.Serialization.XmlElement("Caption")]
			public string varWSCaption;

			[System.Xml.Serialization.XmlElement("MenuItemId")]
			public int varWSMenuItemId;

			public WORCMenuSubItemRecord() {
				varWSId = (int) 0;
				varWSOrder = (int) 0;
				varWSCaption = (string) "";
				varWSMenuItemId = (int) 0;
			}

			public WORCMenuSubItemRecord(ENMenuSubItemEntityRecord r) {
				varWSId = (int) r.ssId;
				varWSOrder = (int) r.ssOrder;
				varWSCaption = BaseAppUtils.RemoveControlChars(r.ssCaption);
				varWSMenuItemId = (int) r.ssMenuItemId;
			}

			public static RLMenuSubItemList ToRecordList(WORCMenuSubItemRecord[] array) {
				RLMenuSubItemList rl = new RLMenuSubItemList();
				if (array != null) {
					foreach(WORCMenuSubItemRecord val in array) {
						rl.Append(val);
					}
				}
				return rl;
			}

			public static WORCMenuSubItemRecord[] FromRecordList(RLMenuSubItemList rl) {
				WORCMenuSubItemRecord[] array = new WORCMenuSubItemRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssTeste_SAP {
		partial struct RCMenuSubItemRecord {
			public static implicit operator WORCMenuSubItemRecord(RCMenuSubItemRecord r) {
				return new WORCMenuSubItemRecord(r.ssENMenuSubItem);
			}

			public static implicit operator RCMenuSubItemRecord(WORCMenuSubItemRecord w) {
				RCMenuSubItemRecord r = new RCMenuSubItemRecord("");
				if (w != null) {
					r.ssENMenuSubItem = w;
				}
				return r;
			}

		}

		partial struct ENMenuSubItemEntityRecord {
			public static implicit operator WORCMenuSubItemRecord(ENMenuSubItemEntityRecord r) {
				return new WORCMenuSubItemRecord(r);
			}

			public static implicit operator ENMenuSubItemEntityRecord(WORCMenuSubItemRecord w) {
				ENMenuSubItemEntityRecord r = new ENMenuSubItemEntityRecord("");
				if (w != null) {
					r.ssId = (int) w.varWSId;
					r.ssOrder = (int) w.varWSOrder;
					r.ssCaption = ((string) w.varWSCaption ?? "");
					r.ssMenuItemId = (int) w.varWSMenuItemId;
				}
				return r;
			}

		}
	}


	namespace ssTeste_SAP {
		[Serializable()]
		public partial class WORLMenuSubItemRecordList {
			public WORCMenuSubItemRecord[] Array;


			public WORLMenuSubItemRecordList(WORCMenuSubItemRecord[] r) {
				if (r == null)
				Array = new WORCMenuSubItemRecord[0];
				else
				Array = r;
			}
			public WORLMenuSubItemRecordList() {
				Array = new WORCMenuSubItemRecord[0];
			}

			public WORLMenuSubItemRecordList(RLMenuSubItemRecordList rl) {
				rl=(RLMenuSubItemRecordList) rl.Duplicate();
				Array = new WORCMenuSubItemRecord[rl.Length];
				while (!rl.Eof) {
					Array[rl.CurrentRowNumber] = new WORCMenuSubItemRecord(rl.CurrentRec);
					rl.Advance();
				}
			}

		}
	}

	namespace ssTeste_SAP {
		partial class RLMenuSubItemRecordList {
			public static implicit operator RLMenuSubItemRecordList(WORCMenuSubItemRecord[] array) {
				RLMenuSubItemRecordList rl = new RLMenuSubItemRecordList();
				if (array != null) {
					foreach(WORCMenuSubItemRecord val in array) {
						rl.Append((RCMenuSubItemRecord) val);
					}
				}
				return rl;
			}
			public static implicit operator WORCMenuSubItemRecord[](RLMenuSubItemRecordList rl) {
				WORCMenuSubItemRecord[] array = new WORCMenuSubItemRecord[rl == null ? 0: rl.Length];
				for (int i = 0; i < array.Length; i++) {
					array[i] = (RCMenuSubItemRecord) rl.Data[i];
				}
				return array;
			}
		}
	}

	namespace ssTeste_SAP {
		partial class WORLMenuSubItemRecordList {
			public static implicit operator RLMenuSubItemRecordList(WORLMenuSubItemRecordList w) {
				return w.Array;
			}
			public static implicit operator WORLMenuSubItemRecordList(RLMenuSubItemRecordList rl) {
				return new WORLMenuSubItemRecordList(rl);
			}
			public static implicit operator WORCMenuSubItemRecord[](WORLMenuSubItemRecordList w) {
				if (w != null) {
					return w.Array;
				}
				return null;
			}
			public static implicit operator WORLMenuSubItemRecordList(WORCMenuSubItemRecord[] array) {
				return new WORLMenuSubItemRecordList(array);
			}
		}
	}

