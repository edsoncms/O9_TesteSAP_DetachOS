/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssTeste_SAP.Flows.FlowCommon {

	public class ScrnLogin: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnLogin(): base(Teste_SAP_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcPassword</code> that represents the Service Studio local variable
		///  <code>Password</code> <p>Description: </p>
		/// </summary>
		string varLcPassword = "";

		/// <summary>
		/// Variable <code>varLcUserName</code> that represents the Service Studio local variable
		///  <code>UserName</code> <p>Description: </p>
		/// </summary>
		string varLcUserName = "";

		/// <summary>
		/// Variable <code>varLcRememberLogin</code> that represents the Service Studio local variable
		///  <code>RememberLogin</code> <p>Description: </p>
		/// </summary>
		bool varLcRememberLogin = true;

		/// <summary>
		/// Variable <code>varLcUser</code> that represents the Service Studio local variable <code>User</code>
		///  <p>Description: </p>
		/// </summary>
		RCUserRecord varLcUser = new RCUserRecord(null);

		/// <summary>
		/// Variable RichWidgets_wt_WebBlockInstance35
		/// </summary>
		protected proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London RichWidgets_wt_WebBlockInstance35;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container38;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCUserRecord ssEditRecord1Record = new RCUserRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtEditRecord1_Valid() {
			bool res = true;
			return res;
		}


		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtUserNameInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtUserNameInputValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtPasswordInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtPasswordInputValidatorType;
		/// <summary>
		/// Variable "True" if the Widget wt_If37
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If37T;

		/// <summary>
		/// Variable "True" if the Widget wt_If37
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If37F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container6;
		/// <summary>
		/// Variable (wtLoginButton) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wtLoginButton;


		List<object> explicitChangedVariables = new List<object>();

		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London.GetCss(writer, inline, visited);
			ssTeste_SAP.Flows.FlowCommon.WBlkHeader.GetCss(writer, inline, visited);
			ssTeste_SAP.Flows.FlowCommon.WBlkFooter.GetCss(writer, inline, visited);
			proxy_Teste_SAP_RichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("w6uCOokgH0mMnYac8X7WSw", "Login");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/Teste_SAP/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "w6uCOokgH0mMnYac8X7WSw", "Login");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "w6uCOokgH0mMnYac8X7WSw", "Login");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "w6uCOokgH0mMnYac8X7WSw", "Login");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "w6uCOokgH0mMnYac8X7WSw", "Login");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnLogin() {
			htTabIndexGroups["wt_Text10"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Text7"] = "wtEditRecord1-1";
			htTabIndexGroups["wtUserNameInput"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Text34"] = "wtEditRecord1-1";
			htTabIndexGroups["wtPasswordInput"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_If37"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_IfBranch23"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_InlineExpression27"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_IfBranch8"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Container2"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_CheckBox17"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Text26"] = "wtEditRecord1-1";
			htTabIndexGroups["wt_Container6"] = "wtEditRecord1-1";
			htTabIndexGroups["wtLoginButton"] = "wtEditRecord1-1";
		}


		RLUserRecordList queryResCheckAdmin_outParamList = new RLUserRecordList();
		long queryResCheckAdmin_outParamCount = 0L;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; perfTracer.RegisterAction("3a82abc3-2089-491f-8c9d-869cf17ed64b.#Preparation", "Preparation");
			if ((((int) Global.App.OsContext.Session["UserID"]) !=BuiltInFunction.NullIdentifier())) {
				// Destination = ExternalURL

				if (OSPage.IsAjaxRequest) {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = AppUtils.Instance.getImagePath();
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = AppUtils.Instance.getImagePath();
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				} else {
					// go to target page
					{

						((OSPage) Page).ClearErrorHandler();
						if (OSPage.IsAjaxRequest) {
							string sURL = AppUtils.Instance.getImagePath();
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
						} else {
							string sURL = AppUtils.Instance.getImagePath();
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
						}
						return;

					}
				}

			} else {
				// Query datasetCheckAdmin
				int datasetCheckAdmin_maxRecords = 0;
				queryResCheckAdmin_outParamList = FuncssPreparation.datasetCheckAdmin(heContext, datasetCheckAdmin_maxRecords, IterationMultiplicity.Never, out queryResCheckAdmin_outParamCount, Functions.rssextensionplatformpasswordutils_ActionGenerateSaltedMD5Hash(heContext, "admin")
				);

			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return "Login.css"; 
			}
		}

		protected override string OwnCssFile {
			get {
				return "Login.css"; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssUrl {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssFile {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return "Theme.Teste_SAP.css"; 
			}
		}

		protected override string ThemeCssCacheInvalidationSuffix {
			get {
				return AppUtils.Instance.CacheInvalidationSuffix; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "Theme.Teste_SAP.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssCacheInvalidationSuffix {
			get {
				return RsseSpaceRichWidgets.CacheInvalidationSuffix; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsHttps(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Login", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Login", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			RichWidgets_wt_WebBlockInstance35 = (proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London) FindControl("RichWidgets_wt_WebBlockInstance35");
			wt_Container38 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container38");
			wt_Container2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container2");
			wt_Container6 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container6");
			wtLoginButton = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wtLoginButton");
			if (this.wtLoginButton != null) {
				this.wtLoginButton.Click += new System.EventHandler(this.wtLoginButton_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance31") {
				return RichWidgets_wt_WebBlockInstance35.wtHeader.FindControl("wt_WebBlockInstance31");
			}
			if (id == "wt_Container38") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_Container38");
			}
			if (id == "wtEditRecord1") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wtEditRecord1");
			}
			if (id == "wt_EditRecordRow20") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordRow20");
			}
			if (id == "wt_EditRecordCell5") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordCell5");
			}
			if (id == "wt_EditRecordCell11") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordCell11");
			}
			if (id == "wt_Text10") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_Text10");
			}
			if (id == "wt_EditRecordRow32") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordRow32");
			}
			if (id == "wt_EditRecordCell14") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordCell14");
			}
			if (id == "wt_Text7") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_Text7");
			}
			if (id == "wt_EditRecordCell36") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordCell36");
			}
			if (id == "wtUserNameInput") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wtUserNameInput");
			}
			if (id == "wt_EditRecordRow29") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordRow29");
			}
			if (id == "wt_EditRecordCell9") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordCell9");
			}
			if (id == "wt_Text34") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_Text34");
			}
			if (id == "wt_EditRecordCell19") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordCell19");
			}
			if (id == "wtPasswordInput") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wtPasswordInput");
			}
			if (id == "wt_EditRecordRow28") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordRow28");
			}
			if (id == "wt_EditRecordCell16") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordCell16");
			}
			if (id == "wt_EditRecordCell21") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_EditRecordCell21");
			}
			if (id == "wt_If37") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_If37");
			}
			if (id == "wt_If37T") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_If37T");
			}
			if (id == "wt_InlineExpression27") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_InlineExpression27");
			}
			if (id == "wt_If37F") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_If37F");
			}
			if (id == "wt_Container2") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_Container2");
			}
			if (id == "wt_CheckBox17") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_CheckBox17");
			}
			if (id == "wt_Text26") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_Text26");
			}
			if (id == "wt_Container6") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wt_Container6");
			}
			if (id == "wtLoginButton") {
				return RichWidgets_wt_WebBlockInstance35.wtMainContent.FindControl("wtLoginButton");
			}
			if (id == "wt_WebBlockInstance22") {
				return RichWidgets_wt_WebBlockInstance35.wtFooter.FindControl("wt_WebBlockInstance22");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;

			// No session SessionFixationValidation because screen is accessible by anonymous users or uses a readonly session.

			if (appInfo != null) {
				heContext = appInfo.OsContext; heContext.RequestTracer.MainEventType = RequestTracerEventType.WebScreenServerExecuted; heContext.RequestTracer.RegisterEndpoint("3a82abc3-2089-491f-8c9d-869cf17ed64b", "Login"); 
			}
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["Teste_SAP._ScreenParameters_Login"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["Teste_SAP._ScreenParameters_Login"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (appInfo.IsForcingSecurityForScreens(Global.eSpaceId) && !RuntimePlatformUtils.RequestIsSecure(Request)) {
				string redirectUrl = "https" + Request.Url.ToString().Substring(4);
				Response.Redirect(redirectUrl);
				HttpContext.Current.ApplicationInstance.CompleteRequest();
			}
			if (!IsPostBack) {
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtEditRecord1_onDataBindingDataSource(this.FindControl("wtEditRecord1"), null);
				}
				Title = "Login"; Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Login", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (heContext.AppInfo.IsForcingSecurityForScreens(Global.eSpaceId) && !RuntimePlatformUtils.RequestIsSecure(Request)) {
					string redirectUrl = "https" + Request.Url.ToString().Substring(4);
					Response.Redirect(redirectUrl);
					HttpContext.Current.ApplicationInstance.CompleteRequest();
				}
				FetchViewState();
			}

		}
		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");

			NegotiateTabIndexes();

			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wtLoginButton = wtLoginButton ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wtLoginButton");
			} catch {}
			string jsString = (wtLoginButton != null) ? "return OsEnterKey('" +wtLoginButton.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short settedTabIndex = 0;
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, Convert.ToInt16(htTabIndexGroupsTI[groupid]), out settedTabIndex);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, tabindex, out settedTabIndex);
							// Increase tabindex if it was not overiden
							if (tabindex == settedTabIndex) {
								tabindex++;
							}
						}
					}
					tabindex = Math.Max(tabindex, ++settedTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssTeste_SAP.Flows.FlowCommon.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			return;
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("w6uCOokgH0mMnYac8X7WSw"); 
			}
		}

		public bool isSecure {
			get {
				return Global.App.IsForcingSecurityForScreens(Global.eSpaceId);
			}
		}


		/// <summary>
		/// Action <code>CommandLogin</code> that represents the Service Studio screen action
		///  <code>Login</code> <p> Description: </p>
		/// </summary>
		private bool CommandLogin(HeContext heContext) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("0a603bd6-ea7b-4877-861a-eec6e7e3c559", "Login"); 
			}
			try {
				// Not Pass or Not UserName?
				if (((!((IWidgetRuntimeProperties) this.FindControl("wtPasswordInput")).Valid) || (!((IWidgetRuntimeProperties) this.FindControl("wtUserNameInput")).Valid))) {
					// Update Screen
					return true;

				} else {
					// User_Login
					Actions.ActionUser_Login(heContext, varLcUserName, varLcPassword, varLcRememberLogin);
					// Destination = ExternalURL

					if (OSPage.IsAjaxRequest) {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							string sURL = (((((string) Global.App.OsContext.Session["Teste_SAP.LoginRedirectURL"]) == "")) ?(AppUtils.Instance.getImagePath()):(((string) Global.App.OsContext.Session["Teste_SAP.LoginRedirectURL"])));
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							((OSPageViewState) Page).RedirectLocation = sURL;
							return false;

						}
					} else {
						// go to target page
						{

							((OSPage) Page).ClearErrorHandler();
							string sURL = (((((string) Global.App.OsContext.Session["Teste_SAP.LoginRedirectURL"]) == "")) ?(AppUtils.Instance.getImagePath()):(((string) Global.App.OsContext.Session["Teste_SAP.LoginRedirectURL"])));
							sURL = sURL.Replace("&amp;", "&");
							sURL = RuntimePlatformUtils.GetURL(sURL, AppUtils.Instance, Global.App.eSpaceName);
							Response.BufferOutput = true;
							Response.Redirect(sURL, true);
							return false;

						}
					}

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance35 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance35_onDataBinding(object sender, System.EventArgs e) {
			proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London widget = (proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance31 Functions
		/// </summary>
		public void webBlck_WebBlockInstance31_onDataBinding(object sender, System.EventArgs e) {
			ssTeste_SAP.Flows.FlowCommon.WBlkHeader widget = (ssTeste_SAP.Flows.FlowCommon.WBlkHeader) sender;
		}
		/// <summary>
		/// wt_Container38 Functions
		/// </summary>
		public void cnt_Container38_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container38_setInlineAttributes(sender, e);
		}
		public string cnt_Container38_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container38_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container38)
		/// </summary>
		/// <returns>The Visible State of wt_Container38</returns>
		public bool cnt_Container38_isVisible() {
			return true;
		}

		/// <summary>
		/// wtEditRecord1 Functions
		/// </summary>
		public void wtEditRecord1_onDataBindingDataSource(object sender, System.EventArgs e) {
		}
		/// <summary>
		/// wtUserNameInput Functions
		/// </summary>
		public void inputwtUserNameInput_onDataBinding(object sender, System.EventArgs e) {
			inputwtUserNameInput_setInlineAttributes(sender, e);
		}
		public string inputwtUserNameInput_setInlineAttributes(object sender, System.EventArgs e) {
			((IViewStateAttributes) sender).ViewStateAttributes.InheritInlineAttributes();
			((IViewStateAttributes) sender).ViewStateAttributes.InlineAttributes["autofocus"] = "autofocus";
			return "";
		}
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtUserNameInput_input_value() {
			if (("" !=varLcUserName)) {
				return varLcUserName;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtUserNameInput");

				if (explicitChangedVariables.Contains(varLcUserName) || ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcUserName;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtUserNameInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcUserName = ""; 
				} else {
					varLcUserName = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcUserName = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtUserNameInput)
		/// </summary>
		/// <returns>The Visible State of wtUserNameInput</returns>
		public bool inputwtUserNameInput_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtUserNameInput)
		/// </summary>
		/// <returns>The Enabled State of wtUserNameInput</returns>
		public bool inputwtUserNameInput_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtUserNameInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtUserNameInput</returns>
		public bool inputwtUserNameInput_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtPasswordInput Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtPasswordInput_input_value() {
			return varLcPassword;
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtPasswordInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcPassword = ""; 
				} else {
					varLcPassword = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcPassword = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtPasswordInput)
		/// </summary>
		/// <returns>The Visible State of wtPasswordInput</returns>
		public bool inputwtPasswordInput_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtPasswordInput)
		/// </summary>
		/// <returns>The Enabled State of wtPasswordInput</returns>
		public bool inputwtPasswordInput_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtPasswordInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtPasswordInput</returns>
		public bool inputwtPasswordInput_isMandatory() {
			return true;
		}

		/// <summary>
		/// wt_If37 Functions
		/// </summary>
		bool if_wt_If37_hasRun=false;
		bool if_wt_If37_evalResult;
		public bool if_wt_If37() {
			if (if_wt_If37_hasRun) {
				if_wt_If37_hasRun = false;
				return if_wt_If37_evalResult;
			}
			if_wt_If37_hasRun = true;
			if_wt_If37_evalResult = (!queryResCheckAdmin_outParamList.Empty);
			return if_wt_If37_evalResult;
		}

		/// <summary>
		/// wt_InlineExpression27 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = ZLHUqDaqVUSMMlQeeBOFyg) Expression: "The default password for
		///  the user 'admin' is 'admin'"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression27() {
			return "The default password for the user \'admin\' is \'admin\'";
		}
		/// <summary>
		/// wt_Container2 Functions
		/// </summary>
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container2_setInlineAttributes(sender, e);
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_CheckBox17 Functions
		/// </summary>
		/// <summary>
		/// Gets the "Checked" Value of the Check Box u7P_TcrzOE6FLW5wGef1Zg
		/// </summary>
		/// <returns>The Value of the Check Box u7P_TcrzOE6FLW5wGef1Zg</returns>
		public bool chk_CheckBox17_checked_value() {
			return varLcRememberLogin;
		}
		public void chk_CheckBox17_checkbox_onCheckedChanged(object sender, EventArgs e) {
			try {
				varLcRememberLogin = Convert.ToBoolean(((OutSystems.HubEdition.WebWidgets.CheckBox) sender).Checked);
			} catch (Exception) {
			}
		}
		/// <summary>
		/// Gets the enabled state of component (wt_CheckBox17)
		/// </summary>
		/// <returns>The Enabled State of wt_CheckBox17</returns>
		public bool chk_CheckBox17_isEnabled() {
			return true; 
		}
		/// <summary>
		/// Gets the visible state of component (wt_CheckBox17)
		/// </summary>
		/// <returns>The Visible State of wt_CheckBox17</returns>
		public bool chk_CheckBox17_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container6 Functions
		/// </summary>
		public void cnt_Container6_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container6_setInlineAttributes(sender, e);
		}
		public string cnt_Container6_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container6_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container6)
		/// </summary>
		/// <returns>The Visible State of wt_Container6</returns>
		public bool cnt_Container6_isVisible() {
			return true;
		}

		/// <summary>
		/// wtLoginButton Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtLoginButton_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandLogin(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wtLoginButton)
		/// </summary>
		/// <returns>Label of the Button (wtLoginButton)</returns>
		public string
		btnLoginButton_getLabel() {
			return "Login";
		}
		/// <summary>
		/// Gets the visible state of component (wtLoginButton)
		/// </summary>
		/// <returns>The Visible State of wtLoginButton</returns>
		public bool btnLoginButton_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtLoginButton)
		/// </summary>
		/// <returns>The Enabled State of wtLoginButton</returns>
		public bool btnLoginButton_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_WebBlockInstance22 Functions
		/// </summary>
		public void webBlck_WebBlockInstance22_onDataBinding(object sender, System.EventArgs e) {
			ssTeste_SAP.Flows.FlowCommon.WBlkFooter widget = (ssTeste_SAP.Flows.FlowCommon.WBlkFooter) sender;
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance30 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			proxy_Teste_SAP_RichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups widget = (proxy_Teste_SAP_RichWidgets.Flows.FlowRichWidgets.WBlkRemovePopups) sender;
		}


		public static class FuncCommandLogin {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "CheckAdmin" of Action "Preparation"
			/// </summary>
			public static RLUserRecordList datasetCheckAdmin(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out long outParamCount, string qpstP) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o1, NULL o2, NULL o3, NULL o4, NULL o5, NULL o6, NULL o7, NULL o8, NULL o9, NULL o10");
				fromBuilder.Append(" FROM {User} ENUser");
				whereBuilder.Append(" WHERE (ENUser.[USERNAME] = N'admin') AND (ENUser.[PASSWORD] = @qpstP)");
				sqlCmd.CreateParameterWithoutReplacements("@qpstP", DbType.String, qpstP);

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				RLUserRecordList outParamList = new RLUserRecordList();
				outParamList.Transaction = trans;
				BitArray[] opt = new BitArray[1];
				opt[0] = new BitArray(new bool[] {
					false, true, true, true, true, true, true, true, true, true, true
				}
				);
				outParamList.AllOptimizedAttributes = opt;
				if (multiplicity == IterationMultiplicity.Multiple) {
					RLUserRecordList _tmp = new RLUserRecordList();
					_tmp.Transaction = trans;
					_tmp.AllOptimizedAttributes = opt;
					_tmp.MaxRecords = maxRecords;
					try {
						DateTime startTime = DateTime.Now;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Login.Preparation.CheckAdmin.List");
						int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
						);
						RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
						if (reqTracer != null) {
							reqTracer.RegisterQueryExecuted("bf7928c4-7d86-c74b-a657-d7ec073f6d5f", "Common.Login.Preparation.CheckAdmin", "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP", queryExecutionTime, DateTime.Now);
						}
						outParamList = (RLUserRecordList) _tmp.Duplicate();
						_tmp.CloseDataReader();
						return outParamList;
					} finally {
						_tmp.CloseDataReader();
					}
				} else if (multiplicity == IterationMultiplicity.Never) {
					try {
						DateTime startTime = DateTime.Now;
						DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Login.Preparation.CheckAdmin.List");
						int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
						);
						RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
						if (reqTracer != null) {
							reqTracer.RegisterQueryExecuted("bf7928c4-7d86-c74b-a657-d7ec073f6d5f", "Common.Login.Preparation.CheckAdmin", "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP", queryExecutionTime, DateTime.Now);
						}
						outParamList.MaxRecords = maxRecords;
						return outParamList;
					} finally {
						outParamList.CloseDataReader();
					}
				} else {
					if (maxRecords > 0 && maxRecords <= 150) {
						RLUserRecordList _tmp = new RLUserRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query Common.Login.Preparation.CheckAdmin.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("bf7928c4-7d86-c74b-a657-d7ec073f6d5f", "Common.Login.Preparation.CheckAdmin", "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP", queryExecutionTime, DateTime.Now);
							}
							outParamList = (RLUserRecordList) _tmp.Duplicate();
							outParamList.AllOptimizedAttributes = opt;
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else {
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query Common.Login.Preparation.CheckAdmin.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("bf7928c4-7d86-c74b-a657-d7ec073f6d5f", "Common.Login.Preparation.CheckAdmin", "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP", queryExecutionTime, DateTime.Now);
							}
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							if (maxRecords == 1) {
								outParamList.CloseDataReader();
							}
						}
					}
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssTeste_SAP.Global.eSpaceId;
				Preparation(heContext);

				Title = "Login"; Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Login", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssTeste_SAP.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				RequestTracer perfTracer = RuntimePlatformUtils.GetRequestTracer(); if (perfTracer != null) {
					perfTracer.RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Login", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			StoreWebScreenStackViewState();

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		public override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcPassword", varLcPassword, "");
			ViewStateAttributes.SetInViewState("varLcUserName", varLcUserName, "");
			ViewStateAttributes.SetInViewState("varLcRememberLogin", varLcRememberLogin, false);
			ViewStateAttributes.SetInViewState("wtUserNameInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtUserNameInput")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtPasswordInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtPasswordInput")).Mandatory, false);
			((OSPageViewState) Page).RemoveStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				varLcPassword = (string) ViewStateAttributes.GetFromViewState("varLcPassword", "");
				varLcUserName = (string) ViewStateAttributes.GetFromViewState("varLcUserName", "");
				varLcRememberLogin = (bool) ViewStateAttributes.GetFromViewState("varLcRememberLogin", false);
				((IWidgetRuntimeProperties) this.FindControl("wtUserNameInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtUserNameInput_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtPasswordInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtPasswordInput_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtUserNameInput", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtPasswordInput", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
