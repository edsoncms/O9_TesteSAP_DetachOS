/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssTeste_SAP.Flows.FlowCommon {

	public class ScrnMyInfo: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnMyInfo(): base(Teste_SAP_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcShowChangePassword</code> that represents the Service Studio local variable
		///  <code>ShowChangePassword</code> <p>Description: </p>
		/// </summary>
		bool varLcShowChangePassword = false;

		/// <summary>
		/// Variable RichWidgets_wt_WebBlockInstance17
		/// </summary>
		protected proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London RichWidgets_wt_WebBlockInstance17;
		/// <summary>
		/// Variable (wt_Link8) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link8;
		protected OutSystems.HubEdition.WebWidgets.Container wtDivRefresh;
		/// <summary>
		/// Variable "True" if the Widget wt_If12
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If12T;

		/// <summary>
		/// Variable "True" if the Widget wt_If12
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If12F;


		List<object> explicitChangedVariables = new List<object>();

		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London.GetCss(writer, inline, visited);
			ssTeste_SAP.Flows.FlowCommon.WBlkHeader.GetCss(writer, inline, visited);
			ssTeste_SAP.Flows.FlowCommon.WBlkMenu.GetCss(writer, inline, visited);
			proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkEditMyInfo.GetCss(writer, inline, visited);
			proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkChangePassword.GetCss(writer, inline, visited);
			ssTeste_SAP.Flows.FlowCommon.WBlkFooter.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("LHXIyvg8xkzSPuSGIz9jgg", "MyInfo");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/Teste_SAP/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "LHXIyvg8xkzSPuSGIz9jgg", "MyInfo");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "LHXIyvg8xkzSPuSGIz9jgg", "MyInfo");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "LHXIyvg8xkzSPuSGIz9jgg", "MyInfo");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "LHXIyvg8xkzSPuSGIz9jgg", "MyInfo");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnMyInfo() {
		}




		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssUrl {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssFile {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return "Theme.Teste_SAP.css"; 
			}
		}

		protected override string ThemeCssCacheInvalidationSuffix {
			get {
				return AppUtils.Instance.CacheInvalidationSuffix; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "Theme.Teste_SAP.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssCacheInvalidationSuffix {
			get {
				return RsseSpaceRichWidgets.CacheInvalidationSuffix; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsHttps(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "MyInfo", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "MyInfo", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			RichWidgets_wt_WebBlockInstance17 = (proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London) FindControl("RichWidgets_wt_WebBlockInstance17");
			wt_Link8 = (OutSystems.HubEdition.WebWidgets.LinkButton) FindControl("wt_Link8");
			if (this.wt_Link8 != null) {
				this.wt_Link8.Click += new System.EventHandler(this.wt_Link8_Click);
			}
			wtDivRefresh = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtDivRefresh");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance19") {
				return RichWidgets_wt_WebBlockInstance17.wtHeader.FindControl("wt_WebBlockInstance19");
			}
			if (id == "wt_WebBlockInstance11") {
				return RichWidgets_wt_WebBlockInstance17.wtMenu.FindControl("wt_WebBlockInstance11");
			}
			if (id == "wt_Text10") {
				return RichWidgets_wt_WebBlockInstance17.wtTitle.FindControl("wt_Text10");
			}
			if (id == "wt_Link8") {
				return RichWidgets_wt_WebBlockInstance17.wtActions.FindControl("wt_Link8");
			}
			if (id == "wt_Text9") {
				return RichWidgets_wt_WebBlockInstance17.wtActions.FindControl("wt_Text9");
			}
			if (id == "wtDivRefresh") {
				return RichWidgets_wt_WebBlockInstance17.wtMainContent.FindControl("wtDivRefresh");
			}
			if (id == "wt_If12") {
				return RichWidgets_wt_WebBlockInstance17.wtMainContent.FindControl("wt_If12");
			}
			if (id == "wt_If12T") {
				return RichWidgets_wt_WebBlockInstance17.wtMainContent.FindControl("wt_If12T");
			}
			if (id == "Users_wt_WebBlockInstance1") {
				return RichWidgets_wt_WebBlockInstance17.wtMainContent.FindControl("Users_wt_WebBlockInstance1");
			}
			if (id == "wt_If12F") {
				return RichWidgets_wt_WebBlockInstance17.wtMainContent.FindControl("wt_If12F");
			}
			if (id == "Users_wt_WebBlockInstance2") {
				return RichWidgets_wt_WebBlockInstance17.wtMainContent.FindControl("Users_wt_WebBlockInstance2");
			}
			if (id == "wt_WebBlockInstance18") {
				return RichWidgets_wt_WebBlockInstance17.wtFooter.FindControl("wt_WebBlockInstance18");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;

			CookieActions.ValidateSessionFixationCookieAgainstSession(heContext);

			if (appInfo != null) {
				heContext = appInfo.OsContext; heContext.RequestTracer.MainEventType = RequestTracerEventType.WebScreenServerExecuted; heContext.RequestTracer.RegisterEndpoint("cac8752c-3cf8-4cc6-d23e-e486233f6382", "MyInfo"); 
			}
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["Teste_SAP._ScreenParameters_MyInfo"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["Teste_SAP._ScreenParameters_MyInfo"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (appInfo.IsForcingSecurityForScreens(Global.eSpaceId) && !RuntimePlatformUtils.RequestIsSecure(Request)) {
				string redirectUrl = "https" + Request.Url.ToString().Substring(4);
				Response.Redirect(redirectUrl);
				HttpContext.Current.ApplicationInstance.CompleteRequest();
			}
			if (!IsPostBack) {
				CheckPermissions(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "My Info"; Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "MyInfo", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (heContext.AppInfo.IsForcingSecurityForScreens(Global.eSpaceId) && !RuntimePlatformUtils.RequestIsSecure(Request)) {
					string redirectUrl = "https" + Request.Url.ToString().Substring(4);
					Response.Redirect(redirectUrl);
					HttpContext.Current.ApplicationInstance.CompleteRequest();
				}
				FetchViewState();
			}

		}
		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");

			NegotiateTabIndexes();

			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short settedTabIndex = 0;
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, Convert.ToInt16(htTabIndexGroupsTI[groupid]), out settedTabIndex);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, tabindex, out settedTabIndex);
							// Increase tabindex if it was not overiden
							if (tabindex == settedTabIndex) {
								tabindex++;
							}
						}
					}
					tabindex = Math.Max(tabindex, ++settedTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssTeste_SAP.Flows.FlowCommon.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckTeste_SAPUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new NotRegisteredException("Registered role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("LHXIyvg8xkzSPuSGIz9jgg"); 
			}
		}

		public bool isSecure {
			get {
				return Global.App.IsForcingSecurityForScreens(Global.eSpaceId);
			}
		}


		public class lcvToggleChangePassword: VarsBag {
			public bool inParamIsVisible;
			public lcvToggleChangePassword(bool inParamIsVisible) {
				this.inParamIsVisible = inParamIsVisible;
			}
		}
		/// <summary>
		/// Action <code>CommandToggleChangePassword</code> that represents the Service Studio screen action
		///  <code>ToggleChangePassword</code> <p> Description: </p>
		/// </summary>
		private bool CommandToggleChangePassword(HeContext heContext, bool inParamIsVisible) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("3bed3123-bff6-d41c-c328-22ae668a479c", "ToggleChangePassword"); 
			}
			lcvToggleChangePassword localVars = new lcvToggleChangePassword(inParamIsVisible);
			try {
				varLcShowChangePassword = localVars.inParamIsVisible; // ShowChangePassword = IsVisible
				explicitChangedVariables.Add(varLcShowChangePassword);
				// Refresh Widget (wtDivRefresh)
				((OSPageViewState) Page).AjaxRefresh(wtDivRefresh, "Fade", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance17 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance17_onDataBinding(object sender, System.EventArgs e) {
			proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London widget = (proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance19 Functions
		/// </summary>
		public void webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			ssTeste_SAP.Flows.FlowCommon.WBlkHeader widget = (ssTeste_SAP.Flows.FlowCommon.WBlkHeader) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance11 Functions
		/// </summary>
		public void webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			ssTeste_SAP.Flows.FlowCommon.WBlkMenu widget = (ssTeste_SAP.Flows.FlowCommon.WBlkMenu) sender;
			widget.inParamActiveMenuItemId = 0;
			widget.inParamActiveSubMenuItemId = 0;
		}
		/// <summary>
		/// wt_Link8 Functions
		/// </summary>
		public void lnk_Link8_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link8_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandToggleChangePassword(heContext, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link8)
		/// </summary>
		/// <returns>title of the Link (wt_Link8)</returns>
		public string
		lnk_Link8_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link8)
		/// </summary>
		/// <returns>The Visible State of wt_Link8</returns>
		public bool lnk_Link8_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link8)
		/// </summary>
		/// <returns>The Enabled State of wt_Link8</returns>
		public bool lnk_Link8_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtDivRefresh Functions
		/// </summary>
		public void cntDivRefresh_onDataBinding(object sender, System.EventArgs e) {
			cntDivRefresh_setInlineAttributes(sender, e);
		}
		public string cntDivRefresh_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntDivRefresh_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtDivRefresh)
		/// </summary>
		/// <returns>The Visible State of wtDivRefresh</returns>
		public bool cntDivRefresh_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_If12 Functions
		/// </summary>
		bool if_wt_If12_hasRun=false;
		bool if_wt_If12_evalResult;
		public bool if_wt_If12() {
			if (if_wt_If12_hasRun) {
				if_wt_If12_hasRun = false;
				return if_wt_If12_evalResult;
			}
			if_wt_If12_hasRun = true;
			if_wt_If12_evalResult = (!varLcShowChangePassword);
			return if_wt_If12_evalResult;
		}

		/// <summary>
		/// Users_wt_WebBlockInstance1 Functions
		/// </summary>
		public void Users_webBlck_WebBlockInstance1_BindDelegates(object sender, BindDelegatesEventArgs e) {
			proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkEditMyInfo webBlock = (proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkEditMyInfo) e.UserControl;
			webBlock.NotifyTriggered += webBlck_WebBlockInstance1_AjaxNotifyTriggered;
		}
		public void Users_webBlck_WebBlockInstance1_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkEditMyInfo widget = (proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkEditMyInfo) sender;
		}
		private void webBlck_WebBlockInstance1_AjaxNotifyTriggered(object sender, EventArgs e) {
			AppInfo.GetAppInfo().OsContext.AjaxEventContextInfo.NotifyMessage = ((MsgEventArgs) e).msg;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssTeste_SAP.Global.eSpaceId;
				CommandToggleChangePassword(heContext, false);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			((OSPageViewState) Page).AddStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// AjaxNotify event handler for widget Users_wt_WebBlockInstance1
		/// </summary>
		public void Users_webBlck_WebBlockInstance1_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandToggleChangePassword(heContext
			, false)
			) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Users_wt_WebBlockInstance2 Functions
		/// </summary>
		public void Users_webBlck_WebBlockInstance2_BindDelegates(object sender, BindDelegatesEventArgs e) {
			proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkChangePassword webBlock = (proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkChangePassword) e.UserControl;
			webBlock.NotifyTriggered += webBlck_WebBlockInstance2_AjaxNotifyTriggered;
		}
		public void Users_webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkChangePassword widget = (proxy_Teste_SAP_Users.Flows.FlowUserManagement.WBlkChangePassword) sender;
			widget.inParamUserId = 0;
		}
		private void webBlck_WebBlockInstance2_AjaxNotifyTriggered(object sender, EventArgs e) {
			AppInfo.GetAppInfo().OsContext.AjaxEventContextInfo.NotifyMessage = ((MsgEventArgs) e).msg;
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssTeste_SAP.Global.eSpaceId;
				CommandToggleChangePassword(heContext, false);
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			((OSPageViewState) Page).AddStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// AjaxNotify event handler for widget Users_wt_WebBlockInstance2
		/// </summary>
		public void Users_webBlck_WebBlockInstance2_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandToggleChangePassword(heContext
			, false)
			) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_WebBlockInstance18 Functions
		/// </summary>
		public void webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			ssTeste_SAP.Flows.FlowCommon.WBlkFooter widget = (ssTeste_SAP.Flows.FlowCommon.WBlkFooter) sender;
		}


		public static class FuncCommandToggleChangePassword {
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssTeste_SAP.Global.eSpaceId;
				Title = "My Info"; Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "MyInfo", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssTeste_SAP.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				RequestTracer perfTracer = RuntimePlatformUtils.GetRequestTracer(); if (perfTracer != null) {
					perfTracer.RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "MyInfo", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			StoreWebScreenStackViewState();

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		public override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcShowChangePassword", varLcShowChangePassword, false);
			((OSPageViewState) Page).RemoveStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				varLcShowChangePassword = (bool) ViewStateAttributes.GetFromViewState("varLcShowChangePassword", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
