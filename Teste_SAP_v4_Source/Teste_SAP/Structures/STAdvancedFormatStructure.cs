/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STAdvancedFormatStructure</code> that represents the Service Studio structure
	///  <code>AdvancedFormat</code> <p> Description: Information to format chart elements using Highchart
	/// s JSON.</p>
	/// </summary>
	[Serializable()]
	public partial struct STAdvancedFormatStructure: ISerializable, ITypedRecord<STAdvancedFormatStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdDataPointFormats = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*SQ4ClL39E0CL7J4cvk8nNQ");
		private static readonly GlobalObjectKey IdDataSeriesFormats = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*ggBmXsY4fEG2pa3P6fnfKw");
		private static readonly GlobalObjectKey IdXAxisJSON = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*_CMF56ULb0Sy95am4lQAGw");
		private static readonly GlobalObjectKey IdYAxisJSON = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*4FSk5hoOlk+wOhFjflspWw");
		private static readonly GlobalObjectKey IdHighchartsJSON = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*icZufmUsSEaVKuJkUWHXXw");

		public static void EnsureInitialized() {}

		static STAdvancedFormatStructure() {
			global::ssTeste_SAP.STAdvancedFormatStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("DataPointFormats")]
		public RLAdvancedDataPointFormatRecordList ssDataPointFormats;

		[System.Xml.Serialization.XmlElement("DataSeriesFormats")]
		public RLAdvancedDataSeriesFormatRecordList ssDataSeriesFormats;

		[System.Xml.Serialization.XmlElement("XAxisJSON")]
		public string ssXAxisJSON;

		[System.Xml.Serialization.XmlElement("YAxisJSON")]
		public string ssYAxisJSON;

		[System.Xml.Serialization.XmlElement("HighchartsJSON")]
		public string ssHighchartsJSON;


		public BitArray OptimizedAttributes;

		public STAdvancedFormatStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDataPointFormats = new RLAdvancedDataPointFormatRecordList();
			ssDataSeriesFormats = new RLAdvancedDataSeriesFormatRecordList();
			ssXAxisJSON = "";
			ssYAxisJSON = "";
			ssHighchartsJSON = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssXAxisJSON = r.ReadText(index++, "AdvancedFormat.XAxisJSON", "");
			ssYAxisJSON = r.ReadText(index++, "AdvancedFormat.YAxisJSON", "");
			ssHighchartsJSON = r.ReadText(index++, "AdvancedFormat.HighchartsJSON", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAdvancedFormatStructure r) {
			this = r;
		}


		public static bool operator == (STAdvancedFormatStructure a, STAdvancedFormatStructure b) {
			if (a.ssDataPointFormats != b.ssDataPointFormats) return false;
			if (a.ssDataSeriesFormats != b.ssDataSeriesFormats) return false;
			if (a.ssXAxisJSON != b.ssXAxisJSON) return false;
			if (a.ssYAxisJSON != b.ssYAxisJSON) return false;
			if (a.ssHighchartsJSON != b.ssHighchartsJSON) return false;
			return true;
		}

		public static bool operator != (STAdvancedFormatStructure a, STAdvancedFormatStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAdvancedFormatStructure)) return false;
			return (this == (STAdvancedFormatStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDataPointFormats.GetHashCode()
				^ ssDataSeriesFormats.GetHashCode()
				^ ssXAxisJSON.GetHashCode()
				^ ssYAxisJSON.GetHashCode()
				^ ssHighchartsJSON.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAdvancedFormatStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDataPointFormats = new RLAdvancedDataPointFormatRecordList();
			ssDataSeriesFormats = new RLAdvancedDataSeriesFormatRecordList();
			ssXAxisJSON = "";
			ssYAxisJSON = "";
			ssHighchartsJSON = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssDataPointFormats", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDataPointFormats' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDataPointFormats = (RLAdvancedDataPointFormatRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDataSeriesFormats", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDataSeriesFormats' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDataSeriesFormats = (RLAdvancedDataSeriesFormatRecordList) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssXAxisJSON", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssXAxisJSON' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssXAxisJSON = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssYAxisJSON", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssYAxisJSON' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssYAxisJSON = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHighchartsJSON", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHighchartsJSON' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHighchartsJSON = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssDataPointFormats.RecursiveReset();
			ssDataSeriesFormats.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssDataPointFormats.InternalRecursiveSave();
			ssDataSeriesFormats.InternalRecursiveSave();
		}


		public STAdvancedFormatStructure Duplicate() {
			STAdvancedFormatStructure t;
			t.ssDataPointFormats = (RLAdvancedDataPointFormatRecordList) this.ssDataPointFormats.Duplicate();
			t.ssDataSeriesFormats = (RLAdvancedDataSeriesFormatRecordList) this.ssDataSeriesFormats.Duplicate();
			t.ssXAxisJSON = this.ssXAxisJSON;
			t.ssYAxisJSON = this.ssYAxisJSON;
			t.ssHighchartsJSON = this.ssHighchartsJSON;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				ssDataPointFormats.ToXml(this, recordElem, "DataPointFormats", detailLevel - 1);
				ssDataSeriesFormats.ToXml(this, recordElem, "DataSeriesFormats", detailLevel - 1);
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".XAxisJSON")) VarValue.AppendAttribute(recordElem, "XAxisJSON", ssXAxisJSON, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "XAxisJSON");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".YAxisJSON")) VarValue.AppendAttribute(recordElem, "YAxisJSON", ssYAxisJSON, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "YAxisJSON");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".HighchartsJSON")) VarValue.AppendAttribute(recordElem, "HighchartsJSON", ssHighchartsJSON, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "HighchartsJSON");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "datapointformats") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DataPointFormats")) variable.Value = ssDataPointFormats; else variable.Optimized = true;
				variable.SetFieldName("datapointformats");
			} else if (head == "dataseriesformats") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DataSeriesFormats")) variable.Value = ssDataSeriesFormats; else variable.Optimized = true;
				variable.SetFieldName("dataseriesformats");
			} else if (head == "xaxisjson") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".XAxisJSON")) variable.Value = ssXAxisJSON; else variable.Optimized = true;
			} else if (head == "yaxisjson") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".YAxisJSON")) variable.Value = ssYAxisJSON; else variable.Optimized = true;
			} else if (head == "highchartsjson") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".HighchartsJSON")) variable.Value = ssHighchartsJSON; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDataPointFormats) {
				return ssDataPointFormats;
			} else if (key == IdDataSeriesFormats) {
				return ssDataSeriesFormats;
			} else if (key == IdXAxisJSON) {
				return ssXAxisJSON;
			} else if (key == IdYAxisJSON) {
				return ssYAxisJSON;
			} else if (key == IdHighchartsJSON) {
				return ssHighchartsJSON;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDataPointFormats = new RLAdvancedDataPointFormatRecordList();
			ssDataPointFormats.FillFromOther((IOSList) other.AttributeGet(IdDataPointFormats));
			ssDataSeriesFormats = new RLAdvancedDataSeriesFormatRecordList();
			ssDataSeriesFormats.FillFromOther((IOSList) other.AttributeGet(IdDataSeriesFormats));
			ssXAxisJSON = (string) other.AttributeGet(IdXAxisJSON);
			ssYAxisJSON = (string) other.AttributeGet(IdYAxisJSON);
			ssHighchartsJSON = (string) other.AttributeGet(IdHighchartsJSON);
		}
	} // STAdvancedFormatStructure
	/// <summary>
	/// Structure <code>RCAdvancedFormatRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAdvancedFormatRecord: ISerializable, ITypedRecord<RCAdvancedFormatRecord> {
		private static readonly GlobalObjectKey IdAdvancedFormat = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*o2I5OrkHgBtQLJV7nN2huA");

		public static void EnsureInitialized() {}

		static RCAdvancedFormatRecord() {
			global::ssTeste_SAP.RCAdvancedFormatRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("AdvancedFormat")]
		public STAdvancedFormatStructure ssSTAdvancedFormat;


		public static implicit operator STAdvancedFormatStructure(RCAdvancedFormatRecord r) {
			return r.ssSTAdvancedFormat;
		}

		public static implicit operator RCAdvancedFormatRecord(STAdvancedFormatStructure r) {
			RCAdvancedFormatRecord res = new RCAdvancedFormatRecord(null);
			res.ssSTAdvancedFormat = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCAdvancedFormatRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTAdvancedFormat = new STAdvancedFormatStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTAdvancedFormat.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTAdvancedFormat.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAdvancedFormatRecord r) {
			this = r;
		}


		public static bool operator == (RCAdvancedFormatRecord a, RCAdvancedFormatRecord b) {
			if (a.ssSTAdvancedFormat != b.ssSTAdvancedFormat) return false;
			return true;
		}

		public static bool operator != (RCAdvancedFormatRecord a, RCAdvancedFormatRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAdvancedFormatRecord)) return false;
			return (this == (RCAdvancedFormatRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTAdvancedFormat.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAdvancedFormatRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTAdvancedFormat = new STAdvancedFormatStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTAdvancedFormat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTAdvancedFormat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTAdvancedFormat = (STAdvancedFormatStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTAdvancedFormat.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTAdvancedFormat.InternalRecursiveSave();
		}


		public RCAdvancedFormatRecord Duplicate() {
			RCAdvancedFormatRecord t;
			t.ssSTAdvancedFormat = (STAdvancedFormatStructure) this.ssSTAdvancedFormat.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTAdvancedFormat.ToXml(this, recordElem, "AdvancedFormat", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "advancedformat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AdvancedFormat")) variable.Value = ssSTAdvancedFormat; else variable.Optimized = true;
				variable.SetFieldName("advancedformat");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAdvancedFormat) {
				return ssSTAdvancedFormat;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTAdvancedFormat.FillFromOther((IRecord) other.AttributeGet(IdAdvancedFormat));
		}
	} // RCAdvancedFormatRecord
	/// <summary>
	/// RecordList type <code>RLAdvancedFormatRecordList</code> that represents a record list of
	///  <code>AdvancedFormat</code>
	/// </summary>
	[Serializable()]
	public partial class RLAdvancedFormatRecordList: GenericRecordList<RCAdvancedFormatRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCAdvancedFormatRecord GetElementDefaultValue() {
			return new RCAdvancedFormatRecord("");
		}

		public T[] ToArray<T>(Func<RCAdvancedFormatRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAdvancedFormatRecordList recordlist, Func<RCAdvancedFormatRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAdvancedFormatRecordList ToList<T>(T[] array, Func <T, RCAdvancedFormatRecord> converter) {
			RLAdvancedFormatRecordList result = new RLAdvancedFormatRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAdvancedFormatRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAdvancedFormatRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAdvancedFormatRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAdvancedFormatRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAdvancedFormatRecord> NewList() {
			return new RLAdvancedFormatRecordList();
		}


	} // RLAdvancedFormatRecordList
	/// <summary>
	/// RecordList type <code>RLAdvancedFormatList</code> that represents a record list of <code>Text,
	///  Text, Text, AdvancedDataPointFormatRecordList, AdvancedDataSeriesFormatRecordList</code>
	/// </summary>
	[Serializable()]
	public partial class RLAdvancedFormatList: GenericRecordList<STAdvancedFormatStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STAdvancedFormatStructure GetElementDefaultValue() {
			return new STAdvancedFormatStructure("");
		}

		public T[] ToArray<T>(Func<STAdvancedFormatStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAdvancedFormatList recordlist, Func<STAdvancedFormatStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAdvancedFormatList ToList<T>(T[] array, Func <T, STAdvancedFormatStructure> converter) {
			RLAdvancedFormatList result = new RLAdvancedFormatList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAdvancedFormatList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAdvancedFormatList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAdvancedFormatList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAdvancedFormatList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STAdvancedFormatStructure> NewList() {
			return new RLAdvancedFormatList();
		}


	} // RLAdvancedFormatList
}

namespace ssTeste_SAP {
	[XmlType("AdvancedFormat")]
	public class WORCAdvancedFormatRecord {
		[System.Xml.Serialization.XmlArray("DataPointFormats")]
		public WORCAdvancedDataPointFormatRecord[] varWSDataPointFormats;

		[System.Xml.Serialization.XmlArray("DataSeriesFormats")]
		public WORCAdvancedDataSeriesFormatRecord[] varWSDataSeriesFormats;

		[System.Xml.Serialization.XmlElement("XAxisJSON")]
		public string varWSXAxisJSON;

		[System.Xml.Serialization.XmlElement("YAxisJSON")]
		public string varWSYAxisJSON;

		[System.Xml.Serialization.XmlElement("HighchartsJSON")]
		public string varWSHighchartsJSON;

		public WORCAdvancedFormatRecord() {
			varWSDataPointFormats = new WORCAdvancedDataPointFormatRecord[0];
			varWSDataSeriesFormats = new WORCAdvancedDataSeriesFormatRecord[0];
			varWSXAxisJSON = (string) "";
			varWSYAxisJSON = (string) "";
			varWSHighchartsJSON = (string) "";
		}

		public WORCAdvancedFormatRecord(STAdvancedFormatStructure r) {
			varWSDataPointFormats = r.ssDataPointFormats;
			varWSDataSeriesFormats = r.ssDataSeriesFormats;
			varWSXAxisJSON = BaseAppUtils.RemoveControlChars(r.ssXAxisJSON);
			varWSYAxisJSON = BaseAppUtils.RemoveControlChars(r.ssYAxisJSON);
			varWSHighchartsJSON = BaseAppUtils.RemoveControlChars(r.ssHighchartsJSON);
		}

		public static RLAdvancedFormatList ToRecordList(WORCAdvancedFormatRecord[] array) {
			RLAdvancedFormatList rl = new RLAdvancedFormatList();
			if (array != null) {
				foreach(WORCAdvancedFormatRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAdvancedFormatRecord[] FromRecordList(RLAdvancedFormatList rl) {
			WORCAdvancedFormatRecord[] array = new WORCAdvancedFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCAdvancedFormatRecord {
		public static implicit operator WORCAdvancedFormatRecord(RCAdvancedFormatRecord r) {
			return new WORCAdvancedFormatRecord(r.ssSTAdvancedFormat);
		}

		public static implicit operator RCAdvancedFormatRecord(WORCAdvancedFormatRecord w) {
			RCAdvancedFormatRecord r = new RCAdvancedFormatRecord("");
			if (w != null) {
				r.ssSTAdvancedFormat = w;
			}
			return r;
		}

	}

	partial struct STAdvancedFormatStructure {
		public static implicit operator WORCAdvancedFormatRecord(STAdvancedFormatStructure r) {
			return new WORCAdvancedFormatRecord(r);
		}

		public static implicit operator STAdvancedFormatStructure(WORCAdvancedFormatRecord w) {
			STAdvancedFormatStructure r = new STAdvancedFormatStructure("");
			if (w != null) {
				r.ssDataPointFormats = w.varWSDataPointFormats;
				r.ssDataSeriesFormats = w.varWSDataSeriesFormats;
				r.ssXAxisJSON = ((string) w.varWSXAxisJSON ?? "");
				r.ssYAxisJSON = ((string) w.varWSYAxisJSON ?? "");
				r.ssHighchartsJSON = ((string) w.varWSHighchartsJSON ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLAdvancedFormatRecordList {
		public WORCAdvancedFormatRecord[] Array;


		public WORLAdvancedFormatRecordList(WORCAdvancedFormatRecord[] r) {
			if (r == null)
			Array = new WORCAdvancedFormatRecord[0];
			else
			Array = r;
		}
		public WORLAdvancedFormatRecordList() {
			Array = new WORCAdvancedFormatRecord[0];
		}

		public WORLAdvancedFormatRecordList(RLAdvancedFormatRecordList rl) {
			rl=(RLAdvancedFormatRecordList) rl.Duplicate();
			Array = new WORCAdvancedFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAdvancedFormatRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLAdvancedFormatRecordList {
		public static implicit operator RLAdvancedFormatRecordList(WORCAdvancedFormatRecord[] array) {
			RLAdvancedFormatRecordList rl = new RLAdvancedFormatRecordList();
			if (array != null) {
				foreach(WORCAdvancedFormatRecord val in array) {
					rl.Append((RCAdvancedFormatRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAdvancedFormatRecord[](RLAdvancedFormatRecordList rl) {
			WORCAdvancedFormatRecord[] array = new WORCAdvancedFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAdvancedFormatRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLAdvancedFormatRecordList {
		public static implicit operator RLAdvancedFormatRecordList(WORLAdvancedFormatRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAdvancedFormatRecordList(RLAdvancedFormatRecordList rl) {
			return new WORLAdvancedFormatRecordList(rl);
		}
		public static implicit operator WORCAdvancedFormatRecord[](WORLAdvancedFormatRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAdvancedFormatRecordList(WORCAdvancedFormatRecord[] array) {
			return new WORLAdvancedFormatRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLAdvancedFormatList {
		public WORCAdvancedFormatRecord[] Array;


		public WORLAdvancedFormatList(WORCAdvancedFormatRecord[] r) {
			if (r == null)
			Array = new WORCAdvancedFormatRecord[0];
			else
			Array = r;
		}
		public WORLAdvancedFormatList() {
			Array = new WORCAdvancedFormatRecord[0];
		}

		public WORLAdvancedFormatList(RLAdvancedFormatList rl) {
			rl=(RLAdvancedFormatList) rl.Duplicate();
			Array = new WORCAdvancedFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLAdvancedFormatList {
		public static implicit operator RLAdvancedFormatList(WORCAdvancedFormatRecord[] array) {
			RLAdvancedFormatList rl = new RLAdvancedFormatList();
			if (array != null) {
				foreach(WORCAdvancedFormatRecord val in array) {
					rl.Append((STAdvancedFormatStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAdvancedFormatRecord[](RLAdvancedFormatList rl) {
			WORCAdvancedFormatRecord[] array = new WORCAdvancedFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STAdvancedFormatStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLAdvancedFormatList {
		public static implicit operator RLAdvancedFormatList(WORLAdvancedFormatList w) {
			return w.Array;
		}
		public static implicit operator WORLAdvancedFormatList(RLAdvancedFormatList rl) {
			return new WORLAdvancedFormatList(rl);
		}
		public static implicit operator WORCAdvancedFormatRecord[](WORLAdvancedFormatList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAdvancedFormatList(WORCAdvancedFormatRecord[] array) {
			return new WORLAdvancedFormatList(array);
		}
	}
}

