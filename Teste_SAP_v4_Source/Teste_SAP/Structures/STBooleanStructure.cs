/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STBooleanStructure</code> that represents the Service Studio structure
	///  <code>Boolean</code> <p> Description: Boolean structure that will work as an array of boolea
	/// n values.</p>
	/// </summary>
	[Serializable()]
	public partial struct STBooleanStructure: ISerializable, ITypedRecord<STBooleanStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("sxSgg9oQRkKKlyKvezqjKg*u_sQos8au0603PfrrRUz2w");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Value")]
		public bool ssValue;


		public BitArray OptimizedAttributes;

		public STBooleanStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssValue = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssValue = r.ReadBoolean(index++, "Boolean.Value", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STBooleanStructure r) {
			this = r;
		}


		public static bool operator == (STBooleanStructure a, STBooleanStructure b) {
			if (a.ssValue != b.ssValue) return false;
			return true;
		}

		public static bool operator != (STBooleanStructure a, STBooleanStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STBooleanStructure)) return false;
			return (this == (STBooleanStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssValue.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STBooleanStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssValue = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValue = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STBooleanStructure Duplicate() {
			STBooleanStructure t;
			t.ssValue = this.ssValue;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdValue) {
				return ssValue;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssValue = (bool) other.AttributeGet(IdValue);
		}
	} // STBooleanStructure
	/// <summary>
	/// Structure <code>RCBooleanRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCBooleanRecord: ISerializable, ITypedRecord<RCBooleanRecord> {
		private static readonly GlobalObjectKey IdBoolean = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6xkt5imeK0dbZ+AA0D_KSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Boolean")]
		public STBooleanStructure ssSTBoolean;


		public static implicit operator STBooleanStructure(RCBooleanRecord r) {
			return r.ssSTBoolean;
		}

		public static implicit operator RCBooleanRecord(STBooleanStructure r) {
			RCBooleanRecord res = new RCBooleanRecord(null);
			res.ssSTBoolean = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCBooleanRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTBoolean = new STBooleanStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTBoolean.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTBoolean.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCBooleanRecord r) {
			this = r;
		}


		public static bool operator == (RCBooleanRecord a, RCBooleanRecord b) {
			if (a.ssSTBoolean != b.ssSTBoolean) return false;
			return true;
		}

		public static bool operator != (RCBooleanRecord a, RCBooleanRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCBooleanRecord)) return false;
			return (this == (RCBooleanRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTBoolean.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCBooleanRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTBoolean = new STBooleanStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTBoolean", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTBoolean' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTBoolean = (STBooleanStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTBoolean.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTBoolean.InternalRecursiveSave();
		}


		public RCBooleanRecord Duplicate() {
			RCBooleanRecord t;
			t.ssSTBoolean = (STBooleanStructure) this.ssSTBoolean.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTBoolean.ToXml(this, recordElem, "Boolean", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "boolean") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Boolean")) variable.Value = ssSTBoolean; else variable.Optimized = true;
				variable.SetFieldName("boolean");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdBoolean) {
				return ssSTBoolean;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTBoolean.FillFromOther((IRecord) other.AttributeGet(IdBoolean));
		}
	} // RCBooleanRecord
	/// <summary>
	/// RecordList type <code>RLBooleanRecordList</code> that represents a record list of
	///  <code>Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLBooleanRecordList: GenericRecordList<RCBooleanRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCBooleanRecord GetElementDefaultValue() {
			return new RCBooleanRecord("");
		}

		public T[] ToArray<T>(Func<RCBooleanRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLBooleanRecordList recordlist, Func<RCBooleanRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLBooleanRecordList ToList<T>(T[] array, Func <T, RCBooleanRecord> converter) {
			RLBooleanRecordList result = new RLBooleanRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLBooleanRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBooleanRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBooleanRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLBooleanRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCBooleanRecord> NewList() {
			return new RLBooleanRecordList();
		}


	} // RLBooleanRecordList
	/// <summary>
	/// RecordList type <code>RLBooleanList</code> that represents a record list of <code>Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLBooleanList: GenericRecordList<STBooleanStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STBooleanStructure GetElementDefaultValue() {
			return new STBooleanStructure("");
		}

		public T[] ToArray<T>(Func<STBooleanStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLBooleanList recordlist, Func<STBooleanStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLBooleanList ToList<T>(T[] array, Func <T, STBooleanStructure> converter) {
			RLBooleanList result = new RLBooleanList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLBooleanList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBooleanList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLBooleanList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLBooleanList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STBooleanStructure> NewList() {
			return new RLBooleanList();
		}


	} // RLBooleanList
}

namespace ssTeste_SAP {
	[XmlType("Boolean")]
	public class WORCBooleanRecord {
		[System.Xml.Serialization.XmlElement("Value")]
		public bool varWSValue;

		public WORCBooleanRecord() {
			varWSValue = (bool) false;
		}

		public WORCBooleanRecord(STBooleanStructure r) {
			varWSValue = (bool) r.ssValue;
		}

		public static RLBooleanList ToRecordList(WORCBooleanRecord[] array) {
			RLBooleanList rl = new RLBooleanList();
			if (array != null) {
				foreach(WORCBooleanRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCBooleanRecord[] FromRecordList(RLBooleanList rl) {
			WORCBooleanRecord[] array = new WORCBooleanRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCBooleanRecord {
		public static implicit operator WORCBooleanRecord(RCBooleanRecord r) {
			return new WORCBooleanRecord(r.ssSTBoolean);
		}

		public static implicit operator RCBooleanRecord(WORCBooleanRecord w) {
			RCBooleanRecord r = new RCBooleanRecord("");
			if (w != null) {
				r.ssSTBoolean = w;
			}
			return r;
		}

	}

	partial struct STBooleanStructure {
		public static implicit operator WORCBooleanRecord(STBooleanStructure r) {
			return new WORCBooleanRecord(r);
		}

		public static implicit operator STBooleanStructure(WORCBooleanRecord w) {
			STBooleanStructure r = new STBooleanStructure("");
			if (w != null) {
				r.ssValue = (bool) w.varWSValue;
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLBooleanRecordList {
		public WORCBooleanRecord[] Array;


		public WORLBooleanRecordList(WORCBooleanRecord[] r) {
			if (r == null)
			Array = new WORCBooleanRecord[0];
			else
			Array = r;
		}
		public WORLBooleanRecordList() {
			Array = new WORCBooleanRecord[0];
		}

		public WORLBooleanRecordList(RLBooleanRecordList rl) {
			rl=(RLBooleanRecordList) rl.Duplicate();
			Array = new WORCBooleanRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCBooleanRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLBooleanRecordList {
		public static implicit operator RLBooleanRecordList(WORCBooleanRecord[] array) {
			RLBooleanRecordList rl = new RLBooleanRecordList();
			if (array != null) {
				foreach(WORCBooleanRecord val in array) {
					rl.Append((RCBooleanRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCBooleanRecord[](RLBooleanRecordList rl) {
			WORCBooleanRecord[] array = new WORCBooleanRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCBooleanRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLBooleanRecordList {
		public static implicit operator RLBooleanRecordList(WORLBooleanRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLBooleanRecordList(RLBooleanRecordList rl) {
			return new WORLBooleanRecordList(rl);
		}
		public static implicit operator WORCBooleanRecord[](WORLBooleanRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLBooleanRecordList(WORCBooleanRecord[] array) {
			return new WORLBooleanRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLBooleanList {
		public WORCBooleanRecord[] Array;


		public WORLBooleanList(WORCBooleanRecord[] r) {
			if (r == null)
			Array = new WORCBooleanRecord[0];
			else
			Array = r;
		}
		public WORLBooleanList() {
			Array = new WORCBooleanRecord[0];
		}

		public WORLBooleanList(RLBooleanList rl) {
			rl=(RLBooleanList) rl.Duplicate();
			Array = new WORCBooleanRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLBooleanList {
		public static implicit operator RLBooleanList(WORCBooleanRecord[] array) {
			RLBooleanList rl = new RLBooleanList();
			if (array != null) {
				foreach(WORCBooleanRecord val in array) {
					rl.Append((STBooleanStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCBooleanRecord[](RLBooleanList rl) {
			WORCBooleanRecord[] array = new WORCBooleanRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STBooleanStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLBooleanList {
		public static implicit operator RLBooleanList(WORLBooleanList w) {
			return w.Array;
		}
		public static implicit operator WORLBooleanList(RLBooleanList rl) {
			return new WORLBooleanList(rl);
		}
		public static implicit operator WORCBooleanRecord[](WORLBooleanList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLBooleanList(WORCBooleanRecord[] array) {
			return new WORLBooleanList(array);
		}
	}
}

