/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STClientdataStructure</code> that represents the Service Studio structure
	///  <code>Clientdata</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STClientdataStructure: ISerializable, ITypedRecord<STClientdataStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdMaterial = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*vNADAohxiUWShqJVb49HDA");
		private static readonly GlobalObjectKey IdInd_Sector = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*SpZNmPg6wEi9eiAl1WZE8w");
		private static readonly GlobalObjectKey IdMatl_Type = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*N6BznypBU0mwEqeeDRTiTw");
		private static readonly GlobalObjectKey IdCreated_On = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*YbkMt8KCNkejRf1aoSulCA");
		private static readonly GlobalObjectKey IdCreated_By = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*RAe_WnYdkUaVPAqbTh7K+Q");
		private static readonly GlobalObjectKey IdLast_Chnge = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*OZXzZ3cWcUW1e9zxLOl8XA");
		private static readonly GlobalObjectKey IdChanged_By = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*X9D7Z1LM6UGH9cvrIC8Jbw");
		private static readonly GlobalObjectKey IdMat_Status = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*OR3ZGVzI6kOGOWfkYebeQg");
		private static readonly GlobalObjectKey IdMaint_Stat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*vk3tipojF0yB+n3BECgPAw");
		private static readonly GlobalObjectKey IdDel_Flag = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*_P_wmT0IjU+ykMrF5CfE9Q");
		private static readonly GlobalObjectKey IdMatl_Group = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*B9s2E3ovs0+BeH2WLBpkyQ");
		private static readonly GlobalObjectKey IdOld_Mat_No = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*lbkS3jeVkEuI5BJ7fscfAA");
		private static readonly GlobalObjectKey IdBase_Uom = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*BeuyaU3I4EyVguuRouMxLA");
		private static readonly GlobalObjectKey IdBase_Uom_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*pFVdg3eiSUyF08krWqdkLw");
		private static readonly GlobalObjectKey IdPo_Unit = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*tj3t0ZQ_b02fDADmEChBAA");
		private static readonly GlobalObjectKey IdPo_Unit_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*FIXAqj4PiUq6ECPccjfeLg");
		private static readonly GlobalObjectKey IdDocument = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*QuKlapcKYU6AhvCbEc7taA");
		private static readonly GlobalObjectKey IdDoc_Type = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*2mgvKyiVSU2+IMG9P8MRCw");
		private static readonly GlobalObjectKey IdDoc_Vers = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*VxSNHGgrEkuX8nYroCNjKA");
		private static readonly GlobalObjectKey IdDoc_Format = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*jxq5SktunUqKoYIc9yOMWQ");
		private static readonly GlobalObjectKey IdDoc_Chg_No = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Ie50lftXrUCoTae4Gfeuhw");
		private static readonly GlobalObjectKey IdPage_No = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*qSyYnGy_V0mS0cZR9mE76A");
		private static readonly GlobalObjectKey IdNo_Sheets = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Ihic+O3DlE6V5O_1EWQ_cQ");
		private static readonly GlobalObjectKey IdProd_Memo = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*CIywz7RXPEa0ZNpxfprdFg");
		private static readonly GlobalObjectKey IdPageformat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*nuDf37v19UuxHrVYBRcL0w");
		private static readonly GlobalObjectKey IdSize_Dim = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*kT20H24xVkWnmypl7gLtug");
		private static readonly GlobalObjectKey IdBasic_Matl = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*4QzTqDtrTUWMGCtx52c1SQ");
		private static readonly GlobalObjectKey IdStd_Descr = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*4pOlmZX7Y0Op_KZozCmaIg");
		private static readonly GlobalObjectKey IdDsn_Office = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*rTXHpETVPE2deBoSUaUTYA");
		private static readonly GlobalObjectKey IdPur_Valkey = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*y6uaXbQV1kKYI5QSEspMRw");
		private static readonly GlobalObjectKey IdNet_Weight = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*GCraNSgzSUS2kvlygXSlBQ");
		private static readonly GlobalObjectKey IdUnit_Of_Wt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*ISBhnEgl4Ee58rPpDJWG7w");
		private static readonly GlobalObjectKey IdUnit_Of_Wt_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*2HYDb9UMM0+9+44MnONuzw");
		private static readonly GlobalObjectKey IdContainer = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*mST+nl0iuUaq0wGox9nNjA");
		private static readonly GlobalObjectKey IdStor_Conds = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*JhcdEwkdfE+d3ekvL5Q2AQ");
		private static readonly GlobalObjectKey IdTemp_Conds = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*clIyniimj0WUo5kyWtbOEw");
		private static readonly GlobalObjectKey IdTrans_Grp = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Xm7C+Dfcf02dKvw9CaresQ");
		private static readonly GlobalObjectKey IdHaz_Mat_No = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*v0wzVYVMGUy2lpbhHOxRYA");
		private static readonly GlobalObjectKey IdDivision = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*djsS6jJlB06P72LlsSVQTA");
		private static readonly GlobalObjectKey IdCompetitor = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*8Fzz6bNtNEGtPDjh+ftDlA");
		private static readonly GlobalObjectKey IdQty_Gr_Gi = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*7lbn0W+eF0m4Mx0Ed0zlqg");
		private static readonly GlobalObjectKey IdProc_Rule = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*iF5F7isfzUOQTqy_SlBh0g");
		private static readonly GlobalObjectKey IdSup_Source = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*pMeNa3SwWUCApPAb16af_A");
		private static readonly GlobalObjectKey IdSeason = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*wftEgRvTDUOFT4Z0sbNYrw");
		private static readonly GlobalObjectKey IdLabel_Type = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*9MPMnCHmuk2H2ljm1GXP_w");
		private static readonly GlobalObjectKey IdLabel_Form = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Hf6eOg2C4k+uEgZDcdKhNA");
		private static readonly GlobalObjectKey IdProd_Hier = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*3B4lcFOYiUak6jh0EjZ2wA");
		private static readonly GlobalObjectKey IdCad_Id = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*CdZNMopDtEie83MkkzIzfg");
		private static readonly GlobalObjectKey IdAllowed_Wt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*EDABi96NBUSYdSPmSEXmtw");
		private static readonly GlobalObjectKey IdPack_Wt_Un = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*9uLyX2u8Uk+6922ipM6zsw");
		private static readonly GlobalObjectKey IdPack_Wt_Un_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*kKVmdiv5pEO2ij29vXOh8g");
		private static readonly GlobalObjectKey IdAllwd_Vol = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*1LMLmS1qvkGyhmYi4RGXrg");
		private static readonly GlobalObjectKey IdPack_Vo_Un = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*9g8bMsWnBkyU6zErXASQfA");
		private static readonly GlobalObjectKey IdPack_Vo_Un_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*J_f9c3_0RE6HT+fwN7hYgQ");
		private static readonly GlobalObjectKey IdWt_Tol_Lt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*F54RZg4ZJEeXmOIivO_FHw");
		private static readonly GlobalObjectKey IdVol_Tol_Lt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*3VHMj4fSJ0K6vXkyiU02fA");
		private static readonly GlobalObjectKey IdVar_Ord_Un = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*qz3JFVxTz0qB56ZLPAQEmg");
		private static readonly GlobalObjectKey IdConfigured = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*RCe59RIilk+j7lH_xGW5Sw");
		private static readonly GlobalObjectKey IdBatch_Mgmt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*blst_Fxbm0G77KM+6pvA2Q");
		private static readonly GlobalObjectKey IdSh_Mat_Typ = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*gRttpUBTC0qDgGhKVyoe+g");
		private static readonly GlobalObjectKey IdFill_Level = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*YPBq3ovjAkCEpI34y_fxLg");
		private static readonly GlobalObjectKey IdStack_Fact = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*MXn59DSwbEWZ3KnzS_zGEA");
		private static readonly GlobalObjectKey IdMat_Grp_Sm = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*J3mjDn6Npku1LeW5bv5p6A");
		private static readonly GlobalObjectKey IdAuthoritygroup = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*jfEF9NI4Ak6bezxRyf4g5A");
		private static readonly GlobalObjectKey IdQm_Procmnt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*7N42udyF60qheiwHtg_xuQ");
		private static readonly GlobalObjectKey IdCatprofile = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*p7J1IOLrr0WHeL2E3+mrtA");
		private static readonly GlobalObjectKey IdMinremlife = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Qre15gUtDEGoFhxz8HM0jA");
		private static readonly GlobalObjectKey IdShelf_Life = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*jGrUSc8OzEadTmNXgHsNcw");
		private static readonly GlobalObjectKey IdStor_Pct = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Opz8xMq2LUO8PHdw14emAw");
		private static readonly GlobalObjectKey IdConf_Matl = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*QxeBQTzt6UymiZjFhsZwwQ");
		private static readonly GlobalObjectKey IdCo_Product = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*kh3b9JJ+UkO3AZxm6W6Phw");
		private static readonly GlobalObjectKey IdPr_Ref_Mat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*L_vrvY919kybJe+iWX9H_w");
		private static readonly GlobalObjectKey IdPur_Status = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*pUxKZXEWjkyGGKwHdl8n2A");
		private static readonly GlobalObjectKey IdSal_Status = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Oy6puO3970m6N0HpZh_dcg");
		private static readonly GlobalObjectKey IdPvalidfrom = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*dQ3fQyT7H02cj2tVsLD0EA");
		private static readonly GlobalObjectKey IdSvalidfrom = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*CFuPzSR4DEar_9V2UrlXZg");
		private static readonly GlobalObjectKey IdEnvt_Rlvt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*tpIBrShyn06tSsseQuFlQw");
		private static readonly GlobalObjectKey IdProd_Alloc = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*i9dr5IY+YkiGyn_iDUGJbQ");
		private static readonly GlobalObjectKey IdQual_Dik = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*xZDUy+u+QkmkXY6dFCncSw");
		private static readonly GlobalObjectKey IdManu_Mat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*oOiOlufPAk+v+Az584XKhw");
		private static readonly GlobalObjectKey IdMfr_No = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*kHoMgS8Y406bsZ6ZENcbZw");
		private static readonly GlobalObjectKey IdInv_Mat_No = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*lcm2JoTGVUq4NGDs08daxA");
		private static readonly GlobalObjectKey IdManuf_Prof = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*ic16+pdVekGjgMrV1GaQTQ");
		private static readonly GlobalObjectKey IdHazmatprof = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Px3QmS_3Z0SLEKWZ6yccRQ");
		private static readonly GlobalObjectKey IdHigh_Visc = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*8beGtDAERkmH8jfdSosOeA");
		private static readonly GlobalObjectKey IdLooseorliq = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*6veovVcO+0OPoU5eaVal_w");
		private static readonly GlobalObjectKey IdClosed_Box = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Ob9OWkCqNUO_blffsZwYbw");
		private static readonly GlobalObjectKey IdAppd_B_Rec = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*5EC9owsDFEWKVcVhn2FFxg");
		private static readonly GlobalObjectKey IdMatcmpllvl = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*N+HTY_T4mUmFgUy5dtP1UQ");
		private static readonly GlobalObjectKey IdPar_Eff = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*4HoyIPme0U239F7dF3OjTQ");
		private static readonly GlobalObjectKey IdRound_Up_Rule_Expiration_Date = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*uk_OckenDEOqjEjddCtI3w");
		private static readonly GlobalObjectKey IdPeriod_Ind_Expiration_Date = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*J6uXG6CLHkG7RxH8o5r1Pw");
		private static readonly GlobalObjectKey IdProd_Composition_On_Packaging = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*T8vg_m1bUEmYgGW3aw1tRw");
		private static readonly GlobalObjectKey IdItem_Cat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*eM6BBbwjDUqI8yDclQ5Q_Q");
		private static readonly GlobalObjectKey IdHaz_Mat_No_External = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*so08AWF820uG5OEu4INmMQ");
		private static readonly GlobalObjectKey IdHaz_Mat_No_Guid = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*bcO7dmWMp0iVhI9daiQzbw");
		private static readonly GlobalObjectKey IdHaz_Mat_No_Version = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*QTex8H3kPESSsod2Sf2CCA");
		private static readonly GlobalObjectKey IdInv_Mat_No_External = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*sRk5415CK0qb3_eijRB3ww");
		private static readonly GlobalObjectKey IdInv_Mat_No_Guid = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*VCv8rYSwlkG5JWIw+JkuPQ");
		private static readonly GlobalObjectKey IdInv_Mat_No_Version = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*T_7N+SoYU0y4DBB4gQLj8Q");
		private static readonly GlobalObjectKey IdMaterial_Fixed = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*2CQ56TnD9Uu4RE6ak+EbXw");
		private static readonly GlobalObjectKey IdCm_Relevance_Flag = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*K69FXcuDKUKX0Ihuj0iBxg");
		private static readonly GlobalObjectKey IdSled_Bbd = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*5VZqT9GdiUOooNenZhtGdw");
		private static readonly GlobalObjectKey IdGtin_Variant = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*LYyjsUGsskqECKbz60D0IA");
		private static readonly GlobalObjectKey IdSerialization_Level = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Jz01u6n2sU+S7tL1Pt25vg");
		private static readonly GlobalObjectKey IdPl_Ref_Mat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*N+ewB6Lgw0KrXFYwqUqwHg");
		private static readonly GlobalObjectKey IdExtmatlgrp = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*hdFoxe4iW02BdGAHBwp7Cw");
		private static readonly GlobalObjectKey IdUomusage = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*ScfRpeasjEe0H+ogcicjUw");
		private static readonly GlobalObjectKey IdGds_Relevant = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*+Pb7ZksMek+u+SOkgCyeMw");
		private static readonly GlobalObjectKey IdMaterial_External = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*y51U3DheLkGWH29CT7GdRw");
		private static readonly GlobalObjectKey IdMaterial_Guid = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*i+Lu2k3Ed0yybnZSC1fmLw");
		private static readonly GlobalObjectKey IdMaterial_Version = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*f_LG7S9ZzU+J2_jPsE41Sw");
		private static readonly GlobalObjectKey IdConf_Matl_External = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*fmRPdqLMHki0HVxuTcTaQw");
		private static readonly GlobalObjectKey IdConf_Matl_Guid = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*NnxAhIUAf06OGDod_YIu5Q");
		private static readonly GlobalObjectKey IdConf_Matl_Version = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*WXvU4zerX0KjrtXNLgyVoA");
		private static readonly GlobalObjectKey IdPl_Ref_Mat_External = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*YABzJiJM40aeeiUdJL6t8Q");
		private static readonly GlobalObjectKey IdPl_Ref_Mat_Guid = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*AXT9x7E7aUyr39Vrs3v1Zw");
		private static readonly GlobalObjectKey IdPl_Ref_Mat_Version = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*pHhqAR5T4kOMd7MMghTcwQ");
		private static readonly GlobalObjectKey IdPr_Ref_Mat_External = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*oC6nFv1drUinA4ZoMUNDmg");
		private static readonly GlobalObjectKey IdPr_Ref_Mat_Guid = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*5qgKKAvpDUSBCEMHMPSDdQ");
		private static readonly GlobalObjectKey IdPr_Ref_Mat_Version = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*zPTORo_ioEyWJeCPvtv9jA");
		private static readonly GlobalObjectKey IdWe_Origin_Acceptance = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*rO41XWJ1c06nbEmkmJabug");
		private static readonly GlobalObjectKey IdStd_Hu_Type = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*OaOs3j0_tUazQZbJovNW5A");
		private static readonly GlobalObjectKey IdPilferable = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*GSRmWa2KA0arL9Kj7To1uQ");
		private static readonly GlobalObjectKey IdWhse_Storage_Condition = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*cy_tXyZa_0+CwDX+FDtR2Q");
		private static readonly GlobalObjectKey IdWhse_Material_Group = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*ZW33W09SJUmAD0sgKASG3g");
		private static readonly GlobalObjectKey IdHandling_Indicator = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Pc2FurjPJUKbQ6uLt9RhdQ");
		private static readonly GlobalObjectKey IdHaz_Mat_Relevant = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*bRYpvZc+C0KKAbghU0IwBg");
		private static readonly GlobalObjectKey IdHu_Type = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*8Dwt_eAKv0O2bjMP2GVpsg");
		private static readonly GlobalObjectKey IdVariable_Tare_Weight = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*KBg4vahTnU6N+Nb0KcKeQA");
		private static readonly GlobalObjectKey IdMax_Allowed_Capacity = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*V7QUEF_bSkqYrqlW+ycJzA");
		private static readonly GlobalObjectKey IdOvercapacity_Tolerance = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*PMG6JGpAIUWPf1TuQDucQQ");
		private static readonly GlobalObjectKey IdMax_Allowed_Length = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*2sowDqVIr0WxOsQabDa79A");
		private static readonly GlobalObjectKey IdMax_Allowed_Width = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*KqfOlQutXUCQ5y82yV0SwQ");
		private static readonly GlobalObjectKey IdMax_Allowed_Heigth = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*rZdPThwpSkuH5B7lzoo0TA");
		private static readonly GlobalObjectKey IdMax_Dimension_Un = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*oYBzn6V_j0mLyke7Hq+I1w");
		private static readonly GlobalObjectKey IdMax_Dimension_Un_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*uW_k0DhoikKWgJznf4n_8g");
		private static readonly GlobalObjectKey IdCountryori = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*WJrg4U+x4EmM3oOhO8xjOQ");
		private static readonly GlobalObjectKey IdCountryori_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*13eivWBpUEut8aDYBOedaQ");
		private static readonly GlobalObjectKey IdMatfrgtgrp = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*zMAqKaudWka2XgUpZ4VwYQ");
		private static readonly GlobalObjectKey IdQuarantine_Period = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*xMZ4U9vtmU+MY5cqTPmNUA");
		private static readonly GlobalObjectKey IdQuarantine_Period_Un = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*BAPag7tl2E6YiN0skZMvbQ");
		private static readonly GlobalObjectKey IdQuarantine_Period_Un_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*O7Ov94Mr60KPirsUwPIvkg");
		private static readonly GlobalObjectKey IdQuality_Insp_Grp = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*0pG7J_anWkiR6kNeYx4NhA");
		private static readonly GlobalObjectKey IdSerial_Number_Profile = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*KGXSLedFm06KncRAxnYWyg");
		private static readonly GlobalObjectKey IdEwm_Cw_Relevant = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*U7WUZAMXV0KzvrheNBHyJQ");
		private static readonly GlobalObjectKey IdEwm_Cw_Logistical_Unit = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*FkC_cALooEixGP9QxP_RDA");
		private static readonly GlobalObjectKey IdEwm_Cw_Logistical_Unit_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*rQrckcvYJkuZxcFR_NoBeQ");
		private static readonly GlobalObjectKey IdEwm_Cw_Tolerance_Group = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*wTHlZPDQtkSMwnm+Uzqt1Q");
		private static readonly GlobalObjectKey IdEwm_Cw_Input_Control = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*+1+3SXarNU25gAvSWdlgmw");
		private static readonly GlobalObjectKey IdPacod = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*O_AJFQdVwUqreEL32YWO1Q");
		private static readonly GlobalObjectKey IdDg_Pckging_Status = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*84d4XIYa0UuF8GZ1ZUbNhw");
		private static readonly GlobalObjectKey IdAdjust_Profile = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*4PtHBRTSR0WAqTrz3JMNgQ");
		private static readonly GlobalObjectKey IdIpmipproduct = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*LGI9hEEu40+t57a4jWFmYg");
		private static readonly GlobalObjectKey IdMedium = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*p67eAcgRS0G45xQgeoMaQQ");
		private static readonly GlobalObjectKey IdNsnid = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Cwyk6yioMUaDPJeCUkcdcA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Material")]
		public string ssMaterial;

		[System.Xml.Serialization.XmlElement("Ind_Sector")]
		public string ssInd_Sector;

		[System.Xml.Serialization.XmlElement("Matl_Type")]
		public string ssMatl_Type;

		[System.Xml.Serialization.XmlElement("Created_On")]
		public DateTime ssCreated_On;

		[System.Xml.Serialization.XmlElement("Created_By")]
		public string ssCreated_By;

		[System.Xml.Serialization.XmlElement("Last_Chnge")]
		public DateTime ssLast_Chnge;

		[System.Xml.Serialization.XmlElement("Changed_By")]
		public string ssChanged_By;

		[System.Xml.Serialization.XmlElement("Mat_Status")]
		public string ssMat_Status;

		[System.Xml.Serialization.XmlElement("Maint_Stat")]
		public string ssMaint_Stat;

		[System.Xml.Serialization.XmlElement("Del_Flag")]
		public string ssDel_Flag;

		[System.Xml.Serialization.XmlElement("Matl_Group")]
		public string ssMatl_Group;

		[System.Xml.Serialization.XmlElement("Old_Mat_No")]
		public string ssOld_Mat_No;

		[System.Xml.Serialization.XmlElement("Base_Uom")]
		public string ssBase_Uom;

		[System.Xml.Serialization.XmlElement("Base_Uom_Iso")]
		public string ssBase_Uom_Iso;

		[System.Xml.Serialization.XmlElement("Po_Unit")]
		public string ssPo_Unit;

		[System.Xml.Serialization.XmlElement("Po_Unit_Iso")]
		public string ssPo_Unit_Iso;

		[System.Xml.Serialization.XmlElement("Document")]
		public string ssDocument;

		[System.Xml.Serialization.XmlElement("Doc_Type")]
		public string ssDoc_Type;

		[System.Xml.Serialization.XmlElement("Doc_Vers")]
		public string ssDoc_Vers;

		[System.Xml.Serialization.XmlElement("Doc_Format")]
		public string ssDoc_Format;

		[System.Xml.Serialization.XmlElement("Doc_Chg_No")]
		public string ssDoc_Chg_No;

		[System.Xml.Serialization.XmlElement("Page_No")]
		public string ssPage_No;

		[System.Xml.Serialization.XmlElement("No_Sheets")]
		public string ssNo_Sheets;

		[System.Xml.Serialization.XmlElement("Prod_Memo")]
		public string ssProd_Memo;

		[System.Xml.Serialization.XmlElement("Pageformat")]
		public string ssPageformat;

		[System.Xml.Serialization.XmlElement("Size_Dim")]
		public string ssSize_Dim;

		[System.Xml.Serialization.XmlElement("Basic_Matl")]
		public string ssBasic_Matl;

		[System.Xml.Serialization.XmlElement("Std_Descr")]
		public string ssStd_Descr;

		[System.Xml.Serialization.XmlElement("Dsn_Office")]
		public string ssDsn_Office;

		[System.Xml.Serialization.XmlElement("Pur_Valkey")]
		public string ssPur_Valkey;

		[System.Xml.Serialization.XmlElement("Net_Weight")]
		public decimal ssNet_Weight;

		[System.Xml.Serialization.XmlElement("Unit_Of_Wt")]
		public string ssUnit_Of_Wt;

		[System.Xml.Serialization.XmlElement("Unit_Of_Wt_Iso")]
		public string ssUnit_Of_Wt_Iso;

		[System.Xml.Serialization.XmlElement("Container")]
		public string ssContainer;

		[System.Xml.Serialization.XmlElement("Stor_Conds")]
		public string ssStor_Conds;

		[System.Xml.Serialization.XmlElement("Temp_Conds")]
		public string ssTemp_Conds;

		[System.Xml.Serialization.XmlElement("Trans_Grp")]
		public string ssTrans_Grp;

		[System.Xml.Serialization.XmlElement("Haz_Mat_No")]
		public string ssHaz_Mat_No;

		[System.Xml.Serialization.XmlElement("Division")]
		public string ssDivision;

		[System.Xml.Serialization.XmlElement("Competitor")]
		public string ssCompetitor;

		[System.Xml.Serialization.XmlElement("Qty_Gr_Gi")]
		public decimal ssQty_Gr_Gi;

		[System.Xml.Serialization.XmlElement("Proc_Rule")]
		public string ssProc_Rule;

		[System.Xml.Serialization.XmlElement("Sup_Source")]
		public string ssSup_Source;

		[System.Xml.Serialization.XmlElement("Season")]
		public string ssSeason;

		[System.Xml.Serialization.XmlElement("Label_Type")]
		public string ssLabel_Type;

		[System.Xml.Serialization.XmlElement("Label_Form")]
		public string ssLabel_Form;

		[System.Xml.Serialization.XmlElement("Prod_Hier")]
		public string ssProd_Hier;

		[System.Xml.Serialization.XmlElement("Cad_Id")]
		public string ssCad_Id;

		[System.Xml.Serialization.XmlElement("Allowed_Wt")]
		public decimal ssAllowed_Wt;

		[System.Xml.Serialization.XmlElement("Pack_Wt_Un")]
		public string ssPack_Wt_Un;

		[System.Xml.Serialization.XmlElement("Pack_Wt_Un_Iso")]
		public string ssPack_Wt_Un_Iso;

		[System.Xml.Serialization.XmlElement("Allwd_Vol")]
		public decimal ssAllwd_Vol;

		[System.Xml.Serialization.XmlElement("Pack_Vo_Un")]
		public string ssPack_Vo_Un;

		[System.Xml.Serialization.XmlElement("Pack_Vo_Un_Iso")]
		public string ssPack_Vo_Un_Iso;

		[System.Xml.Serialization.XmlElement("Wt_Tol_Lt")]
		public decimal ssWt_Tol_Lt;

		[System.Xml.Serialization.XmlElement("Vol_Tol_Lt")]
		public decimal ssVol_Tol_Lt;

		[System.Xml.Serialization.XmlElement("Var_Ord_Un")]
		public string ssVar_Ord_Un;

		[System.Xml.Serialization.XmlElement("Configured")]
		public string ssConfigured;

		[System.Xml.Serialization.XmlElement("Batch_Mgmt")]
		public string ssBatch_Mgmt;

		[System.Xml.Serialization.XmlElement("Sh_Mat_Typ")]
		public string ssSh_Mat_Typ;

		[System.Xml.Serialization.XmlElement("Fill_Level")]
		public decimal ssFill_Level;

		[System.Xml.Serialization.XmlElement("Stack_Fact")]
		public int ssStack_Fact;

		[System.Xml.Serialization.XmlElement("Mat_Grp_Sm")]
		public string ssMat_Grp_Sm;

		[System.Xml.Serialization.XmlElement("Authoritygroup")]
		public string ssAuthoritygroup;

		[System.Xml.Serialization.XmlElement("Qm_Procmnt")]
		public string ssQm_Procmnt;

		[System.Xml.Serialization.XmlElement("Catprofile")]
		public string ssCatprofile;

		[System.Xml.Serialization.XmlElement("Minremlife")]
		public decimal ssMinremlife;

		[System.Xml.Serialization.XmlElement("Shelf_Life")]
		public decimal ssShelf_Life;

		[System.Xml.Serialization.XmlElement("Stor_Pct")]
		public decimal ssStor_Pct;

		[System.Xml.Serialization.XmlElement("Conf_Matl")]
		public string ssConf_Matl;

		[System.Xml.Serialization.XmlElement("Co_Product")]
		public string ssCo_Product;

		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat")]
		public string ssPr_Ref_Mat;

		[System.Xml.Serialization.XmlElement("Pur_Status")]
		public string ssPur_Status;

		[System.Xml.Serialization.XmlElement("Sal_Status")]
		public string ssSal_Status;

		[System.Xml.Serialization.XmlElement("Pvalidfrom")]
		public DateTime ssPvalidfrom;

		[System.Xml.Serialization.XmlElement("Svalidfrom")]
		public DateTime ssSvalidfrom;

		[System.Xml.Serialization.XmlElement("Envt_Rlvt")]
		public string ssEnvt_Rlvt;

		[System.Xml.Serialization.XmlElement("Prod_Alloc")]
		public string ssProd_Alloc;

		[System.Xml.Serialization.XmlElement("Qual_Dik")]
		public string ssQual_Dik;

		[System.Xml.Serialization.XmlElement("Manu_Mat")]
		public string ssManu_Mat;

		[System.Xml.Serialization.XmlElement("Mfr_No")]
		public string ssMfr_No;

		[System.Xml.Serialization.XmlElement("Inv_Mat_No")]
		public string ssInv_Mat_No;

		[System.Xml.Serialization.XmlElement("Manuf_Prof")]
		public string ssManuf_Prof;

		[System.Xml.Serialization.XmlElement("Hazmatprof")]
		public string ssHazmatprof;

		[System.Xml.Serialization.XmlElement("High_Visc")]
		public string ssHigh_Visc;

		[System.Xml.Serialization.XmlElement("Looseorliq")]
		public string ssLooseorliq;

		[System.Xml.Serialization.XmlElement("Closed_Box")]
		public string ssClosed_Box;

		[System.Xml.Serialization.XmlElement("Appd_B_Rec")]
		public string ssAppd_B_Rec;

		[System.Xml.Serialization.XmlElement("Matcmpllvl")]
		public string ssMatcmpllvl;

		[System.Xml.Serialization.XmlElement("Par_Eff")]
		public string ssPar_Eff;

		[System.Xml.Serialization.XmlElement("Round_Up_Rule_Expiration_Date")]
		public string ssRound_Up_Rule_Expiration_Date;

		[System.Xml.Serialization.XmlElement("Period_Ind_Expiration_Date")]
		public string ssPeriod_Ind_Expiration_Date;

		[System.Xml.Serialization.XmlElement("Prod_Composition_On_Packaging")]
		public string ssProd_Composition_On_Packaging;

		[System.Xml.Serialization.XmlElement("Item_Cat")]
		public string ssItem_Cat;

		[System.Xml.Serialization.XmlElement("Haz_Mat_No_External")]
		public string ssHaz_Mat_No_External;

		[System.Xml.Serialization.XmlElement("Haz_Mat_No_Guid")]
		public string ssHaz_Mat_No_Guid;

		[System.Xml.Serialization.XmlElement("Haz_Mat_No_Version")]
		public string ssHaz_Mat_No_Version;

		[System.Xml.Serialization.XmlElement("Inv_Mat_No_External")]
		public string ssInv_Mat_No_External;

		[System.Xml.Serialization.XmlElement("Inv_Mat_No_Guid")]
		public string ssInv_Mat_No_Guid;

		[System.Xml.Serialization.XmlElement("Inv_Mat_No_Version")]
		public string ssInv_Mat_No_Version;

		[System.Xml.Serialization.XmlElement("Material_Fixed")]
		public string ssMaterial_Fixed;

		[System.Xml.Serialization.XmlElement("Cm_Relevance_Flag")]
		public string ssCm_Relevance_Flag;

		[System.Xml.Serialization.XmlElement("Sled_Bbd")]
		public string ssSled_Bbd;

		[System.Xml.Serialization.XmlElement("Gtin_Variant")]
		public string ssGtin_Variant;

		[System.Xml.Serialization.XmlElement("Serialization_Level")]
		public string ssSerialization_Level;

		[System.Xml.Serialization.XmlElement("Pl_Ref_Mat")]
		public string ssPl_Ref_Mat;

		[System.Xml.Serialization.XmlElement("Extmatlgrp")]
		public string ssExtmatlgrp;

		[System.Xml.Serialization.XmlElement("Uomusage")]
		public string ssUomusage;

		[System.Xml.Serialization.XmlElement("Gds_Relevant")]
		public string ssGds_Relevant;

		[System.Xml.Serialization.XmlElement("Material_External")]
		public string ssMaterial_External;

		[System.Xml.Serialization.XmlElement("Material_Guid")]
		public string ssMaterial_Guid;

		[System.Xml.Serialization.XmlElement("Material_Version")]
		public string ssMaterial_Version;

		[System.Xml.Serialization.XmlElement("Conf_Matl_External")]
		public string ssConf_Matl_External;

		[System.Xml.Serialization.XmlElement("Conf_Matl_Guid")]
		public string ssConf_Matl_Guid;

		[System.Xml.Serialization.XmlElement("Conf_Matl_Version")]
		public string ssConf_Matl_Version;

		[System.Xml.Serialization.XmlElement("Pl_Ref_Mat_External")]
		public string ssPl_Ref_Mat_External;

		[System.Xml.Serialization.XmlElement("Pl_Ref_Mat_Guid")]
		public string ssPl_Ref_Mat_Guid;

		[System.Xml.Serialization.XmlElement("Pl_Ref_Mat_Version")]
		public string ssPl_Ref_Mat_Version;

		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_External")]
		public string ssPr_Ref_Mat_External;

		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_Guid")]
		public string ssPr_Ref_Mat_Guid;

		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_Version")]
		public string ssPr_Ref_Mat_Version;

		[System.Xml.Serialization.XmlElement("We_Origin_Acceptance")]
		public string ssWe_Origin_Acceptance;

		[System.Xml.Serialization.XmlElement("Std_Hu_Type")]
		public string ssStd_Hu_Type;

		[System.Xml.Serialization.XmlElement("Pilferable")]
		public string ssPilferable;

		[System.Xml.Serialization.XmlElement("Whse_Storage_Condition")]
		public string ssWhse_Storage_Condition;

		[System.Xml.Serialization.XmlElement("Whse_Material_Group")]
		public string ssWhse_Material_Group;

		[System.Xml.Serialization.XmlElement("Handling_Indicator")]
		public string ssHandling_Indicator;

		[System.Xml.Serialization.XmlElement("Haz_Mat_Relevant")]
		public string ssHaz_Mat_Relevant;

		[System.Xml.Serialization.XmlElement("Hu_Type")]
		public string ssHu_Type;

		[System.Xml.Serialization.XmlElement("Variable_Tare_Weight")]
		public string ssVariable_Tare_Weight;

		[System.Xml.Serialization.XmlElement("Max_Allowed_Capacity")]
		public decimal ssMax_Allowed_Capacity;

		[System.Xml.Serialization.XmlElement("Overcapacity_Tolerance")]
		public decimal ssOvercapacity_Tolerance;

		[System.Xml.Serialization.XmlElement("Max_Allowed_Length")]
		public decimal ssMax_Allowed_Length;

		[System.Xml.Serialization.XmlElement("Max_Allowed_Width")]
		public decimal ssMax_Allowed_Width;

		[System.Xml.Serialization.XmlElement("Max_Allowed_Heigth")]
		public decimal ssMax_Allowed_Heigth;

		[System.Xml.Serialization.XmlElement("Max_Dimension_Un")]
		public string ssMax_Dimension_Un;

		[System.Xml.Serialization.XmlElement("Max_Dimension_Un_Iso")]
		public string ssMax_Dimension_Un_Iso;

		[System.Xml.Serialization.XmlElement("Countryori")]
		public string ssCountryori;

		[System.Xml.Serialization.XmlElement("Countryori_Iso")]
		public string ssCountryori_Iso;

		[System.Xml.Serialization.XmlElement("Matfrgtgrp")]
		public string ssMatfrgtgrp;

		[System.Xml.Serialization.XmlElement("Quarantine_Period")]
		public decimal ssQuarantine_Period;

		[System.Xml.Serialization.XmlElement("Quarantine_Period_Un")]
		public string ssQuarantine_Period_Un;

		[System.Xml.Serialization.XmlElement("Quarantine_Period_Un_Iso")]
		public string ssQuarantine_Period_Un_Iso;

		[System.Xml.Serialization.XmlElement("Quality_Insp_Grp")]
		public string ssQuality_Insp_Grp;

		[System.Xml.Serialization.XmlElement("Serial_Number_Profile")]
		public string ssSerial_Number_Profile;

		[System.Xml.Serialization.XmlElement("Ewm_Cw_Relevant")]
		public string ssEwm_Cw_Relevant;

		[System.Xml.Serialization.XmlElement("Ewm_Cw_Logistical_Unit")]
		public string ssEwm_Cw_Logistical_Unit;

		[System.Xml.Serialization.XmlElement("Ewm_Cw_Logistical_Unit_Iso")]
		public string ssEwm_Cw_Logistical_Unit_Iso;

		[System.Xml.Serialization.XmlElement("Ewm_Cw_Tolerance_Group")]
		public string ssEwm_Cw_Tolerance_Group;

		[System.Xml.Serialization.XmlElement("Ewm_Cw_Input_Control")]
		public string ssEwm_Cw_Input_Control;

		[System.Xml.Serialization.XmlElement("Pacod")]
		public string ssPacod;

		[System.Xml.Serialization.XmlElement("Dg_Pckging_Status")]
		public string ssDg_Pckging_Status;

		[System.Xml.Serialization.XmlElement("Adjust_Profile")]
		public string ssAdjust_Profile;

		[System.Xml.Serialization.XmlElement("Ipmipproduct")]
		public string ssIpmipproduct;

		[System.Xml.Serialization.XmlElement("Medium")]
		public string ssMedium;

		[System.Xml.Serialization.XmlElement("Nsnid")]
		public string ssNsnid;


		public BitArray OptimizedAttributes;

		public STClientdataStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssMaterial = "";
			ssInd_Sector = "";
			ssMatl_Type = "";
			ssCreated_On = new DateTime(1900, 1, 1, 0, 0, 0);
			ssCreated_By = "";
			ssLast_Chnge = new DateTime(1900, 1, 1, 0, 0, 0);
			ssChanged_By = "";
			ssMat_Status = "";
			ssMaint_Stat = "";
			ssDel_Flag = "";
			ssMatl_Group = "";
			ssOld_Mat_No = "";
			ssBase_Uom = "";
			ssBase_Uom_Iso = "";
			ssPo_Unit = "";
			ssPo_Unit_Iso = "";
			ssDocument = "";
			ssDoc_Type = "";
			ssDoc_Vers = "";
			ssDoc_Format = "";
			ssDoc_Chg_No = "";
			ssPage_No = "";
			ssNo_Sheets = "";
			ssProd_Memo = "";
			ssPageformat = "";
			ssSize_Dim = "";
			ssBasic_Matl = "";
			ssStd_Descr = "";
			ssDsn_Office = "";
			ssPur_Valkey = "";
			ssNet_Weight = 0.0M;
			ssUnit_Of_Wt = "";
			ssUnit_Of_Wt_Iso = "";
			ssContainer = "";
			ssStor_Conds = "";
			ssTemp_Conds = "";
			ssTrans_Grp = "";
			ssHaz_Mat_No = "";
			ssDivision = "";
			ssCompetitor = "";
			ssQty_Gr_Gi = 0.0M;
			ssProc_Rule = "";
			ssSup_Source = "";
			ssSeason = "";
			ssLabel_Type = "";
			ssLabel_Form = "";
			ssProd_Hier = "";
			ssCad_Id = "";
			ssAllowed_Wt = 0.0M;
			ssPack_Wt_Un = "";
			ssPack_Wt_Un_Iso = "";
			ssAllwd_Vol = 0.0M;
			ssPack_Vo_Un = "";
			ssPack_Vo_Un_Iso = "";
			ssWt_Tol_Lt = 0.0M;
			ssVol_Tol_Lt = 0.0M;
			ssVar_Ord_Un = "";
			ssConfigured = "";
			ssBatch_Mgmt = "";
			ssSh_Mat_Typ = "";
			ssFill_Level = 0.0M;
			ssStack_Fact = 0;
			ssMat_Grp_Sm = "";
			ssAuthoritygroup = "";
			ssQm_Procmnt = "";
			ssCatprofile = "";
			ssMinremlife = 0.0M;
			ssShelf_Life = 0.0M;
			ssStor_Pct = 0.0M;
			ssConf_Matl = "";
			ssCo_Product = "";
			ssPr_Ref_Mat = "";
			ssPur_Status = "";
			ssSal_Status = "";
			ssPvalidfrom = new DateTime(1900, 1, 1, 0, 0, 0);
			ssSvalidfrom = new DateTime(1900, 1, 1, 0, 0, 0);
			ssEnvt_Rlvt = "";
			ssProd_Alloc = "";
			ssQual_Dik = "";
			ssManu_Mat = "";
			ssMfr_No = "";
			ssInv_Mat_No = "";
			ssManuf_Prof = "";
			ssHazmatprof = "";
			ssHigh_Visc = "";
			ssLooseorliq = "";
			ssClosed_Box = "";
			ssAppd_B_Rec = "";
			ssMatcmpllvl = "";
			ssPar_Eff = "";
			ssRound_Up_Rule_Expiration_Date = "";
			ssPeriod_Ind_Expiration_Date = "";
			ssProd_Composition_On_Packaging = "";
			ssItem_Cat = "";
			ssHaz_Mat_No_External = "";
			ssHaz_Mat_No_Guid = "";
			ssHaz_Mat_No_Version = "";
			ssInv_Mat_No_External = "";
			ssInv_Mat_No_Guid = "";
			ssInv_Mat_No_Version = "";
			ssMaterial_Fixed = "";
			ssCm_Relevance_Flag = "";
			ssSled_Bbd = "";
			ssGtin_Variant = "";
			ssSerialization_Level = "";
			ssPl_Ref_Mat = "";
			ssExtmatlgrp = "";
			ssUomusage = "";
			ssGds_Relevant = "";
			ssMaterial_External = "";
			ssMaterial_Guid = "";
			ssMaterial_Version = "";
			ssConf_Matl_External = "";
			ssConf_Matl_Guid = "";
			ssConf_Matl_Version = "";
			ssPl_Ref_Mat_External = "";
			ssPl_Ref_Mat_Guid = "";
			ssPl_Ref_Mat_Version = "";
			ssPr_Ref_Mat_External = "";
			ssPr_Ref_Mat_Guid = "";
			ssPr_Ref_Mat_Version = "";
			ssWe_Origin_Acceptance = "";
			ssStd_Hu_Type = "";
			ssPilferable = "";
			ssWhse_Storage_Condition = "";
			ssWhse_Material_Group = "";
			ssHandling_Indicator = "";
			ssHaz_Mat_Relevant = "";
			ssHu_Type = "";
			ssVariable_Tare_Weight = "";
			ssMax_Allowed_Capacity = 0.0M;
			ssOvercapacity_Tolerance = 0.0M;
			ssMax_Allowed_Length = 0.0M;
			ssMax_Allowed_Width = 0.0M;
			ssMax_Allowed_Heigth = 0.0M;
			ssMax_Dimension_Un = "";
			ssMax_Dimension_Un_Iso = "";
			ssCountryori = "";
			ssCountryori_Iso = "";
			ssMatfrgtgrp = "";
			ssQuarantine_Period = 0.0M;
			ssQuarantine_Period_Un = "";
			ssQuarantine_Period_Un_Iso = "";
			ssQuality_Insp_Grp = "";
			ssSerial_Number_Profile = "";
			ssEwm_Cw_Relevant = "";
			ssEwm_Cw_Logistical_Unit = "";
			ssEwm_Cw_Logistical_Unit_Iso = "";
			ssEwm_Cw_Tolerance_Group = "";
			ssEwm_Cw_Input_Control = "";
			ssPacod = "";
			ssDg_Pckging_Status = "";
			ssAdjust_Profile = "";
			ssIpmipproduct = "";
			ssMedium = "";
			ssNsnid = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssMaterial = r.ReadText(index++, "Clientdata.Material", "");
			ssInd_Sector = r.ReadText(index++, "Clientdata.Ind_Sector", "");
			ssMatl_Type = r.ReadText(index++, "Clientdata.Matl_Type", "");
			ssCreated_On = r.ReadDate(index++, "Clientdata.Created_On", new DateTime(1900, 1, 1, 0, 0, 0));
			ssCreated_By = r.ReadText(index++, "Clientdata.Created_By", "");
			ssLast_Chnge = r.ReadDate(index++, "Clientdata.Last_Chnge", new DateTime(1900, 1, 1, 0, 0, 0));
			ssChanged_By = r.ReadText(index++, "Clientdata.Changed_By", "");
			ssMat_Status = r.ReadText(index++, "Clientdata.Mat_Status", "");
			ssMaint_Stat = r.ReadText(index++, "Clientdata.Maint_Stat", "");
			ssDel_Flag = r.ReadText(index++, "Clientdata.Del_Flag", "");
			ssMatl_Group = r.ReadText(index++, "Clientdata.Matl_Group", "");
			ssOld_Mat_No = r.ReadText(index++, "Clientdata.Old_Mat_No", "");
			ssBase_Uom = r.ReadText(index++, "Clientdata.Base_Uom", "");
			ssBase_Uom_Iso = r.ReadText(index++, "Clientdata.Base_Uom_Iso", "");
			ssPo_Unit = r.ReadText(index++, "Clientdata.Po_Unit", "");
			ssPo_Unit_Iso = r.ReadText(index++, "Clientdata.Po_Unit_Iso", "");
			ssDocument = r.ReadText(index++, "Clientdata.Document", "");
			ssDoc_Type = r.ReadText(index++, "Clientdata.Doc_Type", "");
			ssDoc_Vers = r.ReadText(index++, "Clientdata.Doc_Vers", "");
			ssDoc_Format = r.ReadText(index++, "Clientdata.Doc_Format", "");
			ssDoc_Chg_No = r.ReadText(index++, "Clientdata.Doc_Chg_No", "");
			ssPage_No = r.ReadText(index++, "Clientdata.Page_No", "");
			ssNo_Sheets = r.ReadText(index++, "Clientdata.No_Sheets", "");
			ssProd_Memo = r.ReadText(index++, "Clientdata.Prod_Memo", "");
			ssPageformat = r.ReadText(index++, "Clientdata.Pageformat", "");
			ssSize_Dim = r.ReadText(index++, "Clientdata.Size_Dim", "");
			ssBasic_Matl = r.ReadText(index++, "Clientdata.Basic_Matl", "");
			ssStd_Descr = r.ReadText(index++, "Clientdata.Std_Descr", "");
			ssDsn_Office = r.ReadText(index++, "Clientdata.Dsn_Office", "");
			ssPur_Valkey = r.ReadText(index++, "Clientdata.Pur_Valkey", "");
			ssNet_Weight = r.ReadDecimal(index++, "Clientdata.Net_Weight", 0.0M);
			ssUnit_Of_Wt = r.ReadText(index++, "Clientdata.Unit_Of_Wt", "");
			ssUnit_Of_Wt_Iso = r.ReadText(index++, "Clientdata.Unit_Of_Wt_Iso", "");
			ssContainer = r.ReadText(index++, "Clientdata.Container", "");
			ssStor_Conds = r.ReadText(index++, "Clientdata.Stor_Conds", "");
			ssTemp_Conds = r.ReadText(index++, "Clientdata.Temp_Conds", "");
			ssTrans_Grp = r.ReadText(index++, "Clientdata.Trans_Grp", "");
			ssHaz_Mat_No = r.ReadText(index++, "Clientdata.Haz_Mat_No", "");
			ssDivision = r.ReadText(index++, "Clientdata.Division", "");
			ssCompetitor = r.ReadText(index++, "Clientdata.Competitor", "");
			ssQty_Gr_Gi = r.ReadDecimal(index++, "Clientdata.Qty_Gr_Gi", 0.0M);
			ssProc_Rule = r.ReadText(index++, "Clientdata.Proc_Rule", "");
			ssSup_Source = r.ReadText(index++, "Clientdata.Sup_Source", "");
			ssSeason = r.ReadText(index++, "Clientdata.Season", "");
			ssLabel_Type = r.ReadText(index++, "Clientdata.Label_Type", "");
			ssLabel_Form = r.ReadText(index++, "Clientdata.Label_Form", "");
			ssProd_Hier = r.ReadText(index++, "Clientdata.Prod_Hier", "");
			ssCad_Id = r.ReadText(index++, "Clientdata.Cad_Id", "");
			ssAllowed_Wt = r.ReadDecimal(index++, "Clientdata.Allowed_Wt", 0.0M);
			ssPack_Wt_Un = r.ReadText(index++, "Clientdata.Pack_Wt_Un", "");
			ssPack_Wt_Un_Iso = r.ReadText(index++, "Clientdata.Pack_Wt_Un_Iso", "");
			ssAllwd_Vol = r.ReadDecimal(index++, "Clientdata.Allwd_Vol", 0.0M);
			ssPack_Vo_Un = r.ReadText(index++, "Clientdata.Pack_Vo_Un", "");
			ssPack_Vo_Un_Iso = r.ReadText(index++, "Clientdata.Pack_Vo_Un_Iso", "");
			ssWt_Tol_Lt = r.ReadDecimal(index++, "Clientdata.Wt_Tol_Lt", 0.0M);
			ssVol_Tol_Lt = r.ReadDecimal(index++, "Clientdata.Vol_Tol_Lt", 0.0M);
			ssVar_Ord_Un = r.ReadText(index++, "Clientdata.Var_Ord_Un", "");
			ssConfigured = r.ReadText(index++, "Clientdata.Configured", "");
			ssBatch_Mgmt = r.ReadText(index++, "Clientdata.Batch_Mgmt", "");
			ssSh_Mat_Typ = r.ReadText(index++, "Clientdata.Sh_Mat_Typ", "");
			ssFill_Level = r.ReadDecimal(index++, "Clientdata.Fill_Level", 0.0M);
			ssStack_Fact = r.ReadInteger(index++, "Clientdata.Stack_Fact", 0);
			ssMat_Grp_Sm = r.ReadText(index++, "Clientdata.Mat_Grp_Sm", "");
			ssAuthoritygroup = r.ReadText(index++, "Clientdata.Authoritygroup", "");
			ssQm_Procmnt = r.ReadText(index++, "Clientdata.Qm_Procmnt", "");
			ssCatprofile = r.ReadText(index++, "Clientdata.Catprofile", "");
			ssMinremlife = r.ReadDecimal(index++, "Clientdata.Minremlife", 0.0M);
			ssShelf_Life = r.ReadDecimal(index++, "Clientdata.Shelf_Life", 0.0M);
			ssStor_Pct = r.ReadDecimal(index++, "Clientdata.Stor_Pct", 0.0M);
			ssConf_Matl = r.ReadText(index++, "Clientdata.Conf_Matl", "");
			ssCo_Product = r.ReadText(index++, "Clientdata.Co_Product", "");
			ssPr_Ref_Mat = r.ReadText(index++, "Clientdata.Pr_Ref_Mat", "");
			ssPur_Status = r.ReadText(index++, "Clientdata.Pur_Status", "");
			ssSal_Status = r.ReadText(index++, "Clientdata.Sal_Status", "");
			ssPvalidfrom = r.ReadDate(index++, "Clientdata.Pvalidfrom", new DateTime(1900, 1, 1, 0, 0, 0));
			ssSvalidfrom = r.ReadDate(index++, "Clientdata.Svalidfrom", new DateTime(1900, 1, 1, 0, 0, 0));
			ssEnvt_Rlvt = r.ReadText(index++, "Clientdata.Envt_Rlvt", "");
			ssProd_Alloc = r.ReadText(index++, "Clientdata.Prod_Alloc", "");
			ssQual_Dik = r.ReadText(index++, "Clientdata.Qual_Dik", "");
			ssManu_Mat = r.ReadText(index++, "Clientdata.Manu_Mat", "");
			ssMfr_No = r.ReadText(index++, "Clientdata.Mfr_No", "");
			ssInv_Mat_No = r.ReadText(index++, "Clientdata.Inv_Mat_No", "");
			ssManuf_Prof = r.ReadText(index++, "Clientdata.Manuf_Prof", "");
			ssHazmatprof = r.ReadText(index++, "Clientdata.Hazmatprof", "");
			ssHigh_Visc = r.ReadText(index++, "Clientdata.High_Visc", "");
			ssLooseorliq = r.ReadText(index++, "Clientdata.Looseorliq", "");
			ssClosed_Box = r.ReadText(index++, "Clientdata.Closed_Box", "");
			ssAppd_B_Rec = r.ReadText(index++, "Clientdata.Appd_B_Rec", "");
			ssMatcmpllvl = r.ReadText(index++, "Clientdata.Matcmpllvl", "");
			ssPar_Eff = r.ReadText(index++, "Clientdata.Par_Eff", "");
			ssRound_Up_Rule_Expiration_Date = r.ReadText(index++, "Clientdata.Round_Up_Rule_Expiration_Date", "");
			ssPeriod_Ind_Expiration_Date = r.ReadText(index++, "Clientdata.Period_Ind_Expiration_Date", "");
			ssProd_Composition_On_Packaging = r.ReadText(index++, "Clientdata.Prod_Composition_On_Packaging", "");
			ssItem_Cat = r.ReadText(index++, "Clientdata.Item_Cat", "");
			ssHaz_Mat_No_External = r.ReadText(index++, "Clientdata.Haz_Mat_No_External", "");
			ssHaz_Mat_No_Guid = r.ReadText(index++, "Clientdata.Haz_Mat_No_Guid", "");
			ssHaz_Mat_No_Version = r.ReadText(index++, "Clientdata.Haz_Mat_No_Version", "");
			ssInv_Mat_No_External = r.ReadText(index++, "Clientdata.Inv_Mat_No_External", "");
			ssInv_Mat_No_Guid = r.ReadText(index++, "Clientdata.Inv_Mat_No_Guid", "");
			ssInv_Mat_No_Version = r.ReadText(index++, "Clientdata.Inv_Mat_No_Version", "");
			ssMaterial_Fixed = r.ReadText(index++, "Clientdata.Material_Fixed", "");
			ssCm_Relevance_Flag = r.ReadText(index++, "Clientdata.Cm_Relevance_Flag", "");
			ssSled_Bbd = r.ReadText(index++, "Clientdata.Sled_Bbd", "");
			ssGtin_Variant = r.ReadText(index++, "Clientdata.Gtin_Variant", "");
			ssSerialization_Level = r.ReadText(index++, "Clientdata.Serialization_Level", "");
			ssPl_Ref_Mat = r.ReadText(index++, "Clientdata.Pl_Ref_Mat", "");
			ssExtmatlgrp = r.ReadText(index++, "Clientdata.Extmatlgrp", "");
			ssUomusage = r.ReadText(index++, "Clientdata.Uomusage", "");
			ssGds_Relevant = r.ReadText(index++, "Clientdata.Gds_Relevant", "");
			ssMaterial_External = r.ReadText(index++, "Clientdata.Material_External", "");
			ssMaterial_Guid = r.ReadText(index++, "Clientdata.Material_Guid", "");
			ssMaterial_Version = r.ReadText(index++, "Clientdata.Material_Version", "");
			ssConf_Matl_External = r.ReadText(index++, "Clientdata.Conf_Matl_External", "");
			ssConf_Matl_Guid = r.ReadText(index++, "Clientdata.Conf_Matl_Guid", "");
			ssConf_Matl_Version = r.ReadText(index++, "Clientdata.Conf_Matl_Version", "");
			ssPl_Ref_Mat_External = r.ReadText(index++, "Clientdata.Pl_Ref_Mat_External", "");
			ssPl_Ref_Mat_Guid = r.ReadText(index++, "Clientdata.Pl_Ref_Mat_Guid", "");
			ssPl_Ref_Mat_Version = r.ReadText(index++, "Clientdata.Pl_Ref_Mat_Version", "");
			ssPr_Ref_Mat_External = r.ReadText(index++, "Clientdata.Pr_Ref_Mat_External", "");
			ssPr_Ref_Mat_Guid = r.ReadText(index++, "Clientdata.Pr_Ref_Mat_Guid", "");
			ssPr_Ref_Mat_Version = r.ReadText(index++, "Clientdata.Pr_Ref_Mat_Version", "");
			ssWe_Origin_Acceptance = r.ReadText(index++, "Clientdata.We_Origin_Acceptance", "");
			ssStd_Hu_Type = r.ReadText(index++, "Clientdata.Std_Hu_Type", "");
			ssPilferable = r.ReadText(index++, "Clientdata.Pilferable", "");
			ssWhse_Storage_Condition = r.ReadText(index++, "Clientdata.Whse_Storage_Condition", "");
			ssWhse_Material_Group = r.ReadText(index++, "Clientdata.Whse_Material_Group", "");
			ssHandling_Indicator = r.ReadText(index++, "Clientdata.Handling_Indicator", "");
			ssHaz_Mat_Relevant = r.ReadText(index++, "Clientdata.Haz_Mat_Relevant", "");
			ssHu_Type = r.ReadText(index++, "Clientdata.Hu_Type", "");
			ssVariable_Tare_Weight = r.ReadText(index++, "Clientdata.Variable_Tare_Weight", "");
			ssMax_Allowed_Capacity = r.ReadDecimal(index++, "Clientdata.Max_Allowed_Capacity", 0.0M);
			ssOvercapacity_Tolerance = r.ReadDecimal(index++, "Clientdata.Overcapacity_Tolerance", 0.0M);
			ssMax_Allowed_Length = r.ReadDecimal(index++, "Clientdata.Max_Allowed_Length", 0.0M);
			ssMax_Allowed_Width = r.ReadDecimal(index++, "Clientdata.Max_Allowed_Width", 0.0M);
			ssMax_Allowed_Heigth = r.ReadDecimal(index++, "Clientdata.Max_Allowed_Heigth", 0.0M);
			ssMax_Dimension_Un = r.ReadText(index++, "Clientdata.Max_Dimension_Un", "");
			ssMax_Dimension_Un_Iso = r.ReadText(index++, "Clientdata.Max_Dimension_Un_Iso", "");
			ssCountryori = r.ReadText(index++, "Clientdata.Countryori", "");
			ssCountryori_Iso = r.ReadText(index++, "Clientdata.Countryori_Iso", "");
			ssMatfrgtgrp = r.ReadText(index++, "Clientdata.Matfrgtgrp", "");
			ssQuarantine_Period = r.ReadDecimal(index++, "Clientdata.Quarantine_Period", 0.0M);
			ssQuarantine_Period_Un = r.ReadText(index++, "Clientdata.Quarantine_Period_Un", "");
			ssQuarantine_Period_Un_Iso = r.ReadText(index++, "Clientdata.Quarantine_Period_Un_Iso", "");
			ssQuality_Insp_Grp = r.ReadText(index++, "Clientdata.Quality_Insp_Grp", "");
			ssSerial_Number_Profile = r.ReadText(index++, "Clientdata.Serial_Number_Profile", "");
			ssEwm_Cw_Relevant = r.ReadText(index++, "Clientdata.Ewm_Cw_Relevant", "");
			ssEwm_Cw_Logistical_Unit = r.ReadText(index++, "Clientdata.Ewm_Cw_Logistical_Unit", "");
			ssEwm_Cw_Logistical_Unit_Iso = r.ReadText(index++, "Clientdata.Ewm_Cw_Logistical_Unit_Iso", "");
			ssEwm_Cw_Tolerance_Group = r.ReadText(index++, "Clientdata.Ewm_Cw_Tolerance_Group", "");
			ssEwm_Cw_Input_Control = r.ReadText(index++, "Clientdata.Ewm_Cw_Input_Control", "");
			ssPacod = r.ReadText(index++, "Clientdata.Pacod", "");
			ssDg_Pckging_Status = r.ReadText(index++, "Clientdata.Dg_Pckging_Status", "");
			ssAdjust_Profile = r.ReadText(index++, "Clientdata.Adjust_Profile", "");
			ssIpmipproduct = r.ReadText(index++, "Clientdata.Ipmipproduct", "");
			ssMedium = r.ReadText(index++, "Clientdata.Medium", "");
			ssNsnid = r.ReadText(index++, "Clientdata.Nsnid", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STClientdataStructure r) {
			this = r;
		}


		public static bool operator == (STClientdataStructure a, STClientdataStructure b) {
			if (a.ssMaterial != b.ssMaterial) return false;
			if (a.ssInd_Sector != b.ssInd_Sector) return false;
			if (a.ssMatl_Type != b.ssMatl_Type) return false;
			if (a.ssCreated_On != b.ssCreated_On) return false;
			if (a.ssCreated_By != b.ssCreated_By) return false;
			if (a.ssLast_Chnge != b.ssLast_Chnge) return false;
			if (a.ssChanged_By != b.ssChanged_By) return false;
			if (a.ssMat_Status != b.ssMat_Status) return false;
			if (a.ssMaint_Stat != b.ssMaint_Stat) return false;
			if (a.ssDel_Flag != b.ssDel_Flag) return false;
			if (a.ssMatl_Group != b.ssMatl_Group) return false;
			if (a.ssOld_Mat_No != b.ssOld_Mat_No) return false;
			if (a.ssBase_Uom != b.ssBase_Uom) return false;
			if (a.ssBase_Uom_Iso != b.ssBase_Uom_Iso) return false;
			if (a.ssPo_Unit != b.ssPo_Unit) return false;
			if (a.ssPo_Unit_Iso != b.ssPo_Unit_Iso) return false;
			if (a.ssDocument != b.ssDocument) return false;
			if (a.ssDoc_Type != b.ssDoc_Type) return false;
			if (a.ssDoc_Vers != b.ssDoc_Vers) return false;
			if (a.ssDoc_Format != b.ssDoc_Format) return false;
			if (a.ssDoc_Chg_No != b.ssDoc_Chg_No) return false;
			if (a.ssPage_No != b.ssPage_No) return false;
			if (a.ssNo_Sheets != b.ssNo_Sheets) return false;
			if (a.ssProd_Memo != b.ssProd_Memo) return false;
			if (a.ssPageformat != b.ssPageformat) return false;
			if (a.ssSize_Dim != b.ssSize_Dim) return false;
			if (a.ssBasic_Matl != b.ssBasic_Matl) return false;
			if (a.ssStd_Descr != b.ssStd_Descr) return false;
			if (a.ssDsn_Office != b.ssDsn_Office) return false;
			if (a.ssPur_Valkey != b.ssPur_Valkey) return false;
			if (a.ssNet_Weight != b.ssNet_Weight) return false;
			if (a.ssUnit_Of_Wt != b.ssUnit_Of_Wt) return false;
			if (a.ssUnit_Of_Wt_Iso != b.ssUnit_Of_Wt_Iso) return false;
			if (a.ssContainer != b.ssContainer) return false;
			if (a.ssStor_Conds != b.ssStor_Conds) return false;
			if (a.ssTemp_Conds != b.ssTemp_Conds) return false;
			if (a.ssTrans_Grp != b.ssTrans_Grp) return false;
			if (a.ssHaz_Mat_No != b.ssHaz_Mat_No) return false;
			if (a.ssDivision != b.ssDivision) return false;
			if (a.ssCompetitor != b.ssCompetitor) return false;
			if (a.ssQty_Gr_Gi != b.ssQty_Gr_Gi) return false;
			if (a.ssProc_Rule != b.ssProc_Rule) return false;
			if (a.ssSup_Source != b.ssSup_Source) return false;
			if (a.ssSeason != b.ssSeason) return false;
			if (a.ssLabel_Type != b.ssLabel_Type) return false;
			if (a.ssLabel_Form != b.ssLabel_Form) return false;
			if (a.ssProd_Hier != b.ssProd_Hier) return false;
			if (a.ssCad_Id != b.ssCad_Id) return false;
			if (a.ssAllowed_Wt != b.ssAllowed_Wt) return false;
			if (a.ssPack_Wt_Un != b.ssPack_Wt_Un) return false;
			if (a.ssPack_Wt_Un_Iso != b.ssPack_Wt_Un_Iso) return false;
			if (a.ssAllwd_Vol != b.ssAllwd_Vol) return false;
			if (a.ssPack_Vo_Un != b.ssPack_Vo_Un) return false;
			if (a.ssPack_Vo_Un_Iso != b.ssPack_Vo_Un_Iso) return false;
			if (a.ssWt_Tol_Lt != b.ssWt_Tol_Lt) return false;
			if (a.ssVol_Tol_Lt != b.ssVol_Tol_Lt) return false;
			if (a.ssVar_Ord_Un != b.ssVar_Ord_Un) return false;
			if (a.ssConfigured != b.ssConfigured) return false;
			if (a.ssBatch_Mgmt != b.ssBatch_Mgmt) return false;
			if (a.ssSh_Mat_Typ != b.ssSh_Mat_Typ) return false;
			if (a.ssFill_Level != b.ssFill_Level) return false;
			if (a.ssStack_Fact != b.ssStack_Fact) return false;
			if (a.ssMat_Grp_Sm != b.ssMat_Grp_Sm) return false;
			if (a.ssAuthoritygroup != b.ssAuthoritygroup) return false;
			if (a.ssQm_Procmnt != b.ssQm_Procmnt) return false;
			if (a.ssCatprofile != b.ssCatprofile) return false;
			if (a.ssMinremlife != b.ssMinremlife) return false;
			if (a.ssShelf_Life != b.ssShelf_Life) return false;
			if (a.ssStor_Pct != b.ssStor_Pct) return false;
			if (a.ssConf_Matl != b.ssConf_Matl) return false;
			if (a.ssCo_Product != b.ssCo_Product) return false;
			if (a.ssPr_Ref_Mat != b.ssPr_Ref_Mat) return false;
			if (a.ssPur_Status != b.ssPur_Status) return false;
			if (a.ssSal_Status != b.ssSal_Status) return false;
			if (a.ssPvalidfrom != b.ssPvalidfrom) return false;
			if (a.ssSvalidfrom != b.ssSvalidfrom) return false;
			if (a.ssEnvt_Rlvt != b.ssEnvt_Rlvt) return false;
			if (a.ssProd_Alloc != b.ssProd_Alloc) return false;
			if (a.ssQual_Dik != b.ssQual_Dik) return false;
			if (a.ssManu_Mat != b.ssManu_Mat) return false;
			if (a.ssMfr_No != b.ssMfr_No) return false;
			if (a.ssInv_Mat_No != b.ssInv_Mat_No) return false;
			if (a.ssManuf_Prof != b.ssManuf_Prof) return false;
			if (a.ssHazmatprof != b.ssHazmatprof) return false;
			if (a.ssHigh_Visc != b.ssHigh_Visc) return false;
			if (a.ssLooseorliq != b.ssLooseorliq) return false;
			if (a.ssClosed_Box != b.ssClosed_Box) return false;
			if (a.ssAppd_B_Rec != b.ssAppd_B_Rec) return false;
			if (a.ssMatcmpllvl != b.ssMatcmpllvl) return false;
			if (a.ssPar_Eff != b.ssPar_Eff) return false;
			if (a.ssRound_Up_Rule_Expiration_Date != b.ssRound_Up_Rule_Expiration_Date) return false;
			if (a.ssPeriod_Ind_Expiration_Date != b.ssPeriod_Ind_Expiration_Date) return false;
			if (a.ssProd_Composition_On_Packaging != b.ssProd_Composition_On_Packaging) return false;
			if (a.ssItem_Cat != b.ssItem_Cat) return false;
			if (a.ssHaz_Mat_No_External != b.ssHaz_Mat_No_External) return false;
			if (a.ssHaz_Mat_No_Guid != b.ssHaz_Mat_No_Guid) return false;
			if (a.ssHaz_Mat_No_Version != b.ssHaz_Mat_No_Version) return false;
			if (a.ssInv_Mat_No_External != b.ssInv_Mat_No_External) return false;
			if (a.ssInv_Mat_No_Guid != b.ssInv_Mat_No_Guid) return false;
			if (a.ssInv_Mat_No_Version != b.ssInv_Mat_No_Version) return false;
			if (a.ssMaterial_Fixed != b.ssMaterial_Fixed) return false;
			if (a.ssCm_Relevance_Flag != b.ssCm_Relevance_Flag) return false;
			if (a.ssSled_Bbd != b.ssSled_Bbd) return false;
			if (a.ssGtin_Variant != b.ssGtin_Variant) return false;
			if (a.ssSerialization_Level != b.ssSerialization_Level) return false;
			if (a.ssPl_Ref_Mat != b.ssPl_Ref_Mat) return false;
			if (a.ssExtmatlgrp != b.ssExtmatlgrp) return false;
			if (a.ssUomusage != b.ssUomusage) return false;
			if (a.ssGds_Relevant != b.ssGds_Relevant) return false;
			if (a.ssMaterial_External != b.ssMaterial_External) return false;
			if (a.ssMaterial_Guid != b.ssMaterial_Guid) return false;
			if (a.ssMaterial_Version != b.ssMaterial_Version) return false;
			if (a.ssConf_Matl_External != b.ssConf_Matl_External) return false;
			if (a.ssConf_Matl_Guid != b.ssConf_Matl_Guid) return false;
			if (a.ssConf_Matl_Version != b.ssConf_Matl_Version) return false;
			if (a.ssPl_Ref_Mat_External != b.ssPl_Ref_Mat_External) return false;
			if (a.ssPl_Ref_Mat_Guid != b.ssPl_Ref_Mat_Guid) return false;
			if (a.ssPl_Ref_Mat_Version != b.ssPl_Ref_Mat_Version) return false;
			if (a.ssPr_Ref_Mat_External != b.ssPr_Ref_Mat_External) return false;
			if (a.ssPr_Ref_Mat_Guid != b.ssPr_Ref_Mat_Guid) return false;
			if (a.ssPr_Ref_Mat_Version != b.ssPr_Ref_Mat_Version) return false;
			if (a.ssWe_Origin_Acceptance != b.ssWe_Origin_Acceptance) return false;
			if (a.ssStd_Hu_Type != b.ssStd_Hu_Type) return false;
			if (a.ssPilferable != b.ssPilferable) return false;
			if (a.ssWhse_Storage_Condition != b.ssWhse_Storage_Condition) return false;
			if (a.ssWhse_Material_Group != b.ssWhse_Material_Group) return false;
			if (a.ssHandling_Indicator != b.ssHandling_Indicator) return false;
			if (a.ssHaz_Mat_Relevant != b.ssHaz_Mat_Relevant) return false;
			if (a.ssHu_Type != b.ssHu_Type) return false;
			if (a.ssVariable_Tare_Weight != b.ssVariable_Tare_Weight) return false;
			if (a.ssMax_Allowed_Capacity != b.ssMax_Allowed_Capacity) return false;
			if (a.ssOvercapacity_Tolerance != b.ssOvercapacity_Tolerance) return false;
			if (a.ssMax_Allowed_Length != b.ssMax_Allowed_Length) return false;
			if (a.ssMax_Allowed_Width != b.ssMax_Allowed_Width) return false;
			if (a.ssMax_Allowed_Heigth != b.ssMax_Allowed_Heigth) return false;
			if (a.ssMax_Dimension_Un != b.ssMax_Dimension_Un) return false;
			if (a.ssMax_Dimension_Un_Iso != b.ssMax_Dimension_Un_Iso) return false;
			if (a.ssCountryori != b.ssCountryori) return false;
			if (a.ssCountryori_Iso != b.ssCountryori_Iso) return false;
			if (a.ssMatfrgtgrp != b.ssMatfrgtgrp) return false;
			if (a.ssQuarantine_Period != b.ssQuarantine_Period) return false;
			if (a.ssQuarantine_Period_Un != b.ssQuarantine_Period_Un) return false;
			if (a.ssQuarantine_Period_Un_Iso != b.ssQuarantine_Period_Un_Iso) return false;
			if (a.ssQuality_Insp_Grp != b.ssQuality_Insp_Grp) return false;
			if (a.ssSerial_Number_Profile != b.ssSerial_Number_Profile) return false;
			if (a.ssEwm_Cw_Relevant != b.ssEwm_Cw_Relevant) return false;
			if (a.ssEwm_Cw_Logistical_Unit != b.ssEwm_Cw_Logistical_Unit) return false;
			if (a.ssEwm_Cw_Logistical_Unit_Iso != b.ssEwm_Cw_Logistical_Unit_Iso) return false;
			if (a.ssEwm_Cw_Tolerance_Group != b.ssEwm_Cw_Tolerance_Group) return false;
			if (a.ssEwm_Cw_Input_Control != b.ssEwm_Cw_Input_Control) return false;
			if (a.ssPacod != b.ssPacod) return false;
			if (a.ssDg_Pckging_Status != b.ssDg_Pckging_Status) return false;
			if (a.ssAdjust_Profile != b.ssAdjust_Profile) return false;
			if (a.ssIpmipproduct != b.ssIpmipproduct) return false;
			if (a.ssMedium != b.ssMedium) return false;
			if (a.ssNsnid != b.ssNsnid) return false;
			return true;
		}

		public static bool operator != (STClientdataStructure a, STClientdataStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STClientdataStructure)) return false;
			return (this == (STClientdataStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssMaterial.GetHashCode()
				^ ssInd_Sector.GetHashCode()
				^ ssMatl_Type.GetHashCode()
				^ ssCreated_On.GetHashCode()
				^ ssCreated_By.GetHashCode()
				^ ssLast_Chnge.GetHashCode()
				^ ssChanged_By.GetHashCode()
				^ ssMat_Status.GetHashCode()
				^ ssMaint_Stat.GetHashCode()
				^ ssDel_Flag.GetHashCode()
				^ ssMatl_Group.GetHashCode()
				^ ssOld_Mat_No.GetHashCode()
				^ ssBase_Uom.GetHashCode()
				^ ssBase_Uom_Iso.GetHashCode()
				^ ssPo_Unit.GetHashCode()
				^ ssPo_Unit_Iso.GetHashCode()
				^ ssDocument.GetHashCode()
				^ ssDoc_Type.GetHashCode()
				^ ssDoc_Vers.GetHashCode()
				^ ssDoc_Format.GetHashCode()
				^ ssDoc_Chg_No.GetHashCode()
				^ ssPage_No.GetHashCode()
				^ ssNo_Sheets.GetHashCode()
				^ ssProd_Memo.GetHashCode()
				^ ssPageformat.GetHashCode()
				^ ssSize_Dim.GetHashCode()
				^ ssBasic_Matl.GetHashCode()
				^ ssStd_Descr.GetHashCode()
				^ ssDsn_Office.GetHashCode()
				^ ssPur_Valkey.GetHashCode()
				^ ssNet_Weight.GetHashCode()
				^ ssUnit_Of_Wt.GetHashCode()
				^ ssUnit_Of_Wt_Iso.GetHashCode()
				^ ssContainer.GetHashCode()
				^ ssStor_Conds.GetHashCode()
				^ ssTemp_Conds.GetHashCode()
				^ ssTrans_Grp.GetHashCode()
				^ ssHaz_Mat_No.GetHashCode()
				^ ssDivision.GetHashCode()
				^ ssCompetitor.GetHashCode()
				^ ssQty_Gr_Gi.GetHashCode()
				^ ssProc_Rule.GetHashCode()
				^ ssSup_Source.GetHashCode()
				^ ssSeason.GetHashCode()
				^ ssLabel_Type.GetHashCode()
				^ ssLabel_Form.GetHashCode()
				^ ssProd_Hier.GetHashCode()
				^ ssCad_Id.GetHashCode()
				^ ssAllowed_Wt.GetHashCode()
				^ ssPack_Wt_Un.GetHashCode()
				^ ssPack_Wt_Un_Iso.GetHashCode()
				^ ssAllwd_Vol.GetHashCode()
				^ ssPack_Vo_Un.GetHashCode()
				^ ssPack_Vo_Un_Iso.GetHashCode()
				^ ssWt_Tol_Lt.GetHashCode()
				^ ssVol_Tol_Lt.GetHashCode()
				^ ssVar_Ord_Un.GetHashCode()
				^ ssConfigured.GetHashCode()
				^ ssBatch_Mgmt.GetHashCode()
				^ ssSh_Mat_Typ.GetHashCode()
				^ ssFill_Level.GetHashCode()
				^ ssStack_Fact.GetHashCode()
				^ ssMat_Grp_Sm.GetHashCode()
				^ ssAuthoritygroup.GetHashCode()
				^ ssQm_Procmnt.GetHashCode()
				^ ssCatprofile.GetHashCode()
				^ ssMinremlife.GetHashCode()
				^ ssShelf_Life.GetHashCode()
				^ ssStor_Pct.GetHashCode()
				^ ssConf_Matl.GetHashCode()
				^ ssCo_Product.GetHashCode()
				^ ssPr_Ref_Mat.GetHashCode()
				^ ssPur_Status.GetHashCode()
				^ ssSal_Status.GetHashCode()
				^ ssPvalidfrom.GetHashCode()
				^ ssSvalidfrom.GetHashCode()
				^ ssEnvt_Rlvt.GetHashCode()
				^ ssProd_Alloc.GetHashCode()
				^ ssQual_Dik.GetHashCode()
				^ ssManu_Mat.GetHashCode()
				^ ssMfr_No.GetHashCode()
				^ ssInv_Mat_No.GetHashCode()
				^ ssManuf_Prof.GetHashCode()
				^ ssHazmatprof.GetHashCode()
				^ ssHigh_Visc.GetHashCode()
				^ ssLooseorliq.GetHashCode()
				^ ssClosed_Box.GetHashCode()
				^ ssAppd_B_Rec.GetHashCode()
				^ ssMatcmpllvl.GetHashCode()
				^ ssPar_Eff.GetHashCode()
				^ ssRound_Up_Rule_Expiration_Date.GetHashCode()
				^ ssPeriod_Ind_Expiration_Date.GetHashCode()
				^ ssProd_Composition_On_Packaging.GetHashCode()
				^ ssItem_Cat.GetHashCode()
				^ ssHaz_Mat_No_External.GetHashCode()
				^ ssHaz_Mat_No_Guid.GetHashCode()
				^ ssHaz_Mat_No_Version.GetHashCode()
				^ ssInv_Mat_No_External.GetHashCode()
				^ ssInv_Mat_No_Guid.GetHashCode()
				^ ssInv_Mat_No_Version.GetHashCode()
				^ ssMaterial_Fixed.GetHashCode()
				^ ssCm_Relevance_Flag.GetHashCode()
				^ ssSled_Bbd.GetHashCode()
				^ ssGtin_Variant.GetHashCode()
				^ ssSerialization_Level.GetHashCode()
				^ ssPl_Ref_Mat.GetHashCode()
				^ ssExtmatlgrp.GetHashCode()
				^ ssUomusage.GetHashCode()
				^ ssGds_Relevant.GetHashCode()
				^ ssMaterial_External.GetHashCode()
				^ ssMaterial_Guid.GetHashCode()
				^ ssMaterial_Version.GetHashCode()
				^ ssConf_Matl_External.GetHashCode()
				^ ssConf_Matl_Guid.GetHashCode()
				^ ssConf_Matl_Version.GetHashCode()
				^ ssPl_Ref_Mat_External.GetHashCode()
				^ ssPl_Ref_Mat_Guid.GetHashCode()
				^ ssPl_Ref_Mat_Version.GetHashCode()
				^ ssPr_Ref_Mat_External.GetHashCode()
				^ ssPr_Ref_Mat_Guid.GetHashCode()
				^ ssPr_Ref_Mat_Version.GetHashCode()
				^ ssWe_Origin_Acceptance.GetHashCode()
				^ ssStd_Hu_Type.GetHashCode()
				^ ssPilferable.GetHashCode()
				^ ssWhse_Storage_Condition.GetHashCode()
				^ ssWhse_Material_Group.GetHashCode()
				^ ssHandling_Indicator.GetHashCode()
				^ ssHaz_Mat_Relevant.GetHashCode()
				^ ssHu_Type.GetHashCode()
				^ ssVariable_Tare_Weight.GetHashCode()
				^ ssMax_Allowed_Capacity.GetHashCode()
				^ ssOvercapacity_Tolerance.GetHashCode()
				^ ssMax_Allowed_Length.GetHashCode()
				^ ssMax_Allowed_Width.GetHashCode()
				^ ssMax_Allowed_Heigth.GetHashCode()
				^ ssMax_Dimension_Un.GetHashCode()
				^ ssMax_Dimension_Un_Iso.GetHashCode()
				^ ssCountryori.GetHashCode()
				^ ssCountryori_Iso.GetHashCode()
				^ ssMatfrgtgrp.GetHashCode()
				^ ssQuarantine_Period.GetHashCode()
				^ ssQuarantine_Period_Un.GetHashCode()
				^ ssQuarantine_Period_Un_Iso.GetHashCode()
				^ ssQuality_Insp_Grp.GetHashCode()
				^ ssSerial_Number_Profile.GetHashCode()
				^ ssEwm_Cw_Relevant.GetHashCode()
				^ ssEwm_Cw_Logistical_Unit.GetHashCode()
				^ ssEwm_Cw_Logistical_Unit_Iso.GetHashCode()
				^ ssEwm_Cw_Tolerance_Group.GetHashCode()
				^ ssEwm_Cw_Input_Control.GetHashCode()
				^ ssPacod.GetHashCode()
				^ ssDg_Pckging_Status.GetHashCode()
				^ ssAdjust_Profile.GetHashCode()
				^ ssIpmipproduct.GetHashCode()
				^ ssMedium.GetHashCode()
				^ ssNsnid.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STClientdataStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssMaterial = "";
			ssInd_Sector = "";
			ssMatl_Type = "";
			ssCreated_On = new DateTime(1900, 1, 1, 0, 0, 0);
			ssCreated_By = "";
			ssLast_Chnge = new DateTime(1900, 1, 1, 0, 0, 0);
			ssChanged_By = "";
			ssMat_Status = "";
			ssMaint_Stat = "";
			ssDel_Flag = "";
			ssMatl_Group = "";
			ssOld_Mat_No = "";
			ssBase_Uom = "";
			ssBase_Uom_Iso = "";
			ssPo_Unit = "";
			ssPo_Unit_Iso = "";
			ssDocument = "";
			ssDoc_Type = "";
			ssDoc_Vers = "";
			ssDoc_Format = "";
			ssDoc_Chg_No = "";
			ssPage_No = "";
			ssNo_Sheets = "";
			ssProd_Memo = "";
			ssPageformat = "";
			ssSize_Dim = "";
			ssBasic_Matl = "";
			ssStd_Descr = "";
			ssDsn_Office = "";
			ssPur_Valkey = "";
			ssNet_Weight = 0.0M;
			ssUnit_Of_Wt = "";
			ssUnit_Of_Wt_Iso = "";
			ssContainer = "";
			ssStor_Conds = "";
			ssTemp_Conds = "";
			ssTrans_Grp = "";
			ssHaz_Mat_No = "";
			ssDivision = "";
			ssCompetitor = "";
			ssQty_Gr_Gi = 0.0M;
			ssProc_Rule = "";
			ssSup_Source = "";
			ssSeason = "";
			ssLabel_Type = "";
			ssLabel_Form = "";
			ssProd_Hier = "";
			ssCad_Id = "";
			ssAllowed_Wt = 0.0M;
			ssPack_Wt_Un = "";
			ssPack_Wt_Un_Iso = "";
			ssAllwd_Vol = 0.0M;
			ssPack_Vo_Un = "";
			ssPack_Vo_Un_Iso = "";
			ssWt_Tol_Lt = 0.0M;
			ssVol_Tol_Lt = 0.0M;
			ssVar_Ord_Un = "";
			ssConfigured = "";
			ssBatch_Mgmt = "";
			ssSh_Mat_Typ = "";
			ssFill_Level = 0.0M;
			ssStack_Fact = 0;
			ssMat_Grp_Sm = "";
			ssAuthoritygroup = "";
			ssQm_Procmnt = "";
			ssCatprofile = "";
			ssMinremlife = 0.0M;
			ssShelf_Life = 0.0M;
			ssStor_Pct = 0.0M;
			ssConf_Matl = "";
			ssCo_Product = "";
			ssPr_Ref_Mat = "";
			ssPur_Status = "";
			ssSal_Status = "";
			ssPvalidfrom = new DateTime(1900, 1, 1, 0, 0, 0);
			ssSvalidfrom = new DateTime(1900, 1, 1, 0, 0, 0);
			ssEnvt_Rlvt = "";
			ssProd_Alloc = "";
			ssQual_Dik = "";
			ssManu_Mat = "";
			ssMfr_No = "";
			ssInv_Mat_No = "";
			ssManuf_Prof = "";
			ssHazmatprof = "";
			ssHigh_Visc = "";
			ssLooseorliq = "";
			ssClosed_Box = "";
			ssAppd_B_Rec = "";
			ssMatcmpllvl = "";
			ssPar_Eff = "";
			ssRound_Up_Rule_Expiration_Date = "";
			ssPeriod_Ind_Expiration_Date = "";
			ssProd_Composition_On_Packaging = "";
			ssItem_Cat = "";
			ssHaz_Mat_No_External = "";
			ssHaz_Mat_No_Guid = "";
			ssHaz_Mat_No_Version = "";
			ssInv_Mat_No_External = "";
			ssInv_Mat_No_Guid = "";
			ssInv_Mat_No_Version = "";
			ssMaterial_Fixed = "";
			ssCm_Relevance_Flag = "";
			ssSled_Bbd = "";
			ssGtin_Variant = "";
			ssSerialization_Level = "";
			ssPl_Ref_Mat = "";
			ssExtmatlgrp = "";
			ssUomusage = "";
			ssGds_Relevant = "";
			ssMaterial_External = "";
			ssMaterial_Guid = "";
			ssMaterial_Version = "";
			ssConf_Matl_External = "";
			ssConf_Matl_Guid = "";
			ssConf_Matl_Version = "";
			ssPl_Ref_Mat_External = "";
			ssPl_Ref_Mat_Guid = "";
			ssPl_Ref_Mat_Version = "";
			ssPr_Ref_Mat_External = "";
			ssPr_Ref_Mat_Guid = "";
			ssPr_Ref_Mat_Version = "";
			ssWe_Origin_Acceptance = "";
			ssStd_Hu_Type = "";
			ssPilferable = "";
			ssWhse_Storage_Condition = "";
			ssWhse_Material_Group = "";
			ssHandling_Indicator = "";
			ssHaz_Mat_Relevant = "";
			ssHu_Type = "";
			ssVariable_Tare_Weight = "";
			ssMax_Allowed_Capacity = 0.0M;
			ssOvercapacity_Tolerance = 0.0M;
			ssMax_Allowed_Length = 0.0M;
			ssMax_Allowed_Width = 0.0M;
			ssMax_Allowed_Heigth = 0.0M;
			ssMax_Dimension_Un = "";
			ssMax_Dimension_Un_Iso = "";
			ssCountryori = "";
			ssCountryori_Iso = "";
			ssMatfrgtgrp = "";
			ssQuarantine_Period = 0.0M;
			ssQuarantine_Period_Un = "";
			ssQuarantine_Period_Un_Iso = "";
			ssQuality_Insp_Grp = "";
			ssSerial_Number_Profile = "";
			ssEwm_Cw_Relevant = "";
			ssEwm_Cw_Logistical_Unit = "";
			ssEwm_Cw_Logistical_Unit_Iso = "";
			ssEwm_Cw_Tolerance_Group = "";
			ssEwm_Cw_Input_Control = "";
			ssPacod = "";
			ssDg_Pckging_Status = "";
			ssAdjust_Profile = "";
			ssIpmipproduct = "";
			ssMedium = "";
			ssNsnid = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssMaterial", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaterial' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaterial = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssInd_Sector", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInd_Sector' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInd_Sector = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Type", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Type' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Type = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreated_On", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreated_On' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreated_On = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCreated_By", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCreated_By' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCreated_By = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLast_Chnge", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLast_Chnge' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLast_Chnge = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssChanged_By", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssChanged_By' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssChanged_By = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMat_Status", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMat_Status' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMat_Status = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMaint_Stat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaint_Stat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaint_Stat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDel_Flag", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDel_Flag' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDel_Flag = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Group", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Group' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Group = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOld_Mat_No", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOld_Mat_No' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOld_Mat_No = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssBase_Uom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBase_Uom' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBase_Uom = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssBase_Uom_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBase_Uom_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBase_Uom_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPo_Unit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPo_Unit' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPo_Unit = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPo_Unit_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPo_Unit_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPo_Unit_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDocument", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDocument' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDocument = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDoc_Type", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDoc_Type' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDoc_Type = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDoc_Vers", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDoc_Vers' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDoc_Vers = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDoc_Format", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDoc_Format' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDoc_Format = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDoc_Chg_No", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDoc_Chg_No' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDoc_Chg_No = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPage_No", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPage_No' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPage_No = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNo_Sheets", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNo_Sheets' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNo_Sheets = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Memo", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Memo' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Memo = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPageformat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPageformat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPageformat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSize_Dim", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSize_Dim' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSize_Dim = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssBasic_Matl", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBasic_Matl' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBasic_Matl = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssStd_Descr", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssStd_Descr' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssStd_Descr = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDsn_Office", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDsn_Office' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDsn_Office = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPur_Valkey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPur_Valkey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPur_Valkey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNet_Weight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNet_Weight' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNet_Weight = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUnit_Of_Wt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUnit_Of_Wt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUnit_Of_Wt = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUnit_Of_Wt_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUnit_Of_Wt_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUnit_Of_Wt_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssContainer", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssContainer' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssContainer = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssStor_Conds", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssStor_Conds' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssStor_Conds = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTemp_Conds", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTemp_Conds' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTemp_Conds = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTrans_Grp", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTrans_Grp' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTrans_Grp = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHaz_Mat_No", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHaz_Mat_No' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHaz_Mat_No = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDivision", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDivision' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDivision = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCompetitor", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCompetitor' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCompetitor = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssQty_Gr_Gi", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQty_Gr_Gi' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQty_Gr_Gi = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProc_Rule", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProc_Rule' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProc_Rule = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSup_Source", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSup_Source' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSup_Source = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSeason", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSeason' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSeason = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLabel_Type", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLabel_Type' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLabel_Type = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLabel_Form", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLabel_Form' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLabel_Form = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Hier", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Hier' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Hier = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCad_Id", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCad_Id' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCad_Id = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllowed_Wt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllowed_Wt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllowed_Wt = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPack_Wt_Un", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPack_Wt_Un' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPack_Wt_Un = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPack_Wt_Un_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPack_Wt_Un_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPack_Wt_Un_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAllwd_Vol", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAllwd_Vol' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAllwd_Vol = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPack_Vo_Un", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPack_Vo_Un' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPack_Vo_Un = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPack_Vo_Un_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPack_Vo_Un_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPack_Vo_Un_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssWt_Tol_Lt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssWt_Tol_Lt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssWt_Tol_Lt = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVol_Tol_Lt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVol_Tol_Lt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVol_Tol_Lt = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVar_Ord_Un", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVar_Ord_Un' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVar_Ord_Un = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConfigured", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConfigured' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConfigured = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssBatch_Mgmt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssBatch_Mgmt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssBatch_Mgmt = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSh_Mat_Typ", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSh_Mat_Typ' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSh_Mat_Typ = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFill_Level", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFill_Level' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFill_Level = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssStack_Fact", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssStack_Fact' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssStack_Fact = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMat_Grp_Sm", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMat_Grp_Sm' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMat_Grp_Sm = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAuthoritygroup", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAuthoritygroup' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAuthoritygroup = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssQm_Procmnt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQm_Procmnt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQm_Procmnt = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCatprofile", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCatprofile' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCatprofile = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMinremlife", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMinremlife' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMinremlife = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssShelf_Life", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssShelf_Life' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssShelf_Life = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssStor_Pct", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssStor_Pct' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssStor_Pct = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConf_Matl", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConf_Matl' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConf_Matl = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCo_Product", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCo_Product' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCo_Product = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPr_Ref_Mat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPr_Ref_Mat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPr_Ref_Mat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPur_Status", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPur_Status' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPur_Status = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSal_Status", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSal_Status' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSal_Status = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPvalidfrom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPvalidfrom' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPvalidfrom = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSvalidfrom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSvalidfrom' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSvalidfrom = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEnvt_Rlvt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEnvt_Rlvt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEnvt_Rlvt = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Alloc", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Alloc' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Alloc = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssQual_Dik", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQual_Dik' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQual_Dik = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssManu_Mat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssManu_Mat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssManu_Mat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMfr_No", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMfr_No' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMfr_No = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssInv_Mat_No", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInv_Mat_No' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInv_Mat_No = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssManuf_Prof", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssManuf_Prof' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssManuf_Prof = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHazmatprof", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHazmatprof' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHazmatprof = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHigh_Visc", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHigh_Visc' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHigh_Visc = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLooseorliq", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLooseorliq' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLooseorliq = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssClosed_Box", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssClosed_Box' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssClosed_Box = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAppd_B_Rec", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAppd_B_Rec' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAppd_B_Rec = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatcmpllvl", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatcmpllvl' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatcmpllvl = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPar_Eff", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPar_Eff' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPar_Eff = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssRound_Up_Rule_Expiration_Date", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssRound_Up_Rule_Expiration_Date' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssRound_Up_Rule_Expiration_Date = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPeriod_Ind_Expiration_Date", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPeriod_Ind_Expiration_Date' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPeriod_Ind_Expiration_Date = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Composition_On_Packaging", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Composition_On_Packaging' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Composition_On_Packaging = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssItem_Cat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssItem_Cat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssItem_Cat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHaz_Mat_No_External", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHaz_Mat_No_External' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHaz_Mat_No_External = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHaz_Mat_No_Guid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHaz_Mat_No_Guid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHaz_Mat_No_Guid = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHaz_Mat_No_Version", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHaz_Mat_No_Version' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHaz_Mat_No_Version = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssInv_Mat_No_External", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInv_Mat_No_External' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInv_Mat_No_External = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssInv_Mat_No_Guid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInv_Mat_No_Guid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInv_Mat_No_Guid = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssInv_Mat_No_Version", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInv_Mat_No_Version' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInv_Mat_No_Version = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMaterial_Fixed", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaterial_Fixed' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaterial_Fixed = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCm_Relevance_Flag", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCm_Relevance_Flag' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCm_Relevance_Flag = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSled_Bbd", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSled_Bbd' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSled_Bbd = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssGtin_Variant", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssGtin_Variant' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssGtin_Variant = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSerialization_Level", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSerialization_Level' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSerialization_Level = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPl_Ref_Mat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPl_Ref_Mat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPl_Ref_Mat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssExtmatlgrp", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssExtmatlgrp' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssExtmatlgrp = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUomusage", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUomusage' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUomusage = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssGds_Relevant", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssGds_Relevant' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssGds_Relevant = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMaterial_External", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaterial_External' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaterial_External = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMaterial_Guid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaterial_Guid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaterial_Guid = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMaterial_Version", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaterial_Version' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaterial_Version = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConf_Matl_External", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConf_Matl_External' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConf_Matl_External = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConf_Matl_Guid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConf_Matl_Guid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConf_Matl_Guid = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssConf_Matl_Version", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssConf_Matl_Version' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssConf_Matl_Version = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPl_Ref_Mat_External", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPl_Ref_Mat_External' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPl_Ref_Mat_External = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPl_Ref_Mat_Guid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPl_Ref_Mat_Guid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPl_Ref_Mat_Guid = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPl_Ref_Mat_Version", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPl_Ref_Mat_Version' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPl_Ref_Mat_Version = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPr_Ref_Mat_External", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPr_Ref_Mat_External' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPr_Ref_Mat_External = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPr_Ref_Mat_Guid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPr_Ref_Mat_Guid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPr_Ref_Mat_Guid = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPr_Ref_Mat_Version", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPr_Ref_Mat_Version' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPr_Ref_Mat_Version = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssWe_Origin_Acceptance", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssWe_Origin_Acceptance' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssWe_Origin_Acceptance = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssStd_Hu_Type", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssStd_Hu_Type' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssStd_Hu_Type = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPilferable", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPilferable' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPilferable = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssWhse_Storage_Condition", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssWhse_Storage_Condition' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssWhse_Storage_Condition = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssWhse_Material_Group", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssWhse_Material_Group' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssWhse_Material_Group = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHandling_Indicator", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHandling_Indicator' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHandling_Indicator = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHaz_Mat_Relevant", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHaz_Mat_Relevant' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHaz_Mat_Relevant = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHu_Type", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHu_Type' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHu_Type = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVariable_Tare_Weight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVariable_Tare_Weight' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVariable_Tare_Weight = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMax_Allowed_Capacity", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMax_Allowed_Capacity' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMax_Allowed_Capacity = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssOvercapacity_Tolerance", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssOvercapacity_Tolerance' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssOvercapacity_Tolerance = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMax_Allowed_Length", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMax_Allowed_Length' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMax_Allowed_Length = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMax_Allowed_Width", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMax_Allowed_Width' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMax_Allowed_Width = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMax_Allowed_Heigth", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMax_Allowed_Heigth' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMax_Allowed_Heigth = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMax_Dimension_Un", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMax_Dimension_Un' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMax_Dimension_Un = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMax_Dimension_Un_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMax_Dimension_Un_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMax_Dimension_Un_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCountryori", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCountryori' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCountryori = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCountryori_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCountryori_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCountryori_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatfrgtgrp", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatfrgtgrp' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatfrgtgrp = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssQuarantine_Period", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQuarantine_Period' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQuarantine_Period = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssQuarantine_Period_Un", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQuarantine_Period_Un' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQuarantine_Period_Un = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssQuarantine_Period_Un_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQuarantine_Period_Un_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQuarantine_Period_Un_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssQuality_Insp_Grp", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssQuality_Insp_Grp' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssQuality_Insp_Grp = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSerial_Number_Profile", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSerial_Number_Profile' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSerial_Number_Profile = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEwm_Cw_Relevant", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEwm_Cw_Relevant' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEwm_Cw_Relevant = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEwm_Cw_Logistical_Unit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEwm_Cw_Logistical_Unit' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEwm_Cw_Logistical_Unit = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEwm_Cw_Logistical_Unit_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEwm_Cw_Logistical_Unit_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEwm_Cw_Logistical_Unit_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEwm_Cw_Tolerance_Group", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEwm_Cw_Tolerance_Group' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEwm_Cw_Tolerance_Group = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEwm_Cw_Input_Control", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEwm_Cw_Input_Control' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEwm_Cw_Input_Control = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPacod", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPacod' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPacod = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDg_Pckging_Status", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDg_Pckging_Status' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDg_Pckging_Status = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAdjust_Profile", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAdjust_Profile' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAdjust_Profile = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIpmipproduct", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIpmipproduct' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIpmipproduct = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMedium", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMedium' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMedium = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNsnid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNsnid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNsnid = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STClientdataStructure Duplicate() {
			STClientdataStructure t;
			t.ssMaterial = this.ssMaterial;
			t.ssInd_Sector = this.ssInd_Sector;
			t.ssMatl_Type = this.ssMatl_Type;
			t.ssCreated_On = this.ssCreated_On;
			t.ssCreated_By = this.ssCreated_By;
			t.ssLast_Chnge = this.ssLast_Chnge;
			t.ssChanged_By = this.ssChanged_By;
			t.ssMat_Status = this.ssMat_Status;
			t.ssMaint_Stat = this.ssMaint_Stat;
			t.ssDel_Flag = this.ssDel_Flag;
			t.ssMatl_Group = this.ssMatl_Group;
			t.ssOld_Mat_No = this.ssOld_Mat_No;
			t.ssBase_Uom = this.ssBase_Uom;
			t.ssBase_Uom_Iso = this.ssBase_Uom_Iso;
			t.ssPo_Unit = this.ssPo_Unit;
			t.ssPo_Unit_Iso = this.ssPo_Unit_Iso;
			t.ssDocument = this.ssDocument;
			t.ssDoc_Type = this.ssDoc_Type;
			t.ssDoc_Vers = this.ssDoc_Vers;
			t.ssDoc_Format = this.ssDoc_Format;
			t.ssDoc_Chg_No = this.ssDoc_Chg_No;
			t.ssPage_No = this.ssPage_No;
			t.ssNo_Sheets = this.ssNo_Sheets;
			t.ssProd_Memo = this.ssProd_Memo;
			t.ssPageformat = this.ssPageformat;
			t.ssSize_Dim = this.ssSize_Dim;
			t.ssBasic_Matl = this.ssBasic_Matl;
			t.ssStd_Descr = this.ssStd_Descr;
			t.ssDsn_Office = this.ssDsn_Office;
			t.ssPur_Valkey = this.ssPur_Valkey;
			t.ssNet_Weight = this.ssNet_Weight;
			t.ssUnit_Of_Wt = this.ssUnit_Of_Wt;
			t.ssUnit_Of_Wt_Iso = this.ssUnit_Of_Wt_Iso;
			t.ssContainer = this.ssContainer;
			t.ssStor_Conds = this.ssStor_Conds;
			t.ssTemp_Conds = this.ssTemp_Conds;
			t.ssTrans_Grp = this.ssTrans_Grp;
			t.ssHaz_Mat_No = this.ssHaz_Mat_No;
			t.ssDivision = this.ssDivision;
			t.ssCompetitor = this.ssCompetitor;
			t.ssQty_Gr_Gi = this.ssQty_Gr_Gi;
			t.ssProc_Rule = this.ssProc_Rule;
			t.ssSup_Source = this.ssSup_Source;
			t.ssSeason = this.ssSeason;
			t.ssLabel_Type = this.ssLabel_Type;
			t.ssLabel_Form = this.ssLabel_Form;
			t.ssProd_Hier = this.ssProd_Hier;
			t.ssCad_Id = this.ssCad_Id;
			t.ssAllowed_Wt = this.ssAllowed_Wt;
			t.ssPack_Wt_Un = this.ssPack_Wt_Un;
			t.ssPack_Wt_Un_Iso = this.ssPack_Wt_Un_Iso;
			t.ssAllwd_Vol = this.ssAllwd_Vol;
			t.ssPack_Vo_Un = this.ssPack_Vo_Un;
			t.ssPack_Vo_Un_Iso = this.ssPack_Vo_Un_Iso;
			t.ssWt_Tol_Lt = this.ssWt_Tol_Lt;
			t.ssVol_Tol_Lt = this.ssVol_Tol_Lt;
			t.ssVar_Ord_Un = this.ssVar_Ord_Un;
			t.ssConfigured = this.ssConfigured;
			t.ssBatch_Mgmt = this.ssBatch_Mgmt;
			t.ssSh_Mat_Typ = this.ssSh_Mat_Typ;
			t.ssFill_Level = this.ssFill_Level;
			t.ssStack_Fact = this.ssStack_Fact;
			t.ssMat_Grp_Sm = this.ssMat_Grp_Sm;
			t.ssAuthoritygroup = this.ssAuthoritygroup;
			t.ssQm_Procmnt = this.ssQm_Procmnt;
			t.ssCatprofile = this.ssCatprofile;
			t.ssMinremlife = this.ssMinremlife;
			t.ssShelf_Life = this.ssShelf_Life;
			t.ssStor_Pct = this.ssStor_Pct;
			t.ssConf_Matl = this.ssConf_Matl;
			t.ssCo_Product = this.ssCo_Product;
			t.ssPr_Ref_Mat = this.ssPr_Ref_Mat;
			t.ssPur_Status = this.ssPur_Status;
			t.ssSal_Status = this.ssSal_Status;
			t.ssPvalidfrom = this.ssPvalidfrom;
			t.ssSvalidfrom = this.ssSvalidfrom;
			t.ssEnvt_Rlvt = this.ssEnvt_Rlvt;
			t.ssProd_Alloc = this.ssProd_Alloc;
			t.ssQual_Dik = this.ssQual_Dik;
			t.ssManu_Mat = this.ssManu_Mat;
			t.ssMfr_No = this.ssMfr_No;
			t.ssInv_Mat_No = this.ssInv_Mat_No;
			t.ssManuf_Prof = this.ssManuf_Prof;
			t.ssHazmatprof = this.ssHazmatprof;
			t.ssHigh_Visc = this.ssHigh_Visc;
			t.ssLooseorliq = this.ssLooseorliq;
			t.ssClosed_Box = this.ssClosed_Box;
			t.ssAppd_B_Rec = this.ssAppd_B_Rec;
			t.ssMatcmpllvl = this.ssMatcmpllvl;
			t.ssPar_Eff = this.ssPar_Eff;
			t.ssRound_Up_Rule_Expiration_Date = this.ssRound_Up_Rule_Expiration_Date;
			t.ssPeriod_Ind_Expiration_Date = this.ssPeriod_Ind_Expiration_Date;
			t.ssProd_Composition_On_Packaging = this.ssProd_Composition_On_Packaging;
			t.ssItem_Cat = this.ssItem_Cat;
			t.ssHaz_Mat_No_External = this.ssHaz_Mat_No_External;
			t.ssHaz_Mat_No_Guid = this.ssHaz_Mat_No_Guid;
			t.ssHaz_Mat_No_Version = this.ssHaz_Mat_No_Version;
			t.ssInv_Mat_No_External = this.ssInv_Mat_No_External;
			t.ssInv_Mat_No_Guid = this.ssInv_Mat_No_Guid;
			t.ssInv_Mat_No_Version = this.ssInv_Mat_No_Version;
			t.ssMaterial_Fixed = this.ssMaterial_Fixed;
			t.ssCm_Relevance_Flag = this.ssCm_Relevance_Flag;
			t.ssSled_Bbd = this.ssSled_Bbd;
			t.ssGtin_Variant = this.ssGtin_Variant;
			t.ssSerialization_Level = this.ssSerialization_Level;
			t.ssPl_Ref_Mat = this.ssPl_Ref_Mat;
			t.ssExtmatlgrp = this.ssExtmatlgrp;
			t.ssUomusage = this.ssUomusage;
			t.ssGds_Relevant = this.ssGds_Relevant;
			t.ssMaterial_External = this.ssMaterial_External;
			t.ssMaterial_Guid = this.ssMaterial_Guid;
			t.ssMaterial_Version = this.ssMaterial_Version;
			t.ssConf_Matl_External = this.ssConf_Matl_External;
			t.ssConf_Matl_Guid = this.ssConf_Matl_Guid;
			t.ssConf_Matl_Version = this.ssConf_Matl_Version;
			t.ssPl_Ref_Mat_External = this.ssPl_Ref_Mat_External;
			t.ssPl_Ref_Mat_Guid = this.ssPl_Ref_Mat_Guid;
			t.ssPl_Ref_Mat_Version = this.ssPl_Ref_Mat_Version;
			t.ssPr_Ref_Mat_External = this.ssPr_Ref_Mat_External;
			t.ssPr_Ref_Mat_Guid = this.ssPr_Ref_Mat_Guid;
			t.ssPr_Ref_Mat_Version = this.ssPr_Ref_Mat_Version;
			t.ssWe_Origin_Acceptance = this.ssWe_Origin_Acceptance;
			t.ssStd_Hu_Type = this.ssStd_Hu_Type;
			t.ssPilferable = this.ssPilferable;
			t.ssWhse_Storage_Condition = this.ssWhse_Storage_Condition;
			t.ssWhse_Material_Group = this.ssWhse_Material_Group;
			t.ssHandling_Indicator = this.ssHandling_Indicator;
			t.ssHaz_Mat_Relevant = this.ssHaz_Mat_Relevant;
			t.ssHu_Type = this.ssHu_Type;
			t.ssVariable_Tare_Weight = this.ssVariable_Tare_Weight;
			t.ssMax_Allowed_Capacity = this.ssMax_Allowed_Capacity;
			t.ssOvercapacity_Tolerance = this.ssOvercapacity_Tolerance;
			t.ssMax_Allowed_Length = this.ssMax_Allowed_Length;
			t.ssMax_Allowed_Width = this.ssMax_Allowed_Width;
			t.ssMax_Allowed_Heigth = this.ssMax_Allowed_Heigth;
			t.ssMax_Dimension_Un = this.ssMax_Dimension_Un;
			t.ssMax_Dimension_Un_Iso = this.ssMax_Dimension_Un_Iso;
			t.ssCountryori = this.ssCountryori;
			t.ssCountryori_Iso = this.ssCountryori_Iso;
			t.ssMatfrgtgrp = this.ssMatfrgtgrp;
			t.ssQuarantine_Period = this.ssQuarantine_Period;
			t.ssQuarantine_Period_Un = this.ssQuarantine_Period_Un;
			t.ssQuarantine_Period_Un_Iso = this.ssQuarantine_Period_Un_Iso;
			t.ssQuality_Insp_Grp = this.ssQuality_Insp_Grp;
			t.ssSerial_Number_Profile = this.ssSerial_Number_Profile;
			t.ssEwm_Cw_Relevant = this.ssEwm_Cw_Relevant;
			t.ssEwm_Cw_Logistical_Unit = this.ssEwm_Cw_Logistical_Unit;
			t.ssEwm_Cw_Logistical_Unit_Iso = this.ssEwm_Cw_Logistical_Unit_Iso;
			t.ssEwm_Cw_Tolerance_Group = this.ssEwm_Cw_Tolerance_Group;
			t.ssEwm_Cw_Input_Control = this.ssEwm_Cw_Input_Control;
			t.ssPacod = this.ssPacod;
			t.ssDg_Pckging_Status = this.ssDg_Pckging_Status;
			t.ssAdjust_Profile = this.ssAdjust_Profile;
			t.ssIpmipproduct = this.ssIpmipproduct;
			t.ssMedium = this.ssMedium;
			t.ssNsnid = this.ssNsnid;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Material")) VarValue.AppendAttribute(recordElem, "Material", ssMaterial, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Material");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ind_Sector")) VarValue.AppendAttribute(recordElem, "Ind_Sector", ssInd_Sector, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ind_Sector");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Type")) VarValue.AppendAttribute(recordElem, "Matl_Type", ssMatl_Type, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Created_On")) VarValue.AppendAttribute(recordElem, "Created_On", ssCreated_On, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "Created_On");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Created_By")) VarValue.AppendAttribute(recordElem, "Created_By", ssCreated_By, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Created_By");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Last_Chnge")) VarValue.AppendAttribute(recordElem, "Last_Chnge", ssLast_Chnge, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "Last_Chnge");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Changed_By")) VarValue.AppendAttribute(recordElem, "Changed_By", ssChanged_By, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Changed_By");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Mat_Status")) VarValue.AppendAttribute(recordElem, "Mat_Status", ssMat_Status, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Mat_Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Maint_Stat")) VarValue.AppendAttribute(recordElem, "Maint_Stat", ssMaint_Stat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Maint_Stat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Del_Flag")) VarValue.AppendAttribute(recordElem, "Del_Flag", ssDel_Flag, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Del_Flag");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Group")) VarValue.AppendAttribute(recordElem, "Matl_Group", ssMatl_Group, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Group");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Old_Mat_No")) VarValue.AppendAttribute(recordElem, "Old_Mat_No", ssOld_Mat_No, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Old_Mat_No");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Base_Uom")) VarValue.AppendAttribute(recordElem, "Base_Uom", ssBase_Uom, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Base_Uom");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Base_Uom_Iso")) VarValue.AppendAttribute(recordElem, "Base_Uom_Iso", ssBase_Uom_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Base_Uom_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Po_Unit")) VarValue.AppendAttribute(recordElem, "Po_Unit", ssPo_Unit, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Po_Unit");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Po_Unit_Iso")) VarValue.AppendAttribute(recordElem, "Po_Unit_Iso", ssPo_Unit_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Po_Unit_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Document")) VarValue.AppendAttribute(recordElem, "Document", ssDocument, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Document");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Doc_Type")) VarValue.AppendAttribute(recordElem, "Doc_Type", ssDoc_Type, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Doc_Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Doc_Vers")) VarValue.AppendAttribute(recordElem, "Doc_Vers", ssDoc_Vers, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Doc_Vers");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Doc_Format")) VarValue.AppendAttribute(recordElem, "Doc_Format", ssDoc_Format, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Doc_Format");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Doc_Chg_No")) VarValue.AppendAttribute(recordElem, "Doc_Chg_No", ssDoc_Chg_No, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Doc_Chg_No");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Page_No")) VarValue.AppendAttribute(recordElem, "Page_No", ssPage_No, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Page_No");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".No_Sheets")) VarValue.AppendAttribute(recordElem, "No_Sheets", ssNo_Sheets, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "No_Sheets");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Memo")) VarValue.AppendAttribute(recordElem, "Prod_Memo", ssProd_Memo, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Memo");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pageformat")) VarValue.AppendAttribute(recordElem, "Pageformat", ssPageformat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pageformat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Size_Dim")) VarValue.AppendAttribute(recordElem, "Size_Dim", ssSize_Dim, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Size_Dim");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Basic_Matl")) VarValue.AppendAttribute(recordElem, "Basic_Matl", ssBasic_Matl, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Basic_Matl");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Std_Descr")) VarValue.AppendAttribute(recordElem, "Std_Descr", ssStd_Descr, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Std_Descr");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Dsn_Office")) VarValue.AppendAttribute(recordElem, "Dsn_Office", ssDsn_Office, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Dsn_Office");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pur_Valkey")) VarValue.AppendAttribute(recordElem, "Pur_Valkey", ssPur_Valkey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pur_Valkey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Net_Weight")) VarValue.AppendAttribute(recordElem, "Net_Weight", ssNet_Weight, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Net_Weight");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Unit_Of_Wt")) VarValue.AppendAttribute(recordElem, "Unit_Of_Wt", ssUnit_Of_Wt, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Unit_Of_Wt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Unit_Of_Wt_Iso")) VarValue.AppendAttribute(recordElem, "Unit_Of_Wt_Iso", ssUnit_Of_Wt_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Unit_Of_Wt_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Container")) VarValue.AppendAttribute(recordElem, "Container", ssContainer, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Container");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stor_Conds")) VarValue.AppendAttribute(recordElem, "Stor_Conds", ssStor_Conds, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Stor_Conds");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Temp_Conds")) VarValue.AppendAttribute(recordElem, "Temp_Conds", ssTemp_Conds, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Temp_Conds");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Trans_Grp")) VarValue.AppendAttribute(recordElem, "Trans_Grp", ssTrans_Grp, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Trans_Grp");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Haz_Mat_No")) VarValue.AppendAttribute(recordElem, "Haz_Mat_No", ssHaz_Mat_No, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Haz_Mat_No");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Division")) VarValue.AppendAttribute(recordElem, "Division", ssDivision, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Division");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Competitor")) VarValue.AppendAttribute(recordElem, "Competitor", ssCompetitor, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Competitor");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Qty_Gr_Gi")) VarValue.AppendAttribute(recordElem, "Qty_Gr_Gi", ssQty_Gr_Gi, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Qty_Gr_Gi");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Proc_Rule")) VarValue.AppendAttribute(recordElem, "Proc_Rule", ssProc_Rule, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Proc_Rule");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sup_Source")) VarValue.AppendAttribute(recordElem, "Sup_Source", ssSup_Source, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sup_Source");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Season")) VarValue.AppendAttribute(recordElem, "Season", ssSeason, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Season");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label_Type")) VarValue.AppendAttribute(recordElem, "Label_Type", ssLabel_Type, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label_Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label_Form")) VarValue.AppendAttribute(recordElem, "Label_Form", ssLabel_Form, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label_Form");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Hier")) VarValue.AppendAttribute(recordElem, "Prod_Hier", ssProd_Hier, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Hier");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Cad_Id")) VarValue.AppendAttribute(recordElem, "Cad_Id", ssCad_Id, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Cad_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Allowed_Wt")) VarValue.AppendAttribute(recordElem, "Allowed_Wt", ssAllowed_Wt, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Allowed_Wt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pack_Wt_Un")) VarValue.AppendAttribute(recordElem, "Pack_Wt_Un", ssPack_Wt_Un, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pack_Wt_Un");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pack_Wt_Un_Iso")) VarValue.AppendAttribute(recordElem, "Pack_Wt_Un_Iso", ssPack_Wt_Un_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pack_Wt_Un_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Allwd_Vol")) VarValue.AppendAttribute(recordElem, "Allwd_Vol", ssAllwd_Vol, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Allwd_Vol");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pack_Vo_Un")) VarValue.AppendAttribute(recordElem, "Pack_Vo_Un", ssPack_Vo_Un, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pack_Vo_Un");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pack_Vo_Un_Iso")) VarValue.AppendAttribute(recordElem, "Pack_Vo_Un_Iso", ssPack_Vo_Un_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pack_Vo_Un_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Wt_Tol_Lt")) VarValue.AppendAttribute(recordElem, "Wt_Tol_Lt", ssWt_Tol_Lt, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Wt_Tol_Lt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Vol_Tol_Lt")) VarValue.AppendAttribute(recordElem, "Vol_Tol_Lt", ssVol_Tol_Lt, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Vol_Tol_Lt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Var_Ord_Un")) VarValue.AppendAttribute(recordElem, "Var_Ord_Un", ssVar_Ord_Un, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Var_Ord_Un");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Configured")) VarValue.AppendAttribute(recordElem, "Configured", ssConfigured, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Configured");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Batch_Mgmt")) VarValue.AppendAttribute(recordElem, "Batch_Mgmt", ssBatch_Mgmt, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Batch_Mgmt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sh_Mat_Typ")) VarValue.AppendAttribute(recordElem, "Sh_Mat_Typ", ssSh_Mat_Typ, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sh_Mat_Typ");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Fill_Level")) VarValue.AppendAttribute(recordElem, "Fill_Level", ssFill_Level, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Fill_Level");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stack_Fact")) VarValue.AppendAttribute(recordElem, "Stack_Fact", ssStack_Fact, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Stack_Fact");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Mat_Grp_Sm")) VarValue.AppendAttribute(recordElem, "Mat_Grp_Sm", ssMat_Grp_Sm, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Mat_Grp_Sm");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Authoritygroup")) VarValue.AppendAttribute(recordElem, "Authoritygroup", ssAuthoritygroup, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Authoritygroup");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Qm_Procmnt")) VarValue.AppendAttribute(recordElem, "Qm_Procmnt", ssQm_Procmnt, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Qm_Procmnt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Catprofile")) VarValue.AppendAttribute(recordElem, "Catprofile", ssCatprofile, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Catprofile");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Minremlife")) VarValue.AppendAttribute(recordElem, "Minremlife", ssMinremlife, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Minremlife");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Shelf_Life")) VarValue.AppendAttribute(recordElem, "Shelf_Life", ssShelf_Life, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Shelf_Life");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Stor_Pct")) VarValue.AppendAttribute(recordElem, "Stor_Pct", ssStor_Pct, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Stor_Pct");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Conf_Matl")) VarValue.AppendAttribute(recordElem, "Conf_Matl", ssConf_Matl, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Conf_Matl");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Co_Product")) VarValue.AppendAttribute(recordElem, "Co_Product", ssCo_Product, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Co_Product");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pr_Ref_Mat")) VarValue.AppendAttribute(recordElem, "Pr_Ref_Mat", ssPr_Ref_Mat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pr_Ref_Mat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pur_Status")) VarValue.AppendAttribute(recordElem, "Pur_Status", ssPur_Status, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pur_Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sal_Status")) VarValue.AppendAttribute(recordElem, "Sal_Status", ssSal_Status, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sal_Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pvalidfrom")) VarValue.AppendAttribute(recordElem, "Pvalidfrom", ssPvalidfrom, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "Pvalidfrom");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Svalidfrom")) VarValue.AppendAttribute(recordElem, "Svalidfrom", ssSvalidfrom, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "Svalidfrom");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Envt_Rlvt")) VarValue.AppendAttribute(recordElem, "Envt_Rlvt", ssEnvt_Rlvt, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Envt_Rlvt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Alloc")) VarValue.AppendAttribute(recordElem, "Prod_Alloc", ssProd_Alloc, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Alloc");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Qual_Dik")) VarValue.AppendAttribute(recordElem, "Qual_Dik", ssQual_Dik, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Qual_Dik");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Manu_Mat")) VarValue.AppendAttribute(recordElem, "Manu_Mat", ssManu_Mat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Manu_Mat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Mfr_No")) VarValue.AppendAttribute(recordElem, "Mfr_No", ssMfr_No, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Mfr_No");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Inv_Mat_No")) VarValue.AppendAttribute(recordElem, "Inv_Mat_No", ssInv_Mat_No, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Inv_Mat_No");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Manuf_Prof")) VarValue.AppendAttribute(recordElem, "Manuf_Prof", ssManuf_Prof, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Manuf_Prof");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Hazmatprof")) VarValue.AppendAttribute(recordElem, "Hazmatprof", ssHazmatprof, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Hazmatprof");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".High_Visc")) VarValue.AppendAttribute(recordElem, "High_Visc", ssHigh_Visc, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "High_Visc");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Looseorliq")) VarValue.AppendAttribute(recordElem, "Looseorliq", ssLooseorliq, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Looseorliq");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Closed_Box")) VarValue.AppendAttribute(recordElem, "Closed_Box", ssClosed_Box, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Closed_Box");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Appd_B_Rec")) VarValue.AppendAttribute(recordElem, "Appd_B_Rec", ssAppd_B_Rec, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Appd_B_Rec");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matcmpllvl")) VarValue.AppendAttribute(recordElem, "Matcmpllvl", ssMatcmpllvl, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matcmpllvl");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Par_Eff")) VarValue.AppendAttribute(recordElem, "Par_Eff", ssPar_Eff, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Par_Eff");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Round_Up_Rule_Expiration_Date")) VarValue.AppendAttribute(recordElem, "Round_Up_Rule_Expiration_Date", ssRound_Up_Rule_Expiration_Date, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Round_Up_Rule_Expiration_Date");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Period_Ind_Expiration_Date")) VarValue.AppendAttribute(recordElem, "Period_Ind_Expiration_Date", ssPeriod_Ind_Expiration_Date, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Period_Ind_Expiration_Date");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Composition_On_Packaging")) VarValue.AppendAttribute(recordElem, "Prod_Composition_On_Packaging", ssProd_Composition_On_Packaging, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Composition_On_Packaging");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Item_Cat")) VarValue.AppendAttribute(recordElem, "Item_Cat", ssItem_Cat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Item_Cat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Haz_Mat_No_External")) VarValue.AppendAttribute(recordElem, "Haz_Mat_No_External", ssHaz_Mat_No_External, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Haz_Mat_No_External");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Haz_Mat_No_Guid")) VarValue.AppendAttribute(recordElem, "Haz_Mat_No_Guid", ssHaz_Mat_No_Guid, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Haz_Mat_No_Guid");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Haz_Mat_No_Version")) VarValue.AppendAttribute(recordElem, "Haz_Mat_No_Version", ssHaz_Mat_No_Version, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Haz_Mat_No_Version");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Inv_Mat_No_External")) VarValue.AppendAttribute(recordElem, "Inv_Mat_No_External", ssInv_Mat_No_External, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Inv_Mat_No_External");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Inv_Mat_No_Guid")) VarValue.AppendAttribute(recordElem, "Inv_Mat_No_Guid", ssInv_Mat_No_Guid, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Inv_Mat_No_Guid");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Inv_Mat_No_Version")) VarValue.AppendAttribute(recordElem, "Inv_Mat_No_Version", ssInv_Mat_No_Version, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Inv_Mat_No_Version");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Material_Fixed")) VarValue.AppendAttribute(recordElem, "Material_Fixed", ssMaterial_Fixed, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Material_Fixed");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Cm_Relevance_Flag")) VarValue.AppendAttribute(recordElem, "Cm_Relevance_Flag", ssCm_Relevance_Flag, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Cm_Relevance_Flag");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sled_Bbd")) VarValue.AppendAttribute(recordElem, "Sled_Bbd", ssSled_Bbd, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sled_Bbd");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Gtin_Variant")) VarValue.AppendAttribute(recordElem, "Gtin_Variant", ssGtin_Variant, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Gtin_Variant");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Serialization_Level")) VarValue.AppendAttribute(recordElem, "Serialization_Level", ssSerialization_Level, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Serialization_Level");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pl_Ref_Mat")) VarValue.AppendAttribute(recordElem, "Pl_Ref_Mat", ssPl_Ref_Mat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pl_Ref_Mat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Extmatlgrp")) VarValue.AppendAttribute(recordElem, "Extmatlgrp", ssExtmatlgrp, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Extmatlgrp");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Uomusage")) VarValue.AppendAttribute(recordElem, "Uomusage", ssUomusage, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Uomusage");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Gds_Relevant")) VarValue.AppendAttribute(recordElem, "Gds_Relevant", ssGds_Relevant, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Gds_Relevant");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Material_External")) VarValue.AppendAttribute(recordElem, "Material_External", ssMaterial_External, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Material_External");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Material_Guid")) VarValue.AppendAttribute(recordElem, "Material_Guid", ssMaterial_Guid, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Material_Guid");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Material_Version")) VarValue.AppendAttribute(recordElem, "Material_Version", ssMaterial_Version, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Material_Version");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Conf_Matl_External")) VarValue.AppendAttribute(recordElem, "Conf_Matl_External", ssConf_Matl_External, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Conf_Matl_External");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Conf_Matl_Guid")) VarValue.AppendAttribute(recordElem, "Conf_Matl_Guid", ssConf_Matl_Guid, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Conf_Matl_Guid");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Conf_Matl_Version")) VarValue.AppendAttribute(recordElem, "Conf_Matl_Version", ssConf_Matl_Version, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Conf_Matl_Version");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pl_Ref_Mat_External")) VarValue.AppendAttribute(recordElem, "Pl_Ref_Mat_External", ssPl_Ref_Mat_External, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pl_Ref_Mat_External");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pl_Ref_Mat_Guid")) VarValue.AppendAttribute(recordElem, "Pl_Ref_Mat_Guid", ssPl_Ref_Mat_Guid, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pl_Ref_Mat_Guid");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pl_Ref_Mat_Version")) VarValue.AppendAttribute(recordElem, "Pl_Ref_Mat_Version", ssPl_Ref_Mat_Version, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pl_Ref_Mat_Version");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pr_Ref_Mat_External")) VarValue.AppendAttribute(recordElem, "Pr_Ref_Mat_External", ssPr_Ref_Mat_External, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pr_Ref_Mat_External");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pr_Ref_Mat_Guid")) VarValue.AppendAttribute(recordElem, "Pr_Ref_Mat_Guid", ssPr_Ref_Mat_Guid, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pr_Ref_Mat_Guid");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pr_Ref_Mat_Version")) VarValue.AppendAttribute(recordElem, "Pr_Ref_Mat_Version", ssPr_Ref_Mat_Version, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pr_Ref_Mat_Version");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".We_Origin_Acceptance")) VarValue.AppendAttribute(recordElem, "We_Origin_Acceptance", ssWe_Origin_Acceptance, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "We_Origin_Acceptance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Std_Hu_Type")) VarValue.AppendAttribute(recordElem, "Std_Hu_Type", ssStd_Hu_Type, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Std_Hu_Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pilferable")) VarValue.AppendAttribute(recordElem, "Pilferable", ssPilferable, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pilferable");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Whse_Storage_Condition")) VarValue.AppendAttribute(recordElem, "Whse_Storage_Condition", ssWhse_Storage_Condition, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Whse_Storage_Condition");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Whse_Material_Group")) VarValue.AppendAttribute(recordElem, "Whse_Material_Group", ssWhse_Material_Group, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Whse_Material_Group");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Handling_Indicator")) VarValue.AppendAttribute(recordElem, "Handling_Indicator", ssHandling_Indicator, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Handling_Indicator");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Haz_Mat_Relevant")) VarValue.AppendAttribute(recordElem, "Haz_Mat_Relevant", ssHaz_Mat_Relevant, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Haz_Mat_Relevant");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Hu_Type")) VarValue.AppendAttribute(recordElem, "Hu_Type", ssHu_Type, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Hu_Type");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Variable_Tare_Weight")) VarValue.AppendAttribute(recordElem, "Variable_Tare_Weight", ssVariable_Tare_Weight, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Variable_Tare_Weight");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Max_Allowed_Capacity")) VarValue.AppendAttribute(recordElem, "Max_Allowed_Capacity", ssMax_Allowed_Capacity, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Max_Allowed_Capacity");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Overcapacity_Tolerance")) VarValue.AppendAttribute(recordElem, "Overcapacity_Tolerance", ssOvercapacity_Tolerance, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Overcapacity_Tolerance");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Max_Allowed_Length")) VarValue.AppendAttribute(recordElem, "Max_Allowed_Length", ssMax_Allowed_Length, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Max_Allowed_Length");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Max_Allowed_Width")) VarValue.AppendAttribute(recordElem, "Max_Allowed_Width", ssMax_Allowed_Width, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Max_Allowed_Width");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Max_Allowed_Heigth")) VarValue.AppendAttribute(recordElem, "Max_Allowed_Heigth", ssMax_Allowed_Heigth, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Max_Allowed_Heigth");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Max_Dimension_Un")) VarValue.AppendAttribute(recordElem, "Max_Dimension_Un", ssMax_Dimension_Un, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Max_Dimension_Un");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Max_Dimension_Un_Iso")) VarValue.AppendAttribute(recordElem, "Max_Dimension_Un_Iso", ssMax_Dimension_Un_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Max_Dimension_Un_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Countryori")) VarValue.AppendAttribute(recordElem, "Countryori", ssCountryori, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Countryori");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Countryori_Iso")) VarValue.AppendAttribute(recordElem, "Countryori_Iso", ssCountryori_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Countryori_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matfrgtgrp")) VarValue.AppendAttribute(recordElem, "Matfrgtgrp", ssMatfrgtgrp, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matfrgtgrp");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Quarantine_Period")) VarValue.AppendAttribute(recordElem, "Quarantine_Period", ssQuarantine_Period, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Quarantine_Period");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Quarantine_Period_Un")) VarValue.AppendAttribute(recordElem, "Quarantine_Period_Un", ssQuarantine_Period_Un, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Quarantine_Period_Un");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Quarantine_Period_Un_Iso")) VarValue.AppendAttribute(recordElem, "Quarantine_Period_Un_Iso", ssQuarantine_Period_Un_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Quarantine_Period_Un_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Quality_Insp_Grp")) VarValue.AppendAttribute(recordElem, "Quality_Insp_Grp", ssQuality_Insp_Grp, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Quality_Insp_Grp");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Serial_Number_Profile")) VarValue.AppendAttribute(recordElem, "Serial_Number_Profile", ssSerial_Number_Profile, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Serial_Number_Profile");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ewm_Cw_Relevant")) VarValue.AppendAttribute(recordElem, "Ewm_Cw_Relevant", ssEwm_Cw_Relevant, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ewm_Cw_Relevant");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ewm_Cw_Logistical_Unit")) VarValue.AppendAttribute(recordElem, "Ewm_Cw_Logistical_Unit", ssEwm_Cw_Logistical_Unit, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ewm_Cw_Logistical_Unit");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ewm_Cw_Logistical_Unit_Iso")) VarValue.AppendAttribute(recordElem, "Ewm_Cw_Logistical_Unit_Iso", ssEwm_Cw_Logistical_Unit_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ewm_Cw_Logistical_Unit_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ewm_Cw_Tolerance_Group")) VarValue.AppendAttribute(recordElem, "Ewm_Cw_Tolerance_Group", ssEwm_Cw_Tolerance_Group, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ewm_Cw_Tolerance_Group");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ewm_Cw_Input_Control")) VarValue.AppendAttribute(recordElem, "Ewm_Cw_Input_Control", ssEwm_Cw_Input_Control, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ewm_Cw_Input_Control");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pacod")) VarValue.AppendAttribute(recordElem, "Pacod", ssPacod, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pacod");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Dg_Pckging_Status")) VarValue.AppendAttribute(recordElem, "Dg_Pckging_Status", ssDg_Pckging_Status, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Dg_Pckging_Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Adjust_Profile")) VarValue.AppendAttribute(recordElem, "Adjust_Profile", ssAdjust_Profile, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Adjust_Profile");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ipmipproduct")) VarValue.AppendAttribute(recordElem, "Ipmipproduct", ssIpmipproduct, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ipmipproduct");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Medium")) VarValue.AppendAttribute(recordElem, "Medium", ssMedium, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Medium");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Nsnid")) VarValue.AppendAttribute(recordElem, "Nsnid", ssNsnid, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Nsnid");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "material") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Material")) variable.Value = ssMaterial; else variable.Optimized = true;
			} else if (head == "ind_sector") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ind_Sector")) variable.Value = ssInd_Sector; else variable.Optimized = true;
			} else if (head == "matl_type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Type")) variable.Value = ssMatl_Type; else variable.Optimized = true;
			} else if (head == "created_on") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Created_On")) variable.Value = ssCreated_On; else variable.Optimized = true;
			} else if (head == "created_by") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Created_By")) variable.Value = ssCreated_By; else variable.Optimized = true;
			} else if (head == "last_chnge") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Last_Chnge")) variable.Value = ssLast_Chnge; else variable.Optimized = true;
			} else if (head == "changed_by") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Changed_By")) variable.Value = ssChanged_By; else variable.Optimized = true;
			} else if (head == "mat_status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Mat_Status")) variable.Value = ssMat_Status; else variable.Optimized = true;
			} else if (head == "maint_stat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Maint_Stat")) variable.Value = ssMaint_Stat; else variable.Optimized = true;
			} else if (head == "del_flag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Del_Flag")) variable.Value = ssDel_Flag; else variable.Optimized = true;
			} else if (head == "matl_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Group")) variable.Value = ssMatl_Group; else variable.Optimized = true;
			} else if (head == "old_mat_no") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Old_Mat_No")) variable.Value = ssOld_Mat_No; else variable.Optimized = true;
			} else if (head == "base_uom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Base_Uom")) variable.Value = ssBase_Uom; else variable.Optimized = true;
			} else if (head == "base_uom_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Base_Uom_Iso")) variable.Value = ssBase_Uom_Iso; else variable.Optimized = true;
			} else if (head == "po_unit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Po_Unit")) variable.Value = ssPo_Unit; else variable.Optimized = true;
			} else if (head == "po_unit_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Po_Unit_Iso")) variable.Value = ssPo_Unit_Iso; else variable.Optimized = true;
			} else if (head == "document") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Document")) variable.Value = ssDocument; else variable.Optimized = true;
			} else if (head == "doc_type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Doc_Type")) variable.Value = ssDoc_Type; else variable.Optimized = true;
			} else if (head == "doc_vers") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Doc_Vers")) variable.Value = ssDoc_Vers; else variable.Optimized = true;
			} else if (head == "doc_format") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Doc_Format")) variable.Value = ssDoc_Format; else variable.Optimized = true;
			} else if (head == "doc_chg_no") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Doc_Chg_No")) variable.Value = ssDoc_Chg_No; else variable.Optimized = true;
			} else if (head == "page_no") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Page_No")) variable.Value = ssPage_No; else variable.Optimized = true;
			} else if (head == "no_sheets") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".No_Sheets")) variable.Value = ssNo_Sheets; else variable.Optimized = true;
			} else if (head == "prod_memo") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Memo")) variable.Value = ssProd_Memo; else variable.Optimized = true;
			} else if (head == "pageformat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pageformat")) variable.Value = ssPageformat; else variable.Optimized = true;
			} else if (head == "size_dim") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Size_Dim")) variable.Value = ssSize_Dim; else variable.Optimized = true;
			} else if (head == "basic_matl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Basic_Matl")) variable.Value = ssBasic_Matl; else variable.Optimized = true;
			} else if (head == "std_descr") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Std_Descr")) variable.Value = ssStd_Descr; else variable.Optimized = true;
			} else if (head == "dsn_office") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Dsn_Office")) variable.Value = ssDsn_Office; else variable.Optimized = true;
			} else if (head == "pur_valkey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pur_Valkey")) variable.Value = ssPur_Valkey; else variable.Optimized = true;
			} else if (head == "net_weight") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Net_Weight")) variable.Value = ssNet_Weight; else variable.Optimized = true;
			} else if (head == "unit_of_wt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unit_Of_Wt")) variable.Value = ssUnit_Of_Wt; else variable.Optimized = true;
			} else if (head == "unit_of_wt_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unit_Of_Wt_Iso")) variable.Value = ssUnit_Of_Wt_Iso; else variable.Optimized = true;
			} else if (head == "container") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Container")) variable.Value = ssContainer; else variable.Optimized = true;
			} else if (head == "stor_conds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stor_Conds")) variable.Value = ssStor_Conds; else variable.Optimized = true;
			} else if (head == "temp_conds") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Temp_Conds")) variable.Value = ssTemp_Conds; else variable.Optimized = true;
			} else if (head == "trans_grp") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Trans_Grp")) variable.Value = ssTrans_Grp; else variable.Optimized = true;
			} else if (head == "haz_mat_no") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Haz_Mat_No")) variable.Value = ssHaz_Mat_No; else variable.Optimized = true;
			} else if (head == "division") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Division")) variable.Value = ssDivision; else variable.Optimized = true;
			} else if (head == "competitor") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Competitor")) variable.Value = ssCompetitor; else variable.Optimized = true;
			} else if (head == "qty_gr_gi") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Qty_Gr_Gi")) variable.Value = ssQty_Gr_Gi; else variable.Optimized = true;
			} else if (head == "proc_rule") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Proc_Rule")) variable.Value = ssProc_Rule; else variable.Optimized = true;
			} else if (head == "sup_source") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sup_Source")) variable.Value = ssSup_Source; else variable.Optimized = true;
			} else if (head == "season") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Season")) variable.Value = ssSeason; else variable.Optimized = true;
			} else if (head == "label_type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label_Type")) variable.Value = ssLabel_Type; else variable.Optimized = true;
			} else if (head == "label_form") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label_Form")) variable.Value = ssLabel_Form; else variable.Optimized = true;
			} else if (head == "prod_hier") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Hier")) variable.Value = ssProd_Hier; else variable.Optimized = true;
			} else if (head == "cad_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Cad_Id")) variable.Value = ssCad_Id; else variable.Optimized = true;
			} else if (head == "allowed_wt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Allowed_Wt")) variable.Value = ssAllowed_Wt; else variable.Optimized = true;
			} else if (head == "pack_wt_un") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pack_Wt_Un")) variable.Value = ssPack_Wt_Un; else variable.Optimized = true;
			} else if (head == "pack_wt_un_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pack_Wt_Un_Iso")) variable.Value = ssPack_Wt_Un_Iso; else variable.Optimized = true;
			} else if (head == "allwd_vol") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Allwd_Vol")) variable.Value = ssAllwd_Vol; else variable.Optimized = true;
			} else if (head == "pack_vo_un") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pack_Vo_Un")) variable.Value = ssPack_Vo_Un; else variable.Optimized = true;
			} else if (head == "pack_vo_un_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pack_Vo_Un_Iso")) variable.Value = ssPack_Vo_Un_Iso; else variable.Optimized = true;
			} else if (head == "wt_tol_lt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Wt_Tol_Lt")) variable.Value = ssWt_Tol_Lt; else variable.Optimized = true;
			} else if (head == "vol_tol_lt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Vol_Tol_Lt")) variable.Value = ssVol_Tol_Lt; else variable.Optimized = true;
			} else if (head == "var_ord_un") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Var_Ord_Un")) variable.Value = ssVar_Ord_Un; else variable.Optimized = true;
			} else if (head == "configured") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Configured")) variable.Value = ssConfigured; else variable.Optimized = true;
			} else if (head == "batch_mgmt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Batch_Mgmt")) variable.Value = ssBatch_Mgmt; else variable.Optimized = true;
			} else if (head == "sh_mat_typ") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sh_Mat_Typ")) variable.Value = ssSh_Mat_Typ; else variable.Optimized = true;
			} else if (head == "fill_level") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Fill_Level")) variable.Value = ssFill_Level; else variable.Optimized = true;
			} else if (head == "stack_fact") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stack_Fact")) variable.Value = ssStack_Fact; else variable.Optimized = true;
			} else if (head == "mat_grp_sm") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Mat_Grp_Sm")) variable.Value = ssMat_Grp_Sm; else variable.Optimized = true;
			} else if (head == "authoritygroup") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Authoritygroup")) variable.Value = ssAuthoritygroup; else variable.Optimized = true;
			} else if (head == "qm_procmnt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Qm_Procmnt")) variable.Value = ssQm_Procmnt; else variable.Optimized = true;
			} else if (head == "catprofile") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Catprofile")) variable.Value = ssCatprofile; else variable.Optimized = true;
			} else if (head == "minremlife") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Minremlife")) variable.Value = ssMinremlife; else variable.Optimized = true;
			} else if (head == "shelf_life") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Shelf_Life")) variable.Value = ssShelf_Life; else variable.Optimized = true;
			} else if (head == "stor_pct") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Stor_Pct")) variable.Value = ssStor_Pct; else variable.Optimized = true;
			} else if (head == "conf_matl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Conf_Matl")) variable.Value = ssConf_Matl; else variable.Optimized = true;
			} else if (head == "co_product") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Co_Product")) variable.Value = ssCo_Product; else variable.Optimized = true;
			} else if (head == "pr_ref_mat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pr_Ref_Mat")) variable.Value = ssPr_Ref_Mat; else variable.Optimized = true;
			} else if (head == "pur_status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pur_Status")) variable.Value = ssPur_Status; else variable.Optimized = true;
			} else if (head == "sal_status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sal_Status")) variable.Value = ssSal_Status; else variable.Optimized = true;
			} else if (head == "pvalidfrom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pvalidfrom")) variable.Value = ssPvalidfrom; else variable.Optimized = true;
			} else if (head == "svalidfrom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Svalidfrom")) variable.Value = ssSvalidfrom; else variable.Optimized = true;
			} else if (head == "envt_rlvt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Envt_Rlvt")) variable.Value = ssEnvt_Rlvt; else variable.Optimized = true;
			} else if (head == "prod_alloc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Alloc")) variable.Value = ssProd_Alloc; else variable.Optimized = true;
			} else if (head == "qual_dik") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Qual_Dik")) variable.Value = ssQual_Dik; else variable.Optimized = true;
			} else if (head == "manu_mat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Manu_Mat")) variable.Value = ssManu_Mat; else variable.Optimized = true;
			} else if (head == "mfr_no") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Mfr_No")) variable.Value = ssMfr_No; else variable.Optimized = true;
			} else if (head == "inv_mat_no") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Inv_Mat_No")) variable.Value = ssInv_Mat_No; else variable.Optimized = true;
			} else if (head == "manuf_prof") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Manuf_Prof")) variable.Value = ssManuf_Prof; else variable.Optimized = true;
			} else if (head == "hazmatprof") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Hazmatprof")) variable.Value = ssHazmatprof; else variable.Optimized = true;
			} else if (head == "high_visc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".High_Visc")) variable.Value = ssHigh_Visc; else variable.Optimized = true;
			} else if (head == "looseorliq") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Looseorliq")) variable.Value = ssLooseorliq; else variable.Optimized = true;
			} else if (head == "closed_box") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Closed_Box")) variable.Value = ssClosed_Box; else variable.Optimized = true;
			} else if (head == "appd_b_rec") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Appd_B_Rec")) variable.Value = ssAppd_B_Rec; else variable.Optimized = true;
			} else if (head == "matcmpllvl") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matcmpllvl")) variable.Value = ssMatcmpllvl; else variable.Optimized = true;
			} else if (head == "par_eff") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Par_Eff")) variable.Value = ssPar_Eff; else variable.Optimized = true;
			} else if (head == "round_up_rule_expiration_date") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Round_Up_Rule_Expiration_Date")) variable.Value = ssRound_Up_Rule_Expiration_Date; else variable.Optimized = true;
			} else if (head == "period_ind_expiration_date") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Period_Ind_Expiration_Date")) variable.Value = ssPeriod_Ind_Expiration_Date; else variable.Optimized = true;
			} else if (head == "prod_composition_on_packaging") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Composition_On_Packaging")) variable.Value = ssProd_Composition_On_Packaging; else variable.Optimized = true;
			} else if (head == "item_cat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Item_Cat")) variable.Value = ssItem_Cat; else variable.Optimized = true;
			} else if (head == "haz_mat_no_external") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Haz_Mat_No_External")) variable.Value = ssHaz_Mat_No_External; else variable.Optimized = true;
			} else if (head == "haz_mat_no_guid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Haz_Mat_No_Guid")) variable.Value = ssHaz_Mat_No_Guid; else variable.Optimized = true;
			} else if (head == "haz_mat_no_version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Haz_Mat_No_Version")) variable.Value = ssHaz_Mat_No_Version; else variable.Optimized = true;
			} else if (head == "inv_mat_no_external") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Inv_Mat_No_External")) variable.Value = ssInv_Mat_No_External; else variable.Optimized = true;
			} else if (head == "inv_mat_no_guid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Inv_Mat_No_Guid")) variable.Value = ssInv_Mat_No_Guid; else variable.Optimized = true;
			} else if (head == "inv_mat_no_version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Inv_Mat_No_Version")) variable.Value = ssInv_Mat_No_Version; else variable.Optimized = true;
			} else if (head == "material_fixed") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Material_Fixed")) variable.Value = ssMaterial_Fixed; else variable.Optimized = true;
			} else if (head == "cm_relevance_flag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Cm_Relevance_Flag")) variable.Value = ssCm_Relevance_Flag; else variable.Optimized = true;
			} else if (head == "sled_bbd") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sled_Bbd")) variable.Value = ssSled_Bbd; else variable.Optimized = true;
			} else if (head == "gtin_variant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Gtin_Variant")) variable.Value = ssGtin_Variant; else variable.Optimized = true;
			} else if (head == "serialization_level") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Serialization_Level")) variable.Value = ssSerialization_Level; else variable.Optimized = true;
			} else if (head == "pl_ref_mat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pl_Ref_Mat")) variable.Value = ssPl_Ref_Mat; else variable.Optimized = true;
			} else if (head == "extmatlgrp") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Extmatlgrp")) variable.Value = ssExtmatlgrp; else variable.Optimized = true;
			} else if (head == "uomusage") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Uomusage")) variable.Value = ssUomusage; else variable.Optimized = true;
			} else if (head == "gds_relevant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Gds_Relevant")) variable.Value = ssGds_Relevant; else variable.Optimized = true;
			} else if (head == "material_external") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Material_External")) variable.Value = ssMaterial_External; else variable.Optimized = true;
			} else if (head == "material_guid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Material_Guid")) variable.Value = ssMaterial_Guid; else variable.Optimized = true;
			} else if (head == "material_version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Material_Version")) variable.Value = ssMaterial_Version; else variable.Optimized = true;
			} else if (head == "conf_matl_external") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Conf_Matl_External")) variable.Value = ssConf_Matl_External; else variable.Optimized = true;
			} else if (head == "conf_matl_guid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Conf_Matl_Guid")) variable.Value = ssConf_Matl_Guid; else variable.Optimized = true;
			} else if (head == "conf_matl_version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Conf_Matl_Version")) variable.Value = ssConf_Matl_Version; else variable.Optimized = true;
			} else if (head == "pl_ref_mat_external") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pl_Ref_Mat_External")) variable.Value = ssPl_Ref_Mat_External; else variable.Optimized = true;
			} else if (head == "pl_ref_mat_guid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pl_Ref_Mat_Guid")) variable.Value = ssPl_Ref_Mat_Guid; else variable.Optimized = true;
			} else if (head == "pl_ref_mat_version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pl_Ref_Mat_Version")) variable.Value = ssPl_Ref_Mat_Version; else variable.Optimized = true;
			} else if (head == "pr_ref_mat_external") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pr_Ref_Mat_External")) variable.Value = ssPr_Ref_Mat_External; else variable.Optimized = true;
			} else if (head == "pr_ref_mat_guid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pr_Ref_Mat_Guid")) variable.Value = ssPr_Ref_Mat_Guid; else variable.Optimized = true;
			} else if (head == "pr_ref_mat_version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pr_Ref_Mat_Version")) variable.Value = ssPr_Ref_Mat_Version; else variable.Optimized = true;
			} else if (head == "we_origin_acceptance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".We_Origin_Acceptance")) variable.Value = ssWe_Origin_Acceptance; else variable.Optimized = true;
			} else if (head == "std_hu_type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Std_Hu_Type")) variable.Value = ssStd_Hu_Type; else variable.Optimized = true;
			} else if (head == "pilferable") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pilferable")) variable.Value = ssPilferable; else variable.Optimized = true;
			} else if (head == "whse_storage_condition") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Whse_Storage_Condition")) variable.Value = ssWhse_Storage_Condition; else variable.Optimized = true;
			} else if (head == "whse_material_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Whse_Material_Group")) variable.Value = ssWhse_Material_Group; else variable.Optimized = true;
			} else if (head == "handling_indicator") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Handling_Indicator")) variable.Value = ssHandling_Indicator; else variable.Optimized = true;
			} else if (head == "haz_mat_relevant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Haz_Mat_Relevant")) variable.Value = ssHaz_Mat_Relevant; else variable.Optimized = true;
			} else if (head == "hu_type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Hu_Type")) variable.Value = ssHu_Type; else variable.Optimized = true;
			} else if (head == "variable_tare_weight") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Variable_Tare_Weight")) variable.Value = ssVariable_Tare_Weight; else variable.Optimized = true;
			} else if (head == "max_allowed_capacity") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Max_Allowed_Capacity")) variable.Value = ssMax_Allowed_Capacity; else variable.Optimized = true;
			} else if (head == "overcapacity_tolerance") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Overcapacity_Tolerance")) variable.Value = ssOvercapacity_Tolerance; else variable.Optimized = true;
			} else if (head == "max_allowed_length") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Max_Allowed_Length")) variable.Value = ssMax_Allowed_Length; else variable.Optimized = true;
			} else if (head == "max_allowed_width") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Max_Allowed_Width")) variable.Value = ssMax_Allowed_Width; else variable.Optimized = true;
			} else if (head == "max_allowed_heigth") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Max_Allowed_Heigth")) variable.Value = ssMax_Allowed_Heigth; else variable.Optimized = true;
			} else if (head == "max_dimension_un") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Max_Dimension_Un")) variable.Value = ssMax_Dimension_Un; else variable.Optimized = true;
			} else if (head == "max_dimension_un_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Max_Dimension_Un_Iso")) variable.Value = ssMax_Dimension_Un_Iso; else variable.Optimized = true;
			} else if (head == "countryori") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Countryori")) variable.Value = ssCountryori; else variable.Optimized = true;
			} else if (head == "countryori_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Countryori_Iso")) variable.Value = ssCountryori_Iso; else variable.Optimized = true;
			} else if (head == "matfrgtgrp") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matfrgtgrp")) variable.Value = ssMatfrgtgrp; else variable.Optimized = true;
			} else if (head == "quarantine_period") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Quarantine_Period")) variable.Value = ssQuarantine_Period; else variable.Optimized = true;
			} else if (head == "quarantine_period_un") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Quarantine_Period_Un")) variable.Value = ssQuarantine_Period_Un; else variable.Optimized = true;
			} else if (head == "quarantine_period_un_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Quarantine_Period_Un_Iso")) variable.Value = ssQuarantine_Period_Un_Iso; else variable.Optimized = true;
			} else if (head == "quality_insp_grp") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Quality_Insp_Grp")) variable.Value = ssQuality_Insp_Grp; else variable.Optimized = true;
			} else if (head == "serial_number_profile") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Serial_Number_Profile")) variable.Value = ssSerial_Number_Profile; else variable.Optimized = true;
			} else if (head == "ewm_cw_relevant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ewm_Cw_Relevant")) variable.Value = ssEwm_Cw_Relevant; else variable.Optimized = true;
			} else if (head == "ewm_cw_logistical_unit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ewm_Cw_Logistical_Unit")) variable.Value = ssEwm_Cw_Logistical_Unit; else variable.Optimized = true;
			} else if (head == "ewm_cw_logistical_unit_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ewm_Cw_Logistical_Unit_Iso")) variable.Value = ssEwm_Cw_Logistical_Unit_Iso; else variable.Optimized = true;
			} else if (head == "ewm_cw_tolerance_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ewm_Cw_Tolerance_Group")) variable.Value = ssEwm_Cw_Tolerance_Group; else variable.Optimized = true;
			} else if (head == "ewm_cw_input_control") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ewm_Cw_Input_Control")) variable.Value = ssEwm_Cw_Input_Control; else variable.Optimized = true;
			} else if (head == "pacod") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pacod")) variable.Value = ssPacod; else variable.Optimized = true;
			} else if (head == "dg_pckging_status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Dg_Pckging_Status")) variable.Value = ssDg_Pckging_Status; else variable.Optimized = true;
			} else if (head == "adjust_profile") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Adjust_Profile")) variable.Value = ssAdjust_Profile; else variable.Optimized = true;
			} else if (head == "ipmipproduct") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ipmipproduct")) variable.Value = ssIpmipproduct; else variable.Optimized = true;
			} else if (head == "medium") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Medium")) variable.Value = ssMedium; else variable.Optimized = true;
			} else if (head == "nsnid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Nsnid")) variable.Value = ssNsnid; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMaterial) {
				return ssMaterial;
			} else if (key == IdInd_Sector) {
				return ssInd_Sector;
			} else if (key == IdMatl_Type) {
				return ssMatl_Type;
			} else if (key == IdCreated_On) {
				return ssCreated_On;
			} else if (key == IdCreated_By) {
				return ssCreated_By;
			} else if (key == IdLast_Chnge) {
				return ssLast_Chnge;
			} else if (key == IdChanged_By) {
				return ssChanged_By;
			} else if (key == IdMat_Status) {
				return ssMat_Status;
			} else if (key == IdMaint_Stat) {
				return ssMaint_Stat;
			} else if (key == IdDel_Flag) {
				return ssDel_Flag;
			} else if (key == IdMatl_Group) {
				return ssMatl_Group;
			} else if (key == IdOld_Mat_No) {
				return ssOld_Mat_No;
			} else if (key == IdBase_Uom) {
				return ssBase_Uom;
			} else if (key == IdBase_Uom_Iso) {
				return ssBase_Uom_Iso;
			} else if (key == IdPo_Unit) {
				return ssPo_Unit;
			} else if (key == IdPo_Unit_Iso) {
				return ssPo_Unit_Iso;
			} else if (key == IdDocument) {
				return ssDocument;
			} else if (key == IdDoc_Type) {
				return ssDoc_Type;
			} else if (key == IdDoc_Vers) {
				return ssDoc_Vers;
			} else if (key == IdDoc_Format) {
				return ssDoc_Format;
			} else if (key == IdDoc_Chg_No) {
				return ssDoc_Chg_No;
			} else if (key == IdPage_No) {
				return ssPage_No;
			} else if (key == IdNo_Sheets) {
				return ssNo_Sheets;
			} else if (key == IdProd_Memo) {
				return ssProd_Memo;
			} else if (key == IdPageformat) {
				return ssPageformat;
			} else if (key == IdSize_Dim) {
				return ssSize_Dim;
			} else if (key == IdBasic_Matl) {
				return ssBasic_Matl;
			} else if (key == IdStd_Descr) {
				return ssStd_Descr;
			} else if (key == IdDsn_Office) {
				return ssDsn_Office;
			} else if (key == IdPur_Valkey) {
				return ssPur_Valkey;
			} else if (key == IdNet_Weight) {
				return ssNet_Weight;
			} else if (key == IdUnit_Of_Wt) {
				return ssUnit_Of_Wt;
			} else if (key == IdUnit_Of_Wt_Iso) {
				return ssUnit_Of_Wt_Iso;
			} else if (key == IdContainer) {
				return ssContainer;
			} else if (key == IdStor_Conds) {
				return ssStor_Conds;
			} else if (key == IdTemp_Conds) {
				return ssTemp_Conds;
			} else if (key == IdTrans_Grp) {
				return ssTrans_Grp;
			} else if (key == IdHaz_Mat_No) {
				return ssHaz_Mat_No;
			} else if (key == IdDivision) {
				return ssDivision;
			} else if (key == IdCompetitor) {
				return ssCompetitor;
			} else if (key == IdQty_Gr_Gi) {
				return ssQty_Gr_Gi;
			} else if (key == IdProc_Rule) {
				return ssProc_Rule;
			} else if (key == IdSup_Source) {
				return ssSup_Source;
			} else if (key == IdSeason) {
				return ssSeason;
			} else if (key == IdLabel_Type) {
				return ssLabel_Type;
			} else if (key == IdLabel_Form) {
				return ssLabel_Form;
			} else if (key == IdProd_Hier) {
				return ssProd_Hier;
			} else if (key == IdCad_Id) {
				return ssCad_Id;
			} else if (key == IdAllowed_Wt) {
				return ssAllowed_Wt;
			} else if (key == IdPack_Wt_Un) {
				return ssPack_Wt_Un;
			} else if (key == IdPack_Wt_Un_Iso) {
				return ssPack_Wt_Un_Iso;
			} else if (key == IdAllwd_Vol) {
				return ssAllwd_Vol;
			} else if (key == IdPack_Vo_Un) {
				return ssPack_Vo_Un;
			} else if (key == IdPack_Vo_Un_Iso) {
				return ssPack_Vo_Un_Iso;
			} else if (key == IdWt_Tol_Lt) {
				return ssWt_Tol_Lt;
			} else if (key == IdVol_Tol_Lt) {
				return ssVol_Tol_Lt;
			} else if (key == IdVar_Ord_Un) {
				return ssVar_Ord_Un;
			} else if (key == IdConfigured) {
				return ssConfigured;
			} else if (key == IdBatch_Mgmt) {
				return ssBatch_Mgmt;
			} else if (key == IdSh_Mat_Typ) {
				return ssSh_Mat_Typ;
			} else if (key == IdFill_Level) {
				return ssFill_Level;
			} else if (key == IdStack_Fact) {
				return ssStack_Fact;
			} else if (key == IdMat_Grp_Sm) {
				return ssMat_Grp_Sm;
			} else if (key == IdAuthoritygroup) {
				return ssAuthoritygroup;
			} else if (key == IdQm_Procmnt) {
				return ssQm_Procmnt;
			} else if (key == IdCatprofile) {
				return ssCatprofile;
			} else if (key == IdMinremlife) {
				return ssMinremlife;
			} else if (key == IdShelf_Life) {
				return ssShelf_Life;
			} else if (key == IdStor_Pct) {
				return ssStor_Pct;
			} else if (key == IdConf_Matl) {
				return ssConf_Matl;
			} else if (key == IdCo_Product) {
				return ssCo_Product;
			} else if (key == IdPr_Ref_Mat) {
				return ssPr_Ref_Mat;
			} else if (key == IdPur_Status) {
				return ssPur_Status;
			} else if (key == IdSal_Status) {
				return ssSal_Status;
			} else if (key == IdPvalidfrom) {
				return ssPvalidfrom;
			} else if (key == IdSvalidfrom) {
				return ssSvalidfrom;
			} else if (key == IdEnvt_Rlvt) {
				return ssEnvt_Rlvt;
			} else if (key == IdProd_Alloc) {
				return ssProd_Alloc;
			} else if (key == IdQual_Dik) {
				return ssQual_Dik;
			} else if (key == IdManu_Mat) {
				return ssManu_Mat;
			} else if (key == IdMfr_No) {
				return ssMfr_No;
			} else if (key == IdInv_Mat_No) {
				return ssInv_Mat_No;
			} else if (key == IdManuf_Prof) {
				return ssManuf_Prof;
			} else if (key == IdHazmatprof) {
				return ssHazmatprof;
			} else if (key == IdHigh_Visc) {
				return ssHigh_Visc;
			} else if (key == IdLooseorliq) {
				return ssLooseorliq;
			} else if (key == IdClosed_Box) {
				return ssClosed_Box;
			} else if (key == IdAppd_B_Rec) {
				return ssAppd_B_Rec;
			} else if (key == IdMatcmpllvl) {
				return ssMatcmpllvl;
			} else if (key == IdPar_Eff) {
				return ssPar_Eff;
			} else if (key == IdRound_Up_Rule_Expiration_Date) {
				return ssRound_Up_Rule_Expiration_Date;
			} else if (key == IdPeriod_Ind_Expiration_Date) {
				return ssPeriod_Ind_Expiration_Date;
			} else if (key == IdProd_Composition_On_Packaging) {
				return ssProd_Composition_On_Packaging;
			} else if (key == IdItem_Cat) {
				return ssItem_Cat;
			} else if (key == IdHaz_Mat_No_External) {
				return ssHaz_Mat_No_External;
			} else if (key == IdHaz_Mat_No_Guid) {
				return ssHaz_Mat_No_Guid;
			} else if (key == IdHaz_Mat_No_Version) {
				return ssHaz_Mat_No_Version;
			} else if (key == IdInv_Mat_No_External) {
				return ssInv_Mat_No_External;
			} else if (key == IdInv_Mat_No_Guid) {
				return ssInv_Mat_No_Guid;
			} else if (key == IdInv_Mat_No_Version) {
				return ssInv_Mat_No_Version;
			} else if (key == IdMaterial_Fixed) {
				return ssMaterial_Fixed;
			} else if (key == IdCm_Relevance_Flag) {
				return ssCm_Relevance_Flag;
			} else if (key == IdSled_Bbd) {
				return ssSled_Bbd;
			} else if (key == IdGtin_Variant) {
				return ssGtin_Variant;
			} else if (key == IdSerialization_Level) {
				return ssSerialization_Level;
			} else if (key == IdPl_Ref_Mat) {
				return ssPl_Ref_Mat;
			} else if (key == IdExtmatlgrp) {
				return ssExtmatlgrp;
			} else if (key == IdUomusage) {
				return ssUomusage;
			} else if (key == IdGds_Relevant) {
				return ssGds_Relevant;
			} else if (key == IdMaterial_External) {
				return ssMaterial_External;
			} else if (key == IdMaterial_Guid) {
				return ssMaterial_Guid;
			} else if (key == IdMaterial_Version) {
				return ssMaterial_Version;
			} else if (key == IdConf_Matl_External) {
				return ssConf_Matl_External;
			} else if (key == IdConf_Matl_Guid) {
				return ssConf_Matl_Guid;
			} else if (key == IdConf_Matl_Version) {
				return ssConf_Matl_Version;
			} else if (key == IdPl_Ref_Mat_External) {
				return ssPl_Ref_Mat_External;
			} else if (key == IdPl_Ref_Mat_Guid) {
				return ssPl_Ref_Mat_Guid;
			} else if (key == IdPl_Ref_Mat_Version) {
				return ssPl_Ref_Mat_Version;
			} else if (key == IdPr_Ref_Mat_External) {
				return ssPr_Ref_Mat_External;
			} else if (key == IdPr_Ref_Mat_Guid) {
				return ssPr_Ref_Mat_Guid;
			} else if (key == IdPr_Ref_Mat_Version) {
				return ssPr_Ref_Mat_Version;
			} else if (key == IdWe_Origin_Acceptance) {
				return ssWe_Origin_Acceptance;
			} else if (key == IdStd_Hu_Type) {
				return ssStd_Hu_Type;
			} else if (key == IdPilferable) {
				return ssPilferable;
			} else if (key == IdWhse_Storage_Condition) {
				return ssWhse_Storage_Condition;
			} else if (key == IdWhse_Material_Group) {
				return ssWhse_Material_Group;
			} else if (key == IdHandling_Indicator) {
				return ssHandling_Indicator;
			} else if (key == IdHaz_Mat_Relevant) {
				return ssHaz_Mat_Relevant;
			} else if (key == IdHu_Type) {
				return ssHu_Type;
			} else if (key == IdVariable_Tare_Weight) {
				return ssVariable_Tare_Weight;
			} else if (key == IdMax_Allowed_Capacity) {
				return ssMax_Allowed_Capacity;
			} else if (key == IdOvercapacity_Tolerance) {
				return ssOvercapacity_Tolerance;
			} else if (key == IdMax_Allowed_Length) {
				return ssMax_Allowed_Length;
			} else if (key == IdMax_Allowed_Width) {
				return ssMax_Allowed_Width;
			} else if (key == IdMax_Allowed_Heigth) {
				return ssMax_Allowed_Heigth;
			} else if (key == IdMax_Dimension_Un) {
				return ssMax_Dimension_Un;
			} else if (key == IdMax_Dimension_Un_Iso) {
				return ssMax_Dimension_Un_Iso;
			} else if (key == IdCountryori) {
				return ssCountryori;
			} else if (key == IdCountryori_Iso) {
				return ssCountryori_Iso;
			} else if (key == IdMatfrgtgrp) {
				return ssMatfrgtgrp;
			} else if (key == IdQuarantine_Period) {
				return ssQuarantine_Period;
			} else if (key == IdQuarantine_Period_Un) {
				return ssQuarantine_Period_Un;
			} else if (key == IdQuarantine_Period_Un_Iso) {
				return ssQuarantine_Period_Un_Iso;
			} else if (key == IdQuality_Insp_Grp) {
				return ssQuality_Insp_Grp;
			} else if (key == IdSerial_Number_Profile) {
				return ssSerial_Number_Profile;
			} else if (key == IdEwm_Cw_Relevant) {
				return ssEwm_Cw_Relevant;
			} else if (key == IdEwm_Cw_Logistical_Unit) {
				return ssEwm_Cw_Logistical_Unit;
			} else if (key == IdEwm_Cw_Logistical_Unit_Iso) {
				return ssEwm_Cw_Logistical_Unit_Iso;
			} else if (key == IdEwm_Cw_Tolerance_Group) {
				return ssEwm_Cw_Tolerance_Group;
			} else if (key == IdEwm_Cw_Input_Control) {
				return ssEwm_Cw_Input_Control;
			} else if (key == IdPacod) {
				return ssPacod;
			} else if (key == IdDg_Pckging_Status) {
				return ssDg_Pckging_Status;
			} else if (key == IdAdjust_Profile) {
				return ssAdjust_Profile;
			} else if (key == IdIpmipproduct) {
				return ssIpmipproduct;
			} else if (key == IdMedium) {
				return ssMedium;
			} else if (key == IdNsnid) {
				return ssNsnid;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssMaterial = (string) other.AttributeGet(IdMaterial);
			ssInd_Sector = (string) other.AttributeGet(IdInd_Sector);
			ssMatl_Type = (string) other.AttributeGet(IdMatl_Type);
			ssCreated_On = (DateTime) other.AttributeGet(IdCreated_On);
			ssCreated_By = (string) other.AttributeGet(IdCreated_By);
			ssLast_Chnge = (DateTime) other.AttributeGet(IdLast_Chnge);
			ssChanged_By = (string) other.AttributeGet(IdChanged_By);
			ssMat_Status = (string) other.AttributeGet(IdMat_Status);
			ssMaint_Stat = (string) other.AttributeGet(IdMaint_Stat);
			ssDel_Flag = (string) other.AttributeGet(IdDel_Flag);
			ssMatl_Group = (string) other.AttributeGet(IdMatl_Group);
			ssOld_Mat_No = (string) other.AttributeGet(IdOld_Mat_No);
			ssBase_Uom = (string) other.AttributeGet(IdBase_Uom);
			ssBase_Uom_Iso = (string) other.AttributeGet(IdBase_Uom_Iso);
			ssPo_Unit = (string) other.AttributeGet(IdPo_Unit);
			ssPo_Unit_Iso = (string) other.AttributeGet(IdPo_Unit_Iso);
			ssDocument = (string) other.AttributeGet(IdDocument);
			ssDoc_Type = (string) other.AttributeGet(IdDoc_Type);
			ssDoc_Vers = (string) other.AttributeGet(IdDoc_Vers);
			ssDoc_Format = (string) other.AttributeGet(IdDoc_Format);
			ssDoc_Chg_No = (string) other.AttributeGet(IdDoc_Chg_No);
			ssPage_No = (string) other.AttributeGet(IdPage_No);
			ssNo_Sheets = (string) other.AttributeGet(IdNo_Sheets);
			ssProd_Memo = (string) other.AttributeGet(IdProd_Memo);
			ssPageformat = (string) other.AttributeGet(IdPageformat);
			ssSize_Dim = (string) other.AttributeGet(IdSize_Dim);
			ssBasic_Matl = (string) other.AttributeGet(IdBasic_Matl);
			ssStd_Descr = (string) other.AttributeGet(IdStd_Descr);
			ssDsn_Office = (string) other.AttributeGet(IdDsn_Office);
			ssPur_Valkey = (string) other.AttributeGet(IdPur_Valkey);
			ssNet_Weight = (decimal) other.AttributeGet(IdNet_Weight);
			ssUnit_Of_Wt = (string) other.AttributeGet(IdUnit_Of_Wt);
			ssUnit_Of_Wt_Iso = (string) other.AttributeGet(IdUnit_Of_Wt_Iso);
			ssContainer = (string) other.AttributeGet(IdContainer);
			ssStor_Conds = (string) other.AttributeGet(IdStor_Conds);
			ssTemp_Conds = (string) other.AttributeGet(IdTemp_Conds);
			ssTrans_Grp = (string) other.AttributeGet(IdTrans_Grp);
			ssHaz_Mat_No = (string) other.AttributeGet(IdHaz_Mat_No);
			ssDivision = (string) other.AttributeGet(IdDivision);
			ssCompetitor = (string) other.AttributeGet(IdCompetitor);
			ssQty_Gr_Gi = (decimal) other.AttributeGet(IdQty_Gr_Gi);
			ssProc_Rule = (string) other.AttributeGet(IdProc_Rule);
			ssSup_Source = (string) other.AttributeGet(IdSup_Source);
			ssSeason = (string) other.AttributeGet(IdSeason);
			ssLabel_Type = (string) other.AttributeGet(IdLabel_Type);
			ssLabel_Form = (string) other.AttributeGet(IdLabel_Form);
			ssProd_Hier = (string) other.AttributeGet(IdProd_Hier);
			ssCad_Id = (string) other.AttributeGet(IdCad_Id);
			ssAllowed_Wt = (decimal) other.AttributeGet(IdAllowed_Wt);
			ssPack_Wt_Un = (string) other.AttributeGet(IdPack_Wt_Un);
			ssPack_Wt_Un_Iso = (string) other.AttributeGet(IdPack_Wt_Un_Iso);
			ssAllwd_Vol = (decimal) other.AttributeGet(IdAllwd_Vol);
			ssPack_Vo_Un = (string) other.AttributeGet(IdPack_Vo_Un);
			ssPack_Vo_Un_Iso = (string) other.AttributeGet(IdPack_Vo_Un_Iso);
			ssWt_Tol_Lt = (decimal) other.AttributeGet(IdWt_Tol_Lt);
			ssVol_Tol_Lt = (decimal) other.AttributeGet(IdVol_Tol_Lt);
			ssVar_Ord_Un = (string) other.AttributeGet(IdVar_Ord_Un);
			ssConfigured = (string) other.AttributeGet(IdConfigured);
			ssBatch_Mgmt = (string) other.AttributeGet(IdBatch_Mgmt);
			ssSh_Mat_Typ = (string) other.AttributeGet(IdSh_Mat_Typ);
			ssFill_Level = (decimal) other.AttributeGet(IdFill_Level);
			ssStack_Fact = (int) other.AttributeGet(IdStack_Fact);
			ssMat_Grp_Sm = (string) other.AttributeGet(IdMat_Grp_Sm);
			ssAuthoritygroup = (string) other.AttributeGet(IdAuthoritygroup);
			ssQm_Procmnt = (string) other.AttributeGet(IdQm_Procmnt);
			ssCatprofile = (string) other.AttributeGet(IdCatprofile);
			ssMinremlife = (decimal) other.AttributeGet(IdMinremlife);
			ssShelf_Life = (decimal) other.AttributeGet(IdShelf_Life);
			ssStor_Pct = (decimal) other.AttributeGet(IdStor_Pct);
			ssConf_Matl = (string) other.AttributeGet(IdConf_Matl);
			ssCo_Product = (string) other.AttributeGet(IdCo_Product);
			ssPr_Ref_Mat = (string) other.AttributeGet(IdPr_Ref_Mat);
			ssPur_Status = (string) other.AttributeGet(IdPur_Status);
			ssSal_Status = (string) other.AttributeGet(IdSal_Status);
			ssPvalidfrom = (DateTime) other.AttributeGet(IdPvalidfrom);
			ssSvalidfrom = (DateTime) other.AttributeGet(IdSvalidfrom);
			ssEnvt_Rlvt = (string) other.AttributeGet(IdEnvt_Rlvt);
			ssProd_Alloc = (string) other.AttributeGet(IdProd_Alloc);
			ssQual_Dik = (string) other.AttributeGet(IdQual_Dik);
			ssManu_Mat = (string) other.AttributeGet(IdManu_Mat);
			ssMfr_No = (string) other.AttributeGet(IdMfr_No);
			ssInv_Mat_No = (string) other.AttributeGet(IdInv_Mat_No);
			ssManuf_Prof = (string) other.AttributeGet(IdManuf_Prof);
			ssHazmatprof = (string) other.AttributeGet(IdHazmatprof);
			ssHigh_Visc = (string) other.AttributeGet(IdHigh_Visc);
			ssLooseorliq = (string) other.AttributeGet(IdLooseorliq);
			ssClosed_Box = (string) other.AttributeGet(IdClosed_Box);
			ssAppd_B_Rec = (string) other.AttributeGet(IdAppd_B_Rec);
			ssMatcmpllvl = (string) other.AttributeGet(IdMatcmpllvl);
			ssPar_Eff = (string) other.AttributeGet(IdPar_Eff);
			ssRound_Up_Rule_Expiration_Date = (string) other.AttributeGet(IdRound_Up_Rule_Expiration_Date);
			ssPeriod_Ind_Expiration_Date = (string) other.AttributeGet(IdPeriod_Ind_Expiration_Date);
			ssProd_Composition_On_Packaging = (string) other.AttributeGet(IdProd_Composition_On_Packaging);
			ssItem_Cat = (string) other.AttributeGet(IdItem_Cat);
			ssHaz_Mat_No_External = (string) other.AttributeGet(IdHaz_Mat_No_External);
			ssHaz_Mat_No_Guid = (string) other.AttributeGet(IdHaz_Mat_No_Guid);
			ssHaz_Mat_No_Version = (string) other.AttributeGet(IdHaz_Mat_No_Version);
			ssInv_Mat_No_External = (string) other.AttributeGet(IdInv_Mat_No_External);
			ssInv_Mat_No_Guid = (string) other.AttributeGet(IdInv_Mat_No_Guid);
			ssInv_Mat_No_Version = (string) other.AttributeGet(IdInv_Mat_No_Version);
			ssMaterial_Fixed = (string) other.AttributeGet(IdMaterial_Fixed);
			ssCm_Relevance_Flag = (string) other.AttributeGet(IdCm_Relevance_Flag);
			ssSled_Bbd = (string) other.AttributeGet(IdSled_Bbd);
			ssGtin_Variant = (string) other.AttributeGet(IdGtin_Variant);
			ssSerialization_Level = (string) other.AttributeGet(IdSerialization_Level);
			ssPl_Ref_Mat = (string) other.AttributeGet(IdPl_Ref_Mat);
			ssExtmatlgrp = (string) other.AttributeGet(IdExtmatlgrp);
			ssUomusage = (string) other.AttributeGet(IdUomusage);
			ssGds_Relevant = (string) other.AttributeGet(IdGds_Relevant);
			ssMaterial_External = (string) other.AttributeGet(IdMaterial_External);
			ssMaterial_Guid = (string) other.AttributeGet(IdMaterial_Guid);
			ssMaterial_Version = (string) other.AttributeGet(IdMaterial_Version);
			ssConf_Matl_External = (string) other.AttributeGet(IdConf_Matl_External);
			ssConf_Matl_Guid = (string) other.AttributeGet(IdConf_Matl_Guid);
			ssConf_Matl_Version = (string) other.AttributeGet(IdConf_Matl_Version);
			ssPl_Ref_Mat_External = (string) other.AttributeGet(IdPl_Ref_Mat_External);
			ssPl_Ref_Mat_Guid = (string) other.AttributeGet(IdPl_Ref_Mat_Guid);
			ssPl_Ref_Mat_Version = (string) other.AttributeGet(IdPl_Ref_Mat_Version);
			ssPr_Ref_Mat_External = (string) other.AttributeGet(IdPr_Ref_Mat_External);
			ssPr_Ref_Mat_Guid = (string) other.AttributeGet(IdPr_Ref_Mat_Guid);
			ssPr_Ref_Mat_Version = (string) other.AttributeGet(IdPr_Ref_Mat_Version);
			ssWe_Origin_Acceptance = (string) other.AttributeGet(IdWe_Origin_Acceptance);
			ssStd_Hu_Type = (string) other.AttributeGet(IdStd_Hu_Type);
			ssPilferable = (string) other.AttributeGet(IdPilferable);
			ssWhse_Storage_Condition = (string) other.AttributeGet(IdWhse_Storage_Condition);
			ssWhse_Material_Group = (string) other.AttributeGet(IdWhse_Material_Group);
			ssHandling_Indicator = (string) other.AttributeGet(IdHandling_Indicator);
			ssHaz_Mat_Relevant = (string) other.AttributeGet(IdHaz_Mat_Relevant);
			ssHu_Type = (string) other.AttributeGet(IdHu_Type);
			ssVariable_Tare_Weight = (string) other.AttributeGet(IdVariable_Tare_Weight);
			ssMax_Allowed_Capacity = (decimal) other.AttributeGet(IdMax_Allowed_Capacity);
			ssOvercapacity_Tolerance = (decimal) other.AttributeGet(IdOvercapacity_Tolerance);
			ssMax_Allowed_Length = (decimal) other.AttributeGet(IdMax_Allowed_Length);
			ssMax_Allowed_Width = (decimal) other.AttributeGet(IdMax_Allowed_Width);
			ssMax_Allowed_Heigth = (decimal) other.AttributeGet(IdMax_Allowed_Heigth);
			ssMax_Dimension_Un = (string) other.AttributeGet(IdMax_Dimension_Un);
			ssMax_Dimension_Un_Iso = (string) other.AttributeGet(IdMax_Dimension_Un_Iso);
			ssCountryori = (string) other.AttributeGet(IdCountryori);
			ssCountryori_Iso = (string) other.AttributeGet(IdCountryori_Iso);
			ssMatfrgtgrp = (string) other.AttributeGet(IdMatfrgtgrp);
			ssQuarantine_Period = (decimal) other.AttributeGet(IdQuarantine_Period);
			ssQuarantine_Period_Un = (string) other.AttributeGet(IdQuarantine_Period_Un);
			ssQuarantine_Period_Un_Iso = (string) other.AttributeGet(IdQuarantine_Period_Un_Iso);
			ssQuality_Insp_Grp = (string) other.AttributeGet(IdQuality_Insp_Grp);
			ssSerial_Number_Profile = (string) other.AttributeGet(IdSerial_Number_Profile);
			ssEwm_Cw_Relevant = (string) other.AttributeGet(IdEwm_Cw_Relevant);
			ssEwm_Cw_Logistical_Unit = (string) other.AttributeGet(IdEwm_Cw_Logistical_Unit);
			ssEwm_Cw_Logistical_Unit_Iso = (string) other.AttributeGet(IdEwm_Cw_Logistical_Unit_Iso);
			ssEwm_Cw_Tolerance_Group = (string) other.AttributeGet(IdEwm_Cw_Tolerance_Group);
			ssEwm_Cw_Input_Control = (string) other.AttributeGet(IdEwm_Cw_Input_Control);
			ssPacod = (string) other.AttributeGet(IdPacod);
			ssDg_Pckging_Status = (string) other.AttributeGet(IdDg_Pckging_Status);
			ssAdjust_Profile = (string) other.AttributeGet(IdAdjust_Profile);
			ssIpmipproduct = (string) other.AttributeGet(IdIpmipproduct);
			ssMedium = (string) other.AttributeGet(IdMedium);
			ssNsnid = (string) other.AttributeGet(IdNsnid);
		}
	} // STClientdataStructure
	/// <summary>
	/// Structure <code>RCClientdataRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCClientdataRecord: ISerializable, ITypedRecord<RCClientdataRecord> {
		private static readonly GlobalObjectKey IdClientdata = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*aIytWteFSuyE9RttZK1EQQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Clientdata")]
		public STClientdataStructure ssSTClientdata;


		public static implicit operator STClientdataStructure(RCClientdataRecord r) {
			return r.ssSTClientdata;
		}

		public static implicit operator RCClientdataRecord(STClientdataStructure r) {
			RCClientdataRecord res = new RCClientdataRecord(null);
			res.ssSTClientdata = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCClientdataRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTClientdata = new STClientdataStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTClientdata.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTClientdata.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCClientdataRecord r) {
			this = r;
		}


		public static bool operator == (RCClientdataRecord a, RCClientdataRecord b) {
			if (a.ssSTClientdata != b.ssSTClientdata) return false;
			return true;
		}

		public static bool operator != (RCClientdataRecord a, RCClientdataRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCClientdataRecord)) return false;
			return (this == (RCClientdataRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTClientdata.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCClientdataRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTClientdata = new STClientdataStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTClientdata", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTClientdata' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTClientdata = (STClientdataStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTClientdata.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTClientdata.InternalRecursiveSave();
		}


		public RCClientdataRecord Duplicate() {
			RCClientdataRecord t;
			t.ssSTClientdata = (STClientdataStructure) this.ssSTClientdata.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTClientdata.ToXml(this, recordElem, "Clientdata", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "clientdata") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Clientdata")) variable.Value = ssSTClientdata; else variable.Optimized = true;
				variable.SetFieldName("clientdata");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdClientdata) {
				return ssSTClientdata;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTClientdata.FillFromOther((IRecord) other.AttributeGet(IdClientdata));
		}
	} // RCClientdataRecord
	/// <summary>
	/// RecordList type <code>RLClientdataRecordList</code> that represents a record list of
	///  <code>Clientdata</code>
	/// </summary>
	[Serializable()]
	public partial class RLClientdataRecordList: GenericRecordList<RCClientdataRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCClientdataRecord GetElementDefaultValue() {
			return new RCClientdataRecord("");
		}

		public T[] ToArray<T>(Func<RCClientdataRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLClientdataRecordList recordlist, Func<RCClientdataRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLClientdataRecordList ToList<T>(T[] array, Func <T, RCClientdataRecord> converter) {
			RLClientdataRecordList result = new RLClientdataRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLClientdataRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClientdataRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClientdataRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLClientdataRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCClientdataRecord> NewList() {
			return new RLClientdataRecordList();
		}


	} // RLClientdataRecordList
	/// <summary>
	/// RecordList type <code>RLClientdataList</code> that represents a record list of <code>Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text,
	///  Text, Text, Text, Text, Text, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal
	/// , Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Date, Date,
	///  Date, Date, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLClientdataList: GenericRecordList<STClientdataStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STClientdataStructure GetElementDefaultValue() {
			return new STClientdataStructure("");
		}

		public T[] ToArray<T>(Func<STClientdataStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLClientdataList recordlist, Func<STClientdataStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLClientdataList ToList<T>(T[] array, Func <T, STClientdataStructure> converter) {
			RLClientdataList result = new RLClientdataList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLClientdataList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClientdataList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLClientdataList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLClientdataList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STClientdataStructure> NewList() {
			return new RLClientdataList();
		}


	} // RLClientdataList
}

namespace ssTeste_SAP {
	[System.CodeDom.Compiler.GeneratedCodeAttribute("CompilerService", "9.1.616.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute("Clientdata", Namespace= "http://www.outsystems.com")]
	public class WORCClientdataRecord {
		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMaterialSpecified;
		[System.Xml.Serialization.XmlElement("Material")]
		public System.String varWSMaterial;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSInd_SectorSpecified;
		[System.Xml.Serialization.XmlElement("Ind_Sector")]
		public System.String varWSInd_Sector;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_TypeSpecified;
		[System.Xml.Serialization.XmlElement("Matl_Type")]
		public System.String varWSMatl_Type;

		[System.Xml.Serialization.XmlElementAttribute("Created_On", DataType= "date")]
		public System.DateTime varWSCreated_On;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCreated_BySpecified;
		[System.Xml.Serialization.XmlElement("Created_By")]
		public System.String varWSCreated_By;

		[System.Xml.Serialization.XmlElementAttribute("Last_Chnge", DataType= "date")]
		public System.DateTime varWSLast_Chnge;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSChanged_BySpecified;
		[System.Xml.Serialization.XmlElement("Changed_By")]
		public System.String varWSChanged_By;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMat_StatusSpecified;
		[System.Xml.Serialization.XmlElement("Mat_Status")]
		public System.String varWSMat_Status;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMaint_StatSpecified;
		[System.Xml.Serialization.XmlElement("Maint_Stat")]
		public System.String varWSMaint_Stat;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDel_FlagSpecified;
		[System.Xml.Serialization.XmlElement("Del_Flag")]
		public System.String varWSDel_Flag;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_GroupSpecified;
		[System.Xml.Serialization.XmlElement("Matl_Group")]
		public System.String varWSMatl_Group;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSOld_Mat_NoSpecified;
		[System.Xml.Serialization.XmlElement("Old_Mat_No")]
		public System.String varWSOld_Mat_No;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSBase_UomSpecified;
		[System.Xml.Serialization.XmlElement("Base_Uom")]
		public System.String varWSBase_Uom;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSBase_Uom_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Base_Uom_Iso")]
		public System.String varWSBase_Uom_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPo_UnitSpecified;
		[System.Xml.Serialization.XmlElement("Po_Unit")]
		public System.String varWSPo_Unit;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPo_Unit_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Po_Unit_Iso")]
		public System.String varWSPo_Unit_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDocumentSpecified;
		[System.Xml.Serialization.XmlElement("Document")]
		public System.String varWSDocument;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDoc_TypeSpecified;
		[System.Xml.Serialization.XmlElement("Doc_Type")]
		public System.String varWSDoc_Type;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDoc_VersSpecified;
		[System.Xml.Serialization.XmlElement("Doc_Vers")]
		public System.String varWSDoc_Vers;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDoc_FormatSpecified;
		[System.Xml.Serialization.XmlElement("Doc_Format")]
		public System.String varWSDoc_Format;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDoc_Chg_NoSpecified;
		[System.Xml.Serialization.XmlElement("Doc_Chg_No")]
		public System.String varWSDoc_Chg_No;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPage_NoSpecified;
		[System.Xml.Serialization.XmlElement("Page_No")]
		public System.String varWSPage_No;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSNo_SheetsSpecified;
		[System.Xml.Serialization.XmlElement("No_Sheets")]
		public System.String varWSNo_Sheets;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_MemoSpecified;
		[System.Xml.Serialization.XmlElement("Prod_Memo")]
		public System.String varWSProd_Memo;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPageformatSpecified;
		[System.Xml.Serialization.XmlElement("Pageformat")]
		public System.String varWSPageformat;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSize_DimSpecified;
		[System.Xml.Serialization.XmlElement("Size_Dim")]
		public System.String varWSSize_Dim;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSBasic_MatlSpecified;
		[System.Xml.Serialization.XmlElement("Basic_Matl")]
		public System.String varWSBasic_Matl;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSStd_DescrSpecified;
		[System.Xml.Serialization.XmlElement("Std_Descr")]
		public System.String varWSStd_Descr;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDsn_OfficeSpecified;
		[System.Xml.Serialization.XmlElement("Dsn_Office")]
		public System.String varWSDsn_Office;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPur_ValkeySpecified;
		[System.Xml.Serialization.XmlElement("Pur_Valkey")]
		public System.String varWSPur_Valkey;

		[System.Xml.Serialization.XmlElement("Net_Weight")]
		public System.Decimal varWSNet_Weight;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUnit_Of_WtSpecified;
		[System.Xml.Serialization.XmlElement("Unit_Of_Wt")]
		public System.String varWSUnit_Of_Wt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUnit_Of_Wt_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Unit_Of_Wt_Iso")]
		public System.String varWSUnit_Of_Wt_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSContainerSpecified;
		[System.Xml.Serialization.XmlElement("Container")]
		public System.String varWSContainer;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSStor_CondsSpecified;
		[System.Xml.Serialization.XmlElement("Stor_Conds")]
		public System.String varWSStor_Conds;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSTemp_CondsSpecified;
		[System.Xml.Serialization.XmlElement("Temp_Conds")]
		public System.String varWSTemp_Conds;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSTrans_GrpSpecified;
		[System.Xml.Serialization.XmlElement("Trans_Grp")]
		public System.String varWSTrans_Grp;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHaz_Mat_NoSpecified;
		[System.Xml.Serialization.XmlElement("Haz_Mat_No")]
		public System.String varWSHaz_Mat_No;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDivisionSpecified;
		[System.Xml.Serialization.XmlElement("Division")]
		public System.String varWSDivision;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCompetitorSpecified;
		[System.Xml.Serialization.XmlElement("Competitor")]
		public System.String varWSCompetitor;

		[System.Xml.Serialization.XmlElement("Qty_Gr_Gi")]
		public System.Decimal varWSQty_Gr_Gi;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProc_RuleSpecified;
		[System.Xml.Serialization.XmlElement("Proc_Rule")]
		public System.String varWSProc_Rule;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSup_SourceSpecified;
		[System.Xml.Serialization.XmlElement("Sup_Source")]
		public System.String varWSSup_Source;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSeasonSpecified;
		[System.Xml.Serialization.XmlElement("Season")]
		public System.String varWSSeason;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSLabel_TypeSpecified;
		[System.Xml.Serialization.XmlElement("Label_Type")]
		public System.String varWSLabel_Type;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSLabel_FormSpecified;
		[System.Xml.Serialization.XmlElement("Label_Form")]
		public System.String varWSLabel_Form;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_HierSpecified;
		[System.Xml.Serialization.XmlElement("Prod_Hier")]
		public System.String varWSProd_Hier;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCad_IdSpecified;
		[System.Xml.Serialization.XmlElement("Cad_Id")]
		public System.String varWSCad_Id;

		[System.Xml.Serialization.XmlElement("Allowed_Wt")]
		public System.Decimal varWSAllowed_Wt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPack_Wt_UnSpecified;
		[System.Xml.Serialization.XmlElement("Pack_Wt_Un")]
		public System.String varWSPack_Wt_Un;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPack_Wt_Un_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Pack_Wt_Un_Iso")]
		public System.String varWSPack_Wt_Un_Iso;

		[System.Xml.Serialization.XmlElement("Allwd_Vol")]
		public System.Decimal varWSAllwd_Vol;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPack_Vo_UnSpecified;
		[System.Xml.Serialization.XmlElement("Pack_Vo_Un")]
		public System.String varWSPack_Vo_Un;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPack_Vo_Un_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Pack_Vo_Un_Iso")]
		public System.String varWSPack_Vo_Un_Iso;

		[System.Xml.Serialization.XmlElement("Wt_Tol_Lt")]
		public System.Decimal varWSWt_Tol_Lt;

		[System.Xml.Serialization.XmlElement("Vol_Tol_Lt")]
		public System.Decimal varWSVol_Tol_Lt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSVar_Ord_UnSpecified;
		[System.Xml.Serialization.XmlElement("Var_Ord_Un")]
		public System.String varWSVar_Ord_Un;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSConfiguredSpecified;
		[System.Xml.Serialization.XmlElement("Configured")]
		public System.String varWSConfigured;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSBatch_MgmtSpecified;
		[System.Xml.Serialization.XmlElement("Batch_Mgmt")]
		public System.String varWSBatch_Mgmt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSh_Mat_TypSpecified;
		[System.Xml.Serialization.XmlElement("Sh_Mat_Typ")]
		public System.String varWSSh_Mat_Typ;

		[System.Xml.Serialization.XmlElement("Fill_Level")]
		public System.Decimal varWSFill_Level;

		[System.Xml.Serialization.XmlElement("Stack_Fact")]
		public System.Int32 varWSStack_Fact;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMat_Grp_SmSpecified;
		[System.Xml.Serialization.XmlElement("Mat_Grp_Sm")]
		public System.String varWSMat_Grp_Sm;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSAuthoritygroupSpecified;
		[System.Xml.Serialization.XmlElement("Authoritygroup")]
		public System.String varWSAuthoritygroup;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSQm_ProcmntSpecified;
		[System.Xml.Serialization.XmlElement("Qm_Procmnt")]
		public System.String varWSQm_Procmnt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCatprofileSpecified;
		[System.Xml.Serialization.XmlElement("Catprofile")]
		public System.String varWSCatprofile;

		[System.Xml.Serialization.XmlElement("Minremlife")]
		public System.Decimal varWSMinremlife;

		[System.Xml.Serialization.XmlElement("Shelf_Life")]
		public System.Decimal varWSShelf_Life;

		[System.Xml.Serialization.XmlElement("Stor_Pct")]
		public System.Decimal varWSStor_Pct;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSConf_MatlSpecified;
		[System.Xml.Serialization.XmlElement("Conf_Matl")]
		public System.String varWSConf_Matl;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCo_ProductSpecified;
		[System.Xml.Serialization.XmlElement("Co_Product")]
		public System.String varWSCo_Product;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPr_Ref_MatSpecified;
		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat")]
		public System.String varWSPr_Ref_Mat;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPur_StatusSpecified;
		[System.Xml.Serialization.XmlElement("Pur_Status")]
		public System.String varWSPur_Status;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSal_StatusSpecified;
		[System.Xml.Serialization.XmlElement("Sal_Status")]
		public System.String varWSSal_Status;

		[System.Xml.Serialization.XmlElementAttribute("Pvalidfrom", DataType= "date")]
		public System.DateTime varWSPvalidfrom;

		[System.Xml.Serialization.XmlElementAttribute("Svalidfrom", DataType= "date")]
		public System.DateTime varWSSvalidfrom;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEnvt_RlvtSpecified;
		[System.Xml.Serialization.XmlElement("Envt_Rlvt")]
		public System.String varWSEnvt_Rlvt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_AllocSpecified;
		[System.Xml.Serialization.XmlElement("Prod_Alloc")]
		public System.String varWSProd_Alloc;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSQual_DikSpecified;
		[System.Xml.Serialization.XmlElement("Qual_Dik")]
		public System.String varWSQual_Dik;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSManu_MatSpecified;
		[System.Xml.Serialization.XmlElement("Manu_Mat")]
		public System.String varWSManu_Mat;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMfr_NoSpecified;
		[System.Xml.Serialization.XmlElement("Mfr_No")]
		public System.String varWSMfr_No;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSInv_Mat_NoSpecified;
		[System.Xml.Serialization.XmlElement("Inv_Mat_No")]
		public System.String varWSInv_Mat_No;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSManuf_ProfSpecified;
		[System.Xml.Serialization.XmlElement("Manuf_Prof")]
		public System.String varWSManuf_Prof;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHazmatprofSpecified;
		[System.Xml.Serialization.XmlElement("Hazmatprof")]
		public System.String varWSHazmatprof;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHigh_ViscSpecified;
		[System.Xml.Serialization.XmlElement("High_Visc")]
		public System.String varWSHigh_Visc;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSLooseorliqSpecified;
		[System.Xml.Serialization.XmlElement("Looseorliq")]
		public System.String varWSLooseorliq;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSClosed_BoxSpecified;
		[System.Xml.Serialization.XmlElement("Closed_Box")]
		public System.String varWSClosed_Box;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSAppd_B_RecSpecified;
		[System.Xml.Serialization.XmlElement("Appd_B_Rec")]
		public System.String varWSAppd_B_Rec;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatcmpllvlSpecified;
		[System.Xml.Serialization.XmlElement("Matcmpllvl")]
		public System.String varWSMatcmpllvl;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPar_EffSpecified;
		[System.Xml.Serialization.XmlElement("Par_Eff")]
		public System.String varWSPar_Eff;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSRound_Up_Rule_Expiration_DateSpecified;
		[System.Xml.Serialization.XmlElement("Round_Up_Rule_Expiration_Date")]
		public System.String varWSRound_Up_Rule_Expiration_Date;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPeriod_Ind_Expiration_DateSpecified;
		[System.Xml.Serialization.XmlElement("Period_Ind_Expiration_Date")]
		public System.String varWSPeriod_Ind_Expiration_Date;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Composition_On_PackagingSpecified;
		[System.Xml.Serialization.XmlElement("Prod_Composition_On_Packaging")]
		public System.String varWSProd_Composition_On_Packaging;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSItem_CatSpecified;
		[System.Xml.Serialization.XmlElement("Item_Cat")]
		public System.String varWSItem_Cat;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHaz_Mat_No_ExternalSpecified;
		[System.Xml.Serialization.XmlElement("Haz_Mat_No_External")]
		public System.String varWSHaz_Mat_No_External;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHaz_Mat_No_GuidSpecified;
		[System.Xml.Serialization.XmlElement("Haz_Mat_No_Guid")]
		public System.String varWSHaz_Mat_No_Guid;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHaz_Mat_No_VersionSpecified;
		[System.Xml.Serialization.XmlElement("Haz_Mat_No_Version")]
		public System.String varWSHaz_Mat_No_Version;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSInv_Mat_No_ExternalSpecified;
		[System.Xml.Serialization.XmlElement("Inv_Mat_No_External")]
		public System.String varWSInv_Mat_No_External;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSInv_Mat_No_GuidSpecified;
		[System.Xml.Serialization.XmlElement("Inv_Mat_No_Guid")]
		public System.String varWSInv_Mat_No_Guid;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSInv_Mat_No_VersionSpecified;
		[System.Xml.Serialization.XmlElement("Inv_Mat_No_Version")]
		public System.String varWSInv_Mat_No_Version;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMaterial_FixedSpecified;
		[System.Xml.Serialization.XmlElement("Material_Fixed")]
		public System.String varWSMaterial_Fixed;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCm_Relevance_FlagSpecified;
		[System.Xml.Serialization.XmlElement("Cm_Relevance_Flag")]
		public System.String varWSCm_Relevance_Flag;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSled_BbdSpecified;
		[System.Xml.Serialization.XmlElement("Sled_Bbd")]
		public System.String varWSSled_Bbd;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSGtin_VariantSpecified;
		[System.Xml.Serialization.XmlElement("Gtin_Variant")]
		public System.String varWSGtin_Variant;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSerialization_LevelSpecified;
		[System.Xml.Serialization.XmlElement("Serialization_Level")]
		public System.String varWSSerialization_Level;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPl_Ref_MatSpecified;
		[System.Xml.Serialization.XmlElement("Pl_Ref_Mat")]
		public System.String varWSPl_Ref_Mat;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSExtmatlgrpSpecified;
		[System.Xml.Serialization.XmlElement("Extmatlgrp")]
		public System.String varWSExtmatlgrp;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUomusageSpecified;
		[System.Xml.Serialization.XmlElement("Uomusage")]
		public System.String varWSUomusage;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSGds_RelevantSpecified;
		[System.Xml.Serialization.XmlElement("Gds_Relevant")]
		public System.String varWSGds_Relevant;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMaterial_ExternalSpecified;
		[System.Xml.Serialization.XmlElement("Material_External")]
		public System.String varWSMaterial_External;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMaterial_GuidSpecified;
		[System.Xml.Serialization.XmlElement("Material_Guid")]
		public System.String varWSMaterial_Guid;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMaterial_VersionSpecified;
		[System.Xml.Serialization.XmlElement("Material_Version")]
		public System.String varWSMaterial_Version;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSConf_Matl_ExternalSpecified;
		[System.Xml.Serialization.XmlElement("Conf_Matl_External")]
		public System.String varWSConf_Matl_External;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSConf_Matl_GuidSpecified;
		[System.Xml.Serialization.XmlElement("Conf_Matl_Guid")]
		public System.String varWSConf_Matl_Guid;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSConf_Matl_VersionSpecified;
		[System.Xml.Serialization.XmlElement("Conf_Matl_Version")]
		public System.String varWSConf_Matl_Version;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPl_Ref_Mat_ExternalSpecified;
		[System.Xml.Serialization.XmlElement("Pl_Ref_Mat_External")]
		public System.String varWSPl_Ref_Mat_External;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPl_Ref_Mat_GuidSpecified;
		[System.Xml.Serialization.XmlElement("Pl_Ref_Mat_Guid")]
		public System.String varWSPl_Ref_Mat_Guid;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPl_Ref_Mat_VersionSpecified;
		[System.Xml.Serialization.XmlElement("Pl_Ref_Mat_Version")]
		public System.String varWSPl_Ref_Mat_Version;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPr_Ref_Mat_ExternalSpecified;
		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_External")]
		public System.String varWSPr_Ref_Mat_External;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPr_Ref_Mat_GuidSpecified;
		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_Guid")]
		public System.String varWSPr_Ref_Mat_Guid;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPr_Ref_Mat_VersionSpecified;
		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_Version")]
		public System.String varWSPr_Ref_Mat_Version;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSWe_Origin_AcceptanceSpecified;
		[System.Xml.Serialization.XmlElement("We_Origin_Acceptance")]
		public System.String varWSWe_Origin_Acceptance;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSStd_Hu_TypeSpecified;
		[System.Xml.Serialization.XmlElement("Std_Hu_Type")]
		public System.String varWSStd_Hu_Type;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPilferableSpecified;
		[System.Xml.Serialization.XmlElement("Pilferable")]
		public System.String varWSPilferable;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSWhse_Storage_ConditionSpecified;
		[System.Xml.Serialization.XmlElement("Whse_Storage_Condition")]
		public System.String varWSWhse_Storage_Condition;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSWhse_Material_GroupSpecified;
		[System.Xml.Serialization.XmlElement("Whse_Material_Group")]
		public System.String varWSWhse_Material_Group;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHandling_IndicatorSpecified;
		[System.Xml.Serialization.XmlElement("Handling_Indicator")]
		public System.String varWSHandling_Indicator;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHaz_Mat_RelevantSpecified;
		[System.Xml.Serialization.XmlElement("Haz_Mat_Relevant")]
		public System.String varWSHaz_Mat_Relevant;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSHu_TypeSpecified;
		[System.Xml.Serialization.XmlElement("Hu_Type")]
		public System.String varWSHu_Type;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSVariable_Tare_WeightSpecified;
		[System.Xml.Serialization.XmlElement("Variable_Tare_Weight")]
		public System.String varWSVariable_Tare_Weight;

		[System.Xml.Serialization.XmlElement("Max_Allowed_Capacity")]
		public System.Decimal varWSMax_Allowed_Capacity;

		[System.Xml.Serialization.XmlElement("Overcapacity_Tolerance")]
		public System.Decimal varWSOvercapacity_Tolerance;

		[System.Xml.Serialization.XmlElement("Max_Allowed_Length")]
		public System.Decimal varWSMax_Allowed_Length;

		[System.Xml.Serialization.XmlElement("Max_Allowed_Width")]
		public System.Decimal varWSMax_Allowed_Width;

		[System.Xml.Serialization.XmlElement("Max_Allowed_Heigth")]
		public System.Decimal varWSMax_Allowed_Heigth;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMax_Dimension_UnSpecified;
		[System.Xml.Serialization.XmlElement("Max_Dimension_Un")]
		public System.String varWSMax_Dimension_Un;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMax_Dimension_Un_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Max_Dimension_Un_Iso")]
		public System.String varWSMax_Dimension_Un_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCountryoriSpecified;
		[System.Xml.Serialization.XmlElement("Countryori")]
		public System.String varWSCountryori;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCountryori_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Countryori_Iso")]
		public System.String varWSCountryori_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatfrgtgrpSpecified;
		[System.Xml.Serialization.XmlElement("Matfrgtgrp")]
		public System.String varWSMatfrgtgrp;

		[System.Xml.Serialization.XmlElement("Quarantine_Period")]
		public System.Decimal varWSQuarantine_Period;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSQuarantine_Period_UnSpecified;
		[System.Xml.Serialization.XmlElement("Quarantine_Period_Un")]
		public System.String varWSQuarantine_Period_Un;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSQuarantine_Period_Un_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Quarantine_Period_Un_Iso")]
		public System.String varWSQuarantine_Period_Un_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSQuality_Insp_GrpSpecified;
		[System.Xml.Serialization.XmlElement("Quality_Insp_Grp")]
		public System.String varWSQuality_Insp_Grp;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSerial_Number_ProfileSpecified;
		[System.Xml.Serialization.XmlElement("Serial_Number_Profile")]
		public System.String varWSSerial_Number_Profile;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEwm_Cw_RelevantSpecified;
		[System.Xml.Serialization.XmlElement("Ewm_Cw_Relevant")]
		public System.String varWSEwm_Cw_Relevant;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEwm_Cw_Logistical_UnitSpecified;
		[System.Xml.Serialization.XmlElement("Ewm_Cw_Logistical_Unit")]
		public System.String varWSEwm_Cw_Logistical_Unit;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEwm_Cw_Logistical_Unit_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Ewm_Cw_Logistical_Unit_Iso")]
		public System.String varWSEwm_Cw_Logistical_Unit_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEwm_Cw_Tolerance_GroupSpecified;
		[System.Xml.Serialization.XmlElement("Ewm_Cw_Tolerance_Group")]
		public System.String varWSEwm_Cw_Tolerance_Group;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEwm_Cw_Input_ControlSpecified;
		[System.Xml.Serialization.XmlElement("Ewm_Cw_Input_Control")]
		public System.String varWSEwm_Cw_Input_Control;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPacodSpecified;
		[System.Xml.Serialization.XmlElement("Pacod")]
		public System.String varWSPacod;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDg_Pckging_StatusSpecified;
		[System.Xml.Serialization.XmlElement("Dg_Pckging_Status")]
		public System.String varWSDg_Pckging_Status;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSAdjust_ProfileSpecified;
		[System.Xml.Serialization.XmlElement("Adjust_Profile")]
		public System.String varWSAdjust_Profile;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSIpmipproductSpecified;
		[System.Xml.Serialization.XmlElement("Ipmipproduct")]
		public System.String varWSIpmipproduct;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMediumSpecified;
		[System.Xml.Serialization.XmlElement("Medium")]
		public System.String varWSMedium;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSNsnidSpecified;
		[System.Xml.Serialization.XmlElement("Nsnid")]
		public System.String varWSNsnid;

		public WORCClientdataRecord() {
			varWSMaterial = (System.String) "";
			varWSInd_Sector = (System.String) "";
			varWSMatl_Type = (System.String) "";
			varWSCreated_On = (System.DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSCreated_By = (System.String) "";
			varWSLast_Chnge = (System.DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSChanged_By = (System.String) "";
			varWSMat_Status = (System.String) "";
			varWSMaint_Stat = (System.String) "";
			varWSDel_Flag = (System.String) "";
			varWSMatl_Group = (System.String) "";
			varWSOld_Mat_No = (System.String) "";
			varWSBase_Uom = (System.String) "";
			varWSBase_Uom_Iso = (System.String) "";
			varWSPo_Unit = (System.String) "";
			varWSPo_Unit_Iso = (System.String) "";
			varWSDocument = (System.String) "";
			varWSDoc_Type = (System.String) "";
			varWSDoc_Vers = (System.String) "";
			varWSDoc_Format = (System.String) "";
			varWSDoc_Chg_No = (System.String) "";
			varWSPage_No = (System.String) "";
			varWSNo_Sheets = (System.String) "";
			varWSProd_Memo = (System.String) "";
			varWSPageformat = (System.String) "";
			varWSSize_Dim = (System.String) "";
			varWSBasic_Matl = (System.String) "";
			varWSStd_Descr = (System.String) "";
			varWSDsn_Office = (System.String) "";
			varWSPur_Valkey = (System.String) "";
			varWSNet_Weight = (System.Decimal) 0.0M;
			varWSUnit_Of_Wt = (System.String) "";
			varWSUnit_Of_Wt_Iso = (System.String) "";
			varWSContainer = (System.String) "";
			varWSStor_Conds = (System.String) "";
			varWSTemp_Conds = (System.String) "";
			varWSTrans_Grp = (System.String) "";
			varWSHaz_Mat_No = (System.String) "";
			varWSDivision = (System.String) "";
			varWSCompetitor = (System.String) "";
			varWSQty_Gr_Gi = (System.Decimal) 0.0M;
			varWSProc_Rule = (System.String) "";
			varWSSup_Source = (System.String) "";
			varWSSeason = (System.String) "";
			varWSLabel_Type = (System.String) "";
			varWSLabel_Form = (System.String) "";
			varWSProd_Hier = (System.String) "";
			varWSCad_Id = (System.String) "";
			varWSAllowed_Wt = (System.Decimal) 0.0M;
			varWSPack_Wt_Un = (System.String) "";
			varWSPack_Wt_Un_Iso = (System.String) "";
			varWSAllwd_Vol = (System.Decimal) 0.0M;
			varWSPack_Vo_Un = (System.String) "";
			varWSPack_Vo_Un_Iso = (System.String) "";
			varWSWt_Tol_Lt = (System.Decimal) 0.0M;
			varWSVol_Tol_Lt = (System.Decimal) 0.0M;
			varWSVar_Ord_Un = (System.String) "";
			varWSConfigured = (System.String) "";
			varWSBatch_Mgmt = (System.String) "";
			varWSSh_Mat_Typ = (System.String) "";
			varWSFill_Level = (System.Decimal) 0.0M;
			varWSStack_Fact = (System.Int32) 0;
			varWSMat_Grp_Sm = (System.String) "";
			varWSAuthoritygroup = (System.String) "";
			varWSQm_Procmnt = (System.String) "";
			varWSCatprofile = (System.String) "";
			varWSMinremlife = (System.Decimal) 0.0M;
			varWSShelf_Life = (System.Decimal) 0.0M;
			varWSStor_Pct = (System.Decimal) 0.0M;
			varWSConf_Matl = (System.String) "";
			varWSCo_Product = (System.String) "";
			varWSPr_Ref_Mat = (System.String) "";
			varWSPur_Status = (System.String) "";
			varWSSal_Status = (System.String) "";
			varWSPvalidfrom = (System.DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSSvalidfrom = (System.DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSEnvt_Rlvt = (System.String) "";
			varWSProd_Alloc = (System.String) "";
			varWSQual_Dik = (System.String) "";
			varWSManu_Mat = (System.String) "";
			varWSMfr_No = (System.String) "";
			varWSInv_Mat_No = (System.String) "";
			varWSManuf_Prof = (System.String) "";
			varWSHazmatprof = (System.String) "";
			varWSHigh_Visc = (System.String) "";
			varWSLooseorliq = (System.String) "";
			varWSClosed_Box = (System.String) "";
			varWSAppd_B_Rec = (System.String) "";
			varWSMatcmpllvl = (System.String) "";
			varWSPar_Eff = (System.String) "";
			varWSRound_Up_Rule_Expiration_Date = (System.String) "";
			varWSPeriod_Ind_Expiration_Date = (System.String) "";
			varWSProd_Composition_On_Packaging = (System.String) "";
			varWSItem_Cat = (System.String) "";
			varWSHaz_Mat_No_External = (System.String) "";
			varWSHaz_Mat_No_Guid = (System.String) "";
			varWSHaz_Mat_No_Version = (System.String) "";
			varWSInv_Mat_No_External = (System.String) "";
			varWSInv_Mat_No_Guid = (System.String) "";
			varWSInv_Mat_No_Version = (System.String) "";
			varWSMaterial_Fixed = (System.String) "";
			varWSCm_Relevance_Flag = (System.String) "";
			varWSSled_Bbd = (System.String) "";
			varWSGtin_Variant = (System.String) "";
			varWSSerialization_Level = (System.String) "";
			varWSPl_Ref_Mat = (System.String) "";
			varWSExtmatlgrp = (System.String) "";
			varWSUomusage = (System.String) "";
			varWSGds_Relevant = (System.String) "";
			varWSMaterial_External = (System.String) "";
			varWSMaterial_Guid = (System.String) "";
			varWSMaterial_Version = (System.String) "";
			varWSConf_Matl_External = (System.String) "";
			varWSConf_Matl_Guid = (System.String) "";
			varWSConf_Matl_Version = (System.String) "";
			varWSPl_Ref_Mat_External = (System.String) "";
			varWSPl_Ref_Mat_Guid = (System.String) "";
			varWSPl_Ref_Mat_Version = (System.String) "";
			varWSPr_Ref_Mat_External = (System.String) "";
			varWSPr_Ref_Mat_Guid = (System.String) "";
			varWSPr_Ref_Mat_Version = (System.String) "";
			varWSWe_Origin_Acceptance = (System.String) "";
			varWSStd_Hu_Type = (System.String) "";
			varWSPilferable = (System.String) "";
			varWSWhse_Storage_Condition = (System.String) "";
			varWSWhse_Material_Group = (System.String) "";
			varWSHandling_Indicator = (System.String) "";
			varWSHaz_Mat_Relevant = (System.String) "";
			varWSHu_Type = (System.String) "";
			varWSVariable_Tare_Weight = (System.String) "";
			varWSMax_Allowed_Capacity = (System.Decimal) 0.0M;
			varWSOvercapacity_Tolerance = (System.Decimal) 0.0M;
			varWSMax_Allowed_Length = (System.Decimal) 0.0M;
			varWSMax_Allowed_Width = (System.Decimal) 0.0M;
			varWSMax_Allowed_Heigth = (System.Decimal) 0.0M;
			varWSMax_Dimension_Un = (System.String) "";
			varWSMax_Dimension_Un_Iso = (System.String) "";
			varWSCountryori = (System.String) "";
			varWSCountryori_Iso = (System.String) "";
			varWSMatfrgtgrp = (System.String) "";
			varWSQuarantine_Period = (System.Decimal) 0.0M;
			varWSQuarantine_Period_Un = (System.String) "";
			varWSQuarantine_Period_Un_Iso = (System.String) "";
			varWSQuality_Insp_Grp = (System.String) "";
			varWSSerial_Number_Profile = (System.String) "";
			varWSEwm_Cw_Relevant = (System.String) "";
			varWSEwm_Cw_Logistical_Unit = (System.String) "";
			varWSEwm_Cw_Logistical_Unit_Iso = (System.String) "";
			varWSEwm_Cw_Tolerance_Group = (System.String) "";
			varWSEwm_Cw_Input_Control = (System.String) "";
			varWSPacod = (System.String) "";
			varWSDg_Pckging_Status = (System.String) "";
			varWSAdjust_Profile = (System.String) "";
			varWSIpmipproduct = (System.String) "";
			varWSMedium = (System.String) "";
			varWSNsnid = (System.String) "";
		}

		public WORCClientdataRecord(STClientdataStructure r) {
			varWSMaterial = BaseAppUtils.RemoveControlChars(r.ssMaterial);
			varWSMaterialSpecified = r.ssMaterial != "";
			varWSInd_Sector = BaseAppUtils.RemoveControlChars(r.ssInd_Sector);
			varWSInd_SectorSpecified = r.ssInd_Sector != "";
			varWSMatl_Type = BaseAppUtils.RemoveControlChars(r.ssMatl_Type);
			varWSMatl_TypeSpecified = r.ssMatl_Type != "";
			varWSCreated_On = (System.DateTime) r.ssCreated_On;
			varWSCreated_By = BaseAppUtils.RemoveControlChars(r.ssCreated_By);
			varWSCreated_BySpecified = r.ssCreated_By != "";
			varWSLast_Chnge = (System.DateTime) r.ssLast_Chnge;
			varWSChanged_By = BaseAppUtils.RemoveControlChars(r.ssChanged_By);
			varWSChanged_BySpecified = r.ssChanged_By != "";
			varWSMat_Status = BaseAppUtils.RemoveControlChars(r.ssMat_Status);
			varWSMat_StatusSpecified = r.ssMat_Status != "";
			varWSMaint_Stat = BaseAppUtils.RemoveControlChars(r.ssMaint_Stat);
			varWSMaint_StatSpecified = r.ssMaint_Stat != "";
			varWSDel_Flag = BaseAppUtils.RemoveControlChars(r.ssDel_Flag);
			varWSDel_FlagSpecified = r.ssDel_Flag != "";
			varWSMatl_Group = BaseAppUtils.RemoveControlChars(r.ssMatl_Group);
			varWSMatl_GroupSpecified = r.ssMatl_Group != "";
			varWSOld_Mat_No = BaseAppUtils.RemoveControlChars(r.ssOld_Mat_No);
			varWSOld_Mat_NoSpecified = r.ssOld_Mat_No != "";
			varWSBase_Uom = BaseAppUtils.RemoveControlChars(r.ssBase_Uom);
			varWSBase_UomSpecified = r.ssBase_Uom != "";
			varWSBase_Uom_Iso = BaseAppUtils.RemoveControlChars(r.ssBase_Uom_Iso);
			varWSBase_Uom_IsoSpecified = r.ssBase_Uom_Iso != "";
			varWSPo_Unit = BaseAppUtils.RemoveControlChars(r.ssPo_Unit);
			varWSPo_UnitSpecified = r.ssPo_Unit != "";
			varWSPo_Unit_Iso = BaseAppUtils.RemoveControlChars(r.ssPo_Unit_Iso);
			varWSPo_Unit_IsoSpecified = r.ssPo_Unit_Iso != "";
			varWSDocument = BaseAppUtils.RemoveControlChars(r.ssDocument);
			varWSDocumentSpecified = r.ssDocument != "";
			varWSDoc_Type = BaseAppUtils.RemoveControlChars(r.ssDoc_Type);
			varWSDoc_TypeSpecified = r.ssDoc_Type != "";
			varWSDoc_Vers = BaseAppUtils.RemoveControlChars(r.ssDoc_Vers);
			varWSDoc_VersSpecified = r.ssDoc_Vers != "";
			varWSDoc_Format = BaseAppUtils.RemoveControlChars(r.ssDoc_Format);
			varWSDoc_FormatSpecified = r.ssDoc_Format != "";
			varWSDoc_Chg_No = BaseAppUtils.RemoveControlChars(r.ssDoc_Chg_No);
			varWSDoc_Chg_NoSpecified = r.ssDoc_Chg_No != "";
			varWSPage_No = BaseAppUtils.RemoveControlChars(r.ssPage_No);
			varWSPage_NoSpecified = r.ssPage_No != "";
			varWSNo_Sheets = BaseAppUtils.RemoveControlChars(r.ssNo_Sheets);
			varWSNo_SheetsSpecified = r.ssNo_Sheets != "";
			varWSProd_Memo = BaseAppUtils.RemoveControlChars(r.ssProd_Memo);
			varWSProd_MemoSpecified = r.ssProd_Memo != "";
			varWSPageformat = BaseAppUtils.RemoveControlChars(r.ssPageformat);
			varWSPageformatSpecified = r.ssPageformat != "";
			varWSSize_Dim = BaseAppUtils.RemoveControlChars(r.ssSize_Dim);
			varWSSize_DimSpecified = r.ssSize_Dim != "";
			varWSBasic_Matl = BaseAppUtils.RemoveControlChars(r.ssBasic_Matl);
			varWSBasic_MatlSpecified = r.ssBasic_Matl != "";
			varWSStd_Descr = BaseAppUtils.RemoveControlChars(r.ssStd_Descr);
			varWSStd_DescrSpecified = r.ssStd_Descr != "";
			varWSDsn_Office = BaseAppUtils.RemoveControlChars(r.ssDsn_Office);
			varWSDsn_OfficeSpecified = r.ssDsn_Office != "";
			varWSPur_Valkey = BaseAppUtils.RemoveControlChars(r.ssPur_Valkey);
			varWSPur_ValkeySpecified = r.ssPur_Valkey != "";
			varWSNet_Weight = (System.Decimal) r.ssNet_Weight;
			varWSUnit_Of_Wt = BaseAppUtils.RemoveControlChars(r.ssUnit_Of_Wt);
			varWSUnit_Of_WtSpecified = r.ssUnit_Of_Wt != "";
			varWSUnit_Of_Wt_Iso = BaseAppUtils.RemoveControlChars(r.ssUnit_Of_Wt_Iso);
			varWSUnit_Of_Wt_IsoSpecified = r.ssUnit_Of_Wt_Iso != "";
			varWSContainer = BaseAppUtils.RemoveControlChars(r.ssContainer);
			varWSContainerSpecified = r.ssContainer != "";
			varWSStor_Conds = BaseAppUtils.RemoveControlChars(r.ssStor_Conds);
			varWSStor_CondsSpecified = r.ssStor_Conds != "";
			varWSTemp_Conds = BaseAppUtils.RemoveControlChars(r.ssTemp_Conds);
			varWSTemp_CondsSpecified = r.ssTemp_Conds != "";
			varWSTrans_Grp = BaseAppUtils.RemoveControlChars(r.ssTrans_Grp);
			varWSTrans_GrpSpecified = r.ssTrans_Grp != "";
			varWSHaz_Mat_No = BaseAppUtils.RemoveControlChars(r.ssHaz_Mat_No);
			varWSHaz_Mat_NoSpecified = r.ssHaz_Mat_No != "";
			varWSDivision = BaseAppUtils.RemoveControlChars(r.ssDivision);
			varWSDivisionSpecified = r.ssDivision != "";
			varWSCompetitor = BaseAppUtils.RemoveControlChars(r.ssCompetitor);
			varWSCompetitorSpecified = r.ssCompetitor != "";
			varWSQty_Gr_Gi = (System.Decimal) r.ssQty_Gr_Gi;
			varWSProc_Rule = BaseAppUtils.RemoveControlChars(r.ssProc_Rule);
			varWSProc_RuleSpecified = r.ssProc_Rule != "";
			varWSSup_Source = BaseAppUtils.RemoveControlChars(r.ssSup_Source);
			varWSSup_SourceSpecified = r.ssSup_Source != "";
			varWSSeason = BaseAppUtils.RemoveControlChars(r.ssSeason);
			varWSSeasonSpecified = r.ssSeason != "";
			varWSLabel_Type = BaseAppUtils.RemoveControlChars(r.ssLabel_Type);
			varWSLabel_TypeSpecified = r.ssLabel_Type != "";
			varWSLabel_Form = BaseAppUtils.RemoveControlChars(r.ssLabel_Form);
			varWSLabel_FormSpecified = r.ssLabel_Form != "";
			varWSProd_Hier = BaseAppUtils.RemoveControlChars(r.ssProd_Hier);
			varWSProd_HierSpecified = r.ssProd_Hier != "";
			varWSCad_Id = BaseAppUtils.RemoveControlChars(r.ssCad_Id);
			varWSCad_IdSpecified = r.ssCad_Id != "";
			varWSAllowed_Wt = (System.Decimal) r.ssAllowed_Wt;
			varWSPack_Wt_Un = BaseAppUtils.RemoveControlChars(r.ssPack_Wt_Un);
			varWSPack_Wt_UnSpecified = r.ssPack_Wt_Un != "";
			varWSPack_Wt_Un_Iso = BaseAppUtils.RemoveControlChars(r.ssPack_Wt_Un_Iso);
			varWSPack_Wt_Un_IsoSpecified = r.ssPack_Wt_Un_Iso != "";
			varWSAllwd_Vol = (System.Decimal) r.ssAllwd_Vol;
			varWSPack_Vo_Un = BaseAppUtils.RemoveControlChars(r.ssPack_Vo_Un);
			varWSPack_Vo_UnSpecified = r.ssPack_Vo_Un != "";
			varWSPack_Vo_Un_Iso = BaseAppUtils.RemoveControlChars(r.ssPack_Vo_Un_Iso);
			varWSPack_Vo_Un_IsoSpecified = r.ssPack_Vo_Un_Iso != "";
			varWSWt_Tol_Lt = (System.Decimal) r.ssWt_Tol_Lt;
			varWSVol_Tol_Lt = (System.Decimal) r.ssVol_Tol_Lt;
			varWSVar_Ord_Un = BaseAppUtils.RemoveControlChars(r.ssVar_Ord_Un);
			varWSVar_Ord_UnSpecified = r.ssVar_Ord_Un != "";
			varWSConfigured = BaseAppUtils.RemoveControlChars(r.ssConfigured);
			varWSConfiguredSpecified = r.ssConfigured != "";
			varWSBatch_Mgmt = BaseAppUtils.RemoveControlChars(r.ssBatch_Mgmt);
			varWSBatch_MgmtSpecified = r.ssBatch_Mgmt != "";
			varWSSh_Mat_Typ = BaseAppUtils.RemoveControlChars(r.ssSh_Mat_Typ);
			varWSSh_Mat_TypSpecified = r.ssSh_Mat_Typ != "";
			varWSFill_Level = (System.Decimal) r.ssFill_Level;
			varWSStack_Fact = (System.Int32) r.ssStack_Fact;
			varWSMat_Grp_Sm = BaseAppUtils.RemoveControlChars(r.ssMat_Grp_Sm);
			varWSMat_Grp_SmSpecified = r.ssMat_Grp_Sm != "";
			varWSAuthoritygroup = BaseAppUtils.RemoveControlChars(r.ssAuthoritygroup);
			varWSAuthoritygroupSpecified = r.ssAuthoritygroup != "";
			varWSQm_Procmnt = BaseAppUtils.RemoveControlChars(r.ssQm_Procmnt);
			varWSQm_ProcmntSpecified = r.ssQm_Procmnt != "";
			varWSCatprofile = BaseAppUtils.RemoveControlChars(r.ssCatprofile);
			varWSCatprofileSpecified = r.ssCatprofile != "";
			varWSMinremlife = (System.Decimal) r.ssMinremlife;
			varWSShelf_Life = (System.Decimal) r.ssShelf_Life;
			varWSStor_Pct = (System.Decimal) r.ssStor_Pct;
			varWSConf_Matl = BaseAppUtils.RemoveControlChars(r.ssConf_Matl);
			varWSConf_MatlSpecified = r.ssConf_Matl != "";
			varWSCo_Product = BaseAppUtils.RemoveControlChars(r.ssCo_Product);
			varWSCo_ProductSpecified = r.ssCo_Product != "";
			varWSPr_Ref_Mat = BaseAppUtils.RemoveControlChars(r.ssPr_Ref_Mat);
			varWSPr_Ref_MatSpecified = r.ssPr_Ref_Mat != "";
			varWSPur_Status = BaseAppUtils.RemoveControlChars(r.ssPur_Status);
			varWSPur_StatusSpecified = r.ssPur_Status != "";
			varWSSal_Status = BaseAppUtils.RemoveControlChars(r.ssSal_Status);
			varWSSal_StatusSpecified = r.ssSal_Status != "";
			varWSPvalidfrom = (System.DateTime) r.ssPvalidfrom;
			varWSSvalidfrom = (System.DateTime) r.ssSvalidfrom;
			varWSEnvt_Rlvt = BaseAppUtils.RemoveControlChars(r.ssEnvt_Rlvt);
			varWSEnvt_RlvtSpecified = r.ssEnvt_Rlvt != "";
			varWSProd_Alloc = BaseAppUtils.RemoveControlChars(r.ssProd_Alloc);
			varWSProd_AllocSpecified = r.ssProd_Alloc != "";
			varWSQual_Dik = BaseAppUtils.RemoveControlChars(r.ssQual_Dik);
			varWSQual_DikSpecified = r.ssQual_Dik != "";
			varWSManu_Mat = BaseAppUtils.RemoveControlChars(r.ssManu_Mat);
			varWSManu_MatSpecified = r.ssManu_Mat != "";
			varWSMfr_No = BaseAppUtils.RemoveControlChars(r.ssMfr_No);
			varWSMfr_NoSpecified = r.ssMfr_No != "";
			varWSInv_Mat_No = BaseAppUtils.RemoveControlChars(r.ssInv_Mat_No);
			varWSInv_Mat_NoSpecified = r.ssInv_Mat_No != "";
			varWSManuf_Prof = BaseAppUtils.RemoveControlChars(r.ssManuf_Prof);
			varWSManuf_ProfSpecified = r.ssManuf_Prof != "";
			varWSHazmatprof = BaseAppUtils.RemoveControlChars(r.ssHazmatprof);
			varWSHazmatprofSpecified = r.ssHazmatprof != "";
			varWSHigh_Visc = BaseAppUtils.RemoveControlChars(r.ssHigh_Visc);
			varWSHigh_ViscSpecified = r.ssHigh_Visc != "";
			varWSLooseorliq = BaseAppUtils.RemoveControlChars(r.ssLooseorliq);
			varWSLooseorliqSpecified = r.ssLooseorliq != "";
			varWSClosed_Box = BaseAppUtils.RemoveControlChars(r.ssClosed_Box);
			varWSClosed_BoxSpecified = r.ssClosed_Box != "";
			varWSAppd_B_Rec = BaseAppUtils.RemoveControlChars(r.ssAppd_B_Rec);
			varWSAppd_B_RecSpecified = r.ssAppd_B_Rec != "";
			varWSMatcmpllvl = BaseAppUtils.RemoveControlChars(r.ssMatcmpllvl);
			varWSMatcmpllvlSpecified = r.ssMatcmpllvl != "";
			varWSPar_Eff = BaseAppUtils.RemoveControlChars(r.ssPar_Eff);
			varWSPar_EffSpecified = r.ssPar_Eff != "";
			varWSRound_Up_Rule_Expiration_Date = BaseAppUtils.RemoveControlChars(r.ssRound_Up_Rule_Expiration_Date);
			varWSRound_Up_Rule_Expiration_DateSpecified = r.ssRound_Up_Rule_Expiration_Date != "";
			varWSPeriod_Ind_Expiration_Date = BaseAppUtils.RemoveControlChars(r.ssPeriod_Ind_Expiration_Date);
			varWSPeriod_Ind_Expiration_DateSpecified = r.ssPeriod_Ind_Expiration_Date != "";
			varWSProd_Composition_On_Packaging = BaseAppUtils.RemoveControlChars(r.ssProd_Composition_On_Packaging);
			varWSProd_Composition_On_PackagingSpecified = r.ssProd_Composition_On_Packaging != "";
			varWSItem_Cat = BaseAppUtils.RemoveControlChars(r.ssItem_Cat);
			varWSItem_CatSpecified = r.ssItem_Cat != "";
			varWSHaz_Mat_No_External = BaseAppUtils.RemoveControlChars(r.ssHaz_Mat_No_External);
			varWSHaz_Mat_No_ExternalSpecified = r.ssHaz_Mat_No_External != "";
			varWSHaz_Mat_No_Guid = BaseAppUtils.RemoveControlChars(r.ssHaz_Mat_No_Guid);
			varWSHaz_Mat_No_GuidSpecified = r.ssHaz_Mat_No_Guid != "";
			varWSHaz_Mat_No_Version = BaseAppUtils.RemoveControlChars(r.ssHaz_Mat_No_Version);
			varWSHaz_Mat_No_VersionSpecified = r.ssHaz_Mat_No_Version != "";
			varWSInv_Mat_No_External = BaseAppUtils.RemoveControlChars(r.ssInv_Mat_No_External);
			varWSInv_Mat_No_ExternalSpecified = r.ssInv_Mat_No_External != "";
			varWSInv_Mat_No_Guid = BaseAppUtils.RemoveControlChars(r.ssInv_Mat_No_Guid);
			varWSInv_Mat_No_GuidSpecified = r.ssInv_Mat_No_Guid != "";
			varWSInv_Mat_No_Version = BaseAppUtils.RemoveControlChars(r.ssInv_Mat_No_Version);
			varWSInv_Mat_No_VersionSpecified = r.ssInv_Mat_No_Version != "";
			varWSMaterial_Fixed = BaseAppUtils.RemoveControlChars(r.ssMaterial_Fixed);
			varWSMaterial_FixedSpecified = r.ssMaterial_Fixed != "";
			varWSCm_Relevance_Flag = BaseAppUtils.RemoveControlChars(r.ssCm_Relevance_Flag);
			varWSCm_Relevance_FlagSpecified = r.ssCm_Relevance_Flag != "";
			varWSSled_Bbd = BaseAppUtils.RemoveControlChars(r.ssSled_Bbd);
			varWSSled_BbdSpecified = r.ssSled_Bbd != "";
			varWSGtin_Variant = BaseAppUtils.RemoveControlChars(r.ssGtin_Variant);
			varWSGtin_VariantSpecified = r.ssGtin_Variant != "";
			varWSSerialization_Level = BaseAppUtils.RemoveControlChars(r.ssSerialization_Level);
			varWSSerialization_LevelSpecified = r.ssSerialization_Level != "";
			varWSPl_Ref_Mat = BaseAppUtils.RemoveControlChars(r.ssPl_Ref_Mat);
			varWSPl_Ref_MatSpecified = r.ssPl_Ref_Mat != "";
			varWSExtmatlgrp = BaseAppUtils.RemoveControlChars(r.ssExtmatlgrp);
			varWSExtmatlgrpSpecified = r.ssExtmatlgrp != "";
			varWSUomusage = BaseAppUtils.RemoveControlChars(r.ssUomusage);
			varWSUomusageSpecified = r.ssUomusage != "";
			varWSGds_Relevant = BaseAppUtils.RemoveControlChars(r.ssGds_Relevant);
			varWSGds_RelevantSpecified = r.ssGds_Relevant != "";
			varWSMaterial_External = BaseAppUtils.RemoveControlChars(r.ssMaterial_External);
			varWSMaterial_ExternalSpecified = r.ssMaterial_External != "";
			varWSMaterial_Guid = BaseAppUtils.RemoveControlChars(r.ssMaterial_Guid);
			varWSMaterial_GuidSpecified = r.ssMaterial_Guid != "";
			varWSMaterial_Version = BaseAppUtils.RemoveControlChars(r.ssMaterial_Version);
			varWSMaterial_VersionSpecified = r.ssMaterial_Version != "";
			varWSConf_Matl_External = BaseAppUtils.RemoveControlChars(r.ssConf_Matl_External);
			varWSConf_Matl_ExternalSpecified = r.ssConf_Matl_External != "";
			varWSConf_Matl_Guid = BaseAppUtils.RemoveControlChars(r.ssConf_Matl_Guid);
			varWSConf_Matl_GuidSpecified = r.ssConf_Matl_Guid != "";
			varWSConf_Matl_Version = BaseAppUtils.RemoveControlChars(r.ssConf_Matl_Version);
			varWSConf_Matl_VersionSpecified = r.ssConf_Matl_Version != "";
			varWSPl_Ref_Mat_External = BaseAppUtils.RemoveControlChars(r.ssPl_Ref_Mat_External);
			varWSPl_Ref_Mat_ExternalSpecified = r.ssPl_Ref_Mat_External != "";
			varWSPl_Ref_Mat_Guid = BaseAppUtils.RemoveControlChars(r.ssPl_Ref_Mat_Guid);
			varWSPl_Ref_Mat_GuidSpecified = r.ssPl_Ref_Mat_Guid != "";
			varWSPl_Ref_Mat_Version = BaseAppUtils.RemoveControlChars(r.ssPl_Ref_Mat_Version);
			varWSPl_Ref_Mat_VersionSpecified = r.ssPl_Ref_Mat_Version != "";
			varWSPr_Ref_Mat_External = BaseAppUtils.RemoveControlChars(r.ssPr_Ref_Mat_External);
			varWSPr_Ref_Mat_ExternalSpecified = r.ssPr_Ref_Mat_External != "";
			varWSPr_Ref_Mat_Guid = BaseAppUtils.RemoveControlChars(r.ssPr_Ref_Mat_Guid);
			varWSPr_Ref_Mat_GuidSpecified = r.ssPr_Ref_Mat_Guid != "";
			varWSPr_Ref_Mat_Version = BaseAppUtils.RemoveControlChars(r.ssPr_Ref_Mat_Version);
			varWSPr_Ref_Mat_VersionSpecified = r.ssPr_Ref_Mat_Version != "";
			varWSWe_Origin_Acceptance = BaseAppUtils.RemoveControlChars(r.ssWe_Origin_Acceptance);
			varWSWe_Origin_AcceptanceSpecified = r.ssWe_Origin_Acceptance != "";
			varWSStd_Hu_Type = BaseAppUtils.RemoveControlChars(r.ssStd_Hu_Type);
			varWSStd_Hu_TypeSpecified = r.ssStd_Hu_Type != "";
			varWSPilferable = BaseAppUtils.RemoveControlChars(r.ssPilferable);
			varWSPilferableSpecified = r.ssPilferable != "";
			varWSWhse_Storage_Condition = BaseAppUtils.RemoveControlChars(r.ssWhse_Storage_Condition);
			varWSWhse_Storage_ConditionSpecified = r.ssWhse_Storage_Condition != "";
			varWSWhse_Material_Group = BaseAppUtils.RemoveControlChars(r.ssWhse_Material_Group);
			varWSWhse_Material_GroupSpecified = r.ssWhse_Material_Group != "";
			varWSHandling_Indicator = BaseAppUtils.RemoveControlChars(r.ssHandling_Indicator);
			varWSHandling_IndicatorSpecified = r.ssHandling_Indicator != "";
			varWSHaz_Mat_Relevant = BaseAppUtils.RemoveControlChars(r.ssHaz_Mat_Relevant);
			varWSHaz_Mat_RelevantSpecified = r.ssHaz_Mat_Relevant != "";
			varWSHu_Type = BaseAppUtils.RemoveControlChars(r.ssHu_Type);
			varWSHu_TypeSpecified = r.ssHu_Type != "";
			varWSVariable_Tare_Weight = BaseAppUtils.RemoveControlChars(r.ssVariable_Tare_Weight);
			varWSVariable_Tare_WeightSpecified = r.ssVariable_Tare_Weight != "";
			varWSMax_Allowed_Capacity = (System.Decimal) r.ssMax_Allowed_Capacity;
			varWSOvercapacity_Tolerance = (System.Decimal) r.ssOvercapacity_Tolerance;
			varWSMax_Allowed_Length = (System.Decimal) r.ssMax_Allowed_Length;
			varWSMax_Allowed_Width = (System.Decimal) r.ssMax_Allowed_Width;
			varWSMax_Allowed_Heigth = (System.Decimal) r.ssMax_Allowed_Heigth;
			varWSMax_Dimension_Un = BaseAppUtils.RemoveControlChars(r.ssMax_Dimension_Un);
			varWSMax_Dimension_UnSpecified = r.ssMax_Dimension_Un != "";
			varWSMax_Dimension_Un_Iso = BaseAppUtils.RemoveControlChars(r.ssMax_Dimension_Un_Iso);
			varWSMax_Dimension_Un_IsoSpecified = r.ssMax_Dimension_Un_Iso != "";
			varWSCountryori = BaseAppUtils.RemoveControlChars(r.ssCountryori);
			varWSCountryoriSpecified = r.ssCountryori != "";
			varWSCountryori_Iso = BaseAppUtils.RemoveControlChars(r.ssCountryori_Iso);
			varWSCountryori_IsoSpecified = r.ssCountryori_Iso != "";
			varWSMatfrgtgrp = BaseAppUtils.RemoveControlChars(r.ssMatfrgtgrp);
			varWSMatfrgtgrpSpecified = r.ssMatfrgtgrp != "";
			varWSQuarantine_Period = (System.Decimal) r.ssQuarantine_Period;
			varWSQuarantine_Period_Un = BaseAppUtils.RemoveControlChars(r.ssQuarantine_Period_Un);
			varWSQuarantine_Period_UnSpecified = r.ssQuarantine_Period_Un != "";
			varWSQuarantine_Period_Un_Iso = BaseAppUtils.RemoveControlChars(r.ssQuarantine_Period_Un_Iso);
			varWSQuarantine_Period_Un_IsoSpecified = r.ssQuarantine_Period_Un_Iso != "";
			varWSQuality_Insp_Grp = BaseAppUtils.RemoveControlChars(r.ssQuality_Insp_Grp);
			varWSQuality_Insp_GrpSpecified = r.ssQuality_Insp_Grp != "";
			varWSSerial_Number_Profile = BaseAppUtils.RemoveControlChars(r.ssSerial_Number_Profile);
			varWSSerial_Number_ProfileSpecified = r.ssSerial_Number_Profile != "";
			varWSEwm_Cw_Relevant = BaseAppUtils.RemoveControlChars(r.ssEwm_Cw_Relevant);
			varWSEwm_Cw_RelevantSpecified = r.ssEwm_Cw_Relevant != "";
			varWSEwm_Cw_Logistical_Unit = BaseAppUtils.RemoveControlChars(r.ssEwm_Cw_Logistical_Unit);
			varWSEwm_Cw_Logistical_UnitSpecified = r.ssEwm_Cw_Logistical_Unit != "";
			varWSEwm_Cw_Logistical_Unit_Iso = BaseAppUtils.RemoveControlChars(r.ssEwm_Cw_Logistical_Unit_Iso);
			varWSEwm_Cw_Logistical_Unit_IsoSpecified = r.ssEwm_Cw_Logistical_Unit_Iso != "";
			varWSEwm_Cw_Tolerance_Group = BaseAppUtils.RemoveControlChars(r.ssEwm_Cw_Tolerance_Group);
			varWSEwm_Cw_Tolerance_GroupSpecified = r.ssEwm_Cw_Tolerance_Group != "";
			varWSEwm_Cw_Input_Control = BaseAppUtils.RemoveControlChars(r.ssEwm_Cw_Input_Control);
			varWSEwm_Cw_Input_ControlSpecified = r.ssEwm_Cw_Input_Control != "";
			varWSPacod = BaseAppUtils.RemoveControlChars(r.ssPacod);
			varWSPacodSpecified = r.ssPacod != "";
			varWSDg_Pckging_Status = BaseAppUtils.RemoveControlChars(r.ssDg_Pckging_Status);
			varWSDg_Pckging_StatusSpecified = r.ssDg_Pckging_Status != "";
			varWSAdjust_Profile = BaseAppUtils.RemoveControlChars(r.ssAdjust_Profile);
			varWSAdjust_ProfileSpecified = r.ssAdjust_Profile != "";
			varWSIpmipproduct = BaseAppUtils.RemoveControlChars(r.ssIpmipproduct);
			varWSIpmipproductSpecified = r.ssIpmipproduct != "";
			varWSMedium = BaseAppUtils.RemoveControlChars(r.ssMedium);
			varWSMediumSpecified = r.ssMedium != "";
			varWSNsnid = BaseAppUtils.RemoveControlChars(r.ssNsnid);
			varWSNsnidSpecified = r.ssNsnid != "";
		}

		public static RLClientdataList ToRecordList(WORCClientdataRecord[] array) {
			RLClientdataList rl = new RLClientdataList();
			if (array != null) {
				foreach(WORCClientdataRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCClientdataRecord[] FromRecordList(RLClientdataList rl) {
			WORCClientdataRecord[] array = new WORCClientdataRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCClientdataRecord {
		public static implicit operator WORCClientdataRecord(RCClientdataRecord r) {
			return new WORCClientdataRecord(r.ssSTClientdata);
		}

		public static implicit operator RCClientdataRecord(WORCClientdataRecord w) {
			RCClientdataRecord r = new RCClientdataRecord("");
			if (w != null) {
				r.ssSTClientdata = w;
			}
			return r;
		}

	}

	partial struct STClientdataStructure {
		public static implicit operator WORCClientdataRecord(STClientdataStructure r) {
			return new WORCClientdataRecord(r);
		}

		public static implicit operator STClientdataStructure(WORCClientdataRecord w) {
			STClientdataStructure r = new STClientdataStructure("");
			if (w != null) {
				r.ssMaterial = ((string) w.varWSMaterial ?? "");
				r.ssInd_Sector = ((string) w.varWSInd_Sector ?? "");
				r.ssMatl_Type = ((string) w.varWSMatl_Type ?? "");
				r.ssCreated_On = (DateTime) w.varWSCreated_On;
				r.ssCreated_By = ((string) w.varWSCreated_By ?? "");
				r.ssLast_Chnge = (DateTime) w.varWSLast_Chnge;
				r.ssChanged_By = ((string) w.varWSChanged_By ?? "");
				r.ssMat_Status = ((string) w.varWSMat_Status ?? "");
				r.ssMaint_Stat = ((string) w.varWSMaint_Stat ?? "");
				r.ssDel_Flag = ((string) w.varWSDel_Flag ?? "");
				r.ssMatl_Group = ((string) w.varWSMatl_Group ?? "");
				r.ssOld_Mat_No = ((string) w.varWSOld_Mat_No ?? "");
				r.ssBase_Uom = ((string) w.varWSBase_Uom ?? "");
				r.ssBase_Uom_Iso = ((string) w.varWSBase_Uom_Iso ?? "");
				r.ssPo_Unit = ((string) w.varWSPo_Unit ?? "");
				r.ssPo_Unit_Iso = ((string) w.varWSPo_Unit_Iso ?? "");
				r.ssDocument = ((string) w.varWSDocument ?? "");
				r.ssDoc_Type = ((string) w.varWSDoc_Type ?? "");
				r.ssDoc_Vers = ((string) w.varWSDoc_Vers ?? "");
				r.ssDoc_Format = ((string) w.varWSDoc_Format ?? "");
				r.ssDoc_Chg_No = ((string) w.varWSDoc_Chg_No ?? "");
				r.ssPage_No = ((string) w.varWSPage_No ?? "");
				r.ssNo_Sheets = ((string) w.varWSNo_Sheets ?? "");
				r.ssProd_Memo = ((string) w.varWSProd_Memo ?? "");
				r.ssPageformat = ((string) w.varWSPageformat ?? "");
				r.ssSize_Dim = ((string) w.varWSSize_Dim ?? "");
				r.ssBasic_Matl = ((string) w.varWSBasic_Matl ?? "");
				r.ssStd_Descr = ((string) w.varWSStd_Descr ?? "");
				r.ssDsn_Office = ((string) w.varWSDsn_Office ?? "");
				r.ssPur_Valkey = ((string) w.varWSPur_Valkey ?? "");
				r.ssNet_Weight = (decimal) w.varWSNet_Weight;
				r.ssUnit_Of_Wt = ((string) w.varWSUnit_Of_Wt ?? "");
				r.ssUnit_Of_Wt_Iso = ((string) w.varWSUnit_Of_Wt_Iso ?? "");
				r.ssContainer = ((string) w.varWSContainer ?? "");
				r.ssStor_Conds = ((string) w.varWSStor_Conds ?? "");
				r.ssTemp_Conds = ((string) w.varWSTemp_Conds ?? "");
				r.ssTrans_Grp = ((string) w.varWSTrans_Grp ?? "");
				r.ssHaz_Mat_No = ((string) w.varWSHaz_Mat_No ?? "");
				r.ssDivision = ((string) w.varWSDivision ?? "");
				r.ssCompetitor = ((string) w.varWSCompetitor ?? "");
				r.ssQty_Gr_Gi = (decimal) w.varWSQty_Gr_Gi;
				r.ssProc_Rule = ((string) w.varWSProc_Rule ?? "");
				r.ssSup_Source = ((string) w.varWSSup_Source ?? "");
				r.ssSeason = ((string) w.varWSSeason ?? "");
				r.ssLabel_Type = ((string) w.varWSLabel_Type ?? "");
				r.ssLabel_Form = ((string) w.varWSLabel_Form ?? "");
				r.ssProd_Hier = ((string) w.varWSProd_Hier ?? "");
				r.ssCad_Id = ((string) w.varWSCad_Id ?? "");
				r.ssAllowed_Wt = (decimal) w.varWSAllowed_Wt;
				r.ssPack_Wt_Un = ((string) w.varWSPack_Wt_Un ?? "");
				r.ssPack_Wt_Un_Iso = ((string) w.varWSPack_Wt_Un_Iso ?? "");
				r.ssAllwd_Vol = (decimal) w.varWSAllwd_Vol;
				r.ssPack_Vo_Un = ((string) w.varWSPack_Vo_Un ?? "");
				r.ssPack_Vo_Un_Iso = ((string) w.varWSPack_Vo_Un_Iso ?? "");
				r.ssWt_Tol_Lt = (decimal) w.varWSWt_Tol_Lt;
				r.ssVol_Tol_Lt = (decimal) w.varWSVol_Tol_Lt;
				r.ssVar_Ord_Un = ((string) w.varWSVar_Ord_Un ?? "");
				r.ssConfigured = ((string) w.varWSConfigured ?? "");
				r.ssBatch_Mgmt = ((string) w.varWSBatch_Mgmt ?? "");
				r.ssSh_Mat_Typ = ((string) w.varWSSh_Mat_Typ ?? "");
				r.ssFill_Level = (decimal) w.varWSFill_Level;
				r.ssStack_Fact = (int) w.varWSStack_Fact;
				r.ssMat_Grp_Sm = ((string) w.varWSMat_Grp_Sm ?? "");
				r.ssAuthoritygroup = ((string) w.varWSAuthoritygroup ?? "");
				r.ssQm_Procmnt = ((string) w.varWSQm_Procmnt ?? "");
				r.ssCatprofile = ((string) w.varWSCatprofile ?? "");
				r.ssMinremlife = (decimal) w.varWSMinremlife;
				r.ssShelf_Life = (decimal) w.varWSShelf_Life;
				r.ssStor_Pct = (decimal) w.varWSStor_Pct;
				r.ssConf_Matl = ((string) w.varWSConf_Matl ?? "");
				r.ssCo_Product = ((string) w.varWSCo_Product ?? "");
				r.ssPr_Ref_Mat = ((string) w.varWSPr_Ref_Mat ?? "");
				r.ssPur_Status = ((string) w.varWSPur_Status ?? "");
				r.ssSal_Status = ((string) w.varWSSal_Status ?? "");
				r.ssPvalidfrom = (DateTime) w.varWSPvalidfrom;
				r.ssSvalidfrom = (DateTime) w.varWSSvalidfrom;
				r.ssEnvt_Rlvt = ((string) w.varWSEnvt_Rlvt ?? "");
				r.ssProd_Alloc = ((string) w.varWSProd_Alloc ?? "");
				r.ssQual_Dik = ((string) w.varWSQual_Dik ?? "");
				r.ssManu_Mat = ((string) w.varWSManu_Mat ?? "");
				r.ssMfr_No = ((string) w.varWSMfr_No ?? "");
				r.ssInv_Mat_No = ((string) w.varWSInv_Mat_No ?? "");
				r.ssManuf_Prof = ((string) w.varWSManuf_Prof ?? "");
				r.ssHazmatprof = ((string) w.varWSHazmatprof ?? "");
				r.ssHigh_Visc = ((string) w.varWSHigh_Visc ?? "");
				r.ssLooseorliq = ((string) w.varWSLooseorliq ?? "");
				r.ssClosed_Box = ((string) w.varWSClosed_Box ?? "");
				r.ssAppd_B_Rec = ((string) w.varWSAppd_B_Rec ?? "");
				r.ssMatcmpllvl = ((string) w.varWSMatcmpllvl ?? "");
				r.ssPar_Eff = ((string) w.varWSPar_Eff ?? "");
				r.ssRound_Up_Rule_Expiration_Date = ((string) w.varWSRound_Up_Rule_Expiration_Date ?? "");
				r.ssPeriod_Ind_Expiration_Date = ((string) w.varWSPeriod_Ind_Expiration_Date ?? "");
				r.ssProd_Composition_On_Packaging = ((string) w.varWSProd_Composition_On_Packaging ?? "");
				r.ssItem_Cat = ((string) w.varWSItem_Cat ?? "");
				r.ssHaz_Mat_No_External = ((string) w.varWSHaz_Mat_No_External ?? "");
				r.ssHaz_Mat_No_Guid = ((string) w.varWSHaz_Mat_No_Guid ?? "");
				r.ssHaz_Mat_No_Version = ((string) w.varWSHaz_Mat_No_Version ?? "");
				r.ssInv_Mat_No_External = ((string) w.varWSInv_Mat_No_External ?? "");
				r.ssInv_Mat_No_Guid = ((string) w.varWSInv_Mat_No_Guid ?? "");
				r.ssInv_Mat_No_Version = ((string) w.varWSInv_Mat_No_Version ?? "");
				r.ssMaterial_Fixed = ((string) w.varWSMaterial_Fixed ?? "");
				r.ssCm_Relevance_Flag = ((string) w.varWSCm_Relevance_Flag ?? "");
				r.ssSled_Bbd = ((string) w.varWSSled_Bbd ?? "");
				r.ssGtin_Variant = ((string) w.varWSGtin_Variant ?? "");
				r.ssSerialization_Level = ((string) w.varWSSerialization_Level ?? "");
				r.ssPl_Ref_Mat = ((string) w.varWSPl_Ref_Mat ?? "");
				r.ssExtmatlgrp = ((string) w.varWSExtmatlgrp ?? "");
				r.ssUomusage = ((string) w.varWSUomusage ?? "");
				r.ssGds_Relevant = ((string) w.varWSGds_Relevant ?? "");
				r.ssMaterial_External = ((string) w.varWSMaterial_External ?? "");
				r.ssMaterial_Guid = ((string) w.varWSMaterial_Guid ?? "");
				r.ssMaterial_Version = ((string) w.varWSMaterial_Version ?? "");
				r.ssConf_Matl_External = ((string) w.varWSConf_Matl_External ?? "");
				r.ssConf_Matl_Guid = ((string) w.varWSConf_Matl_Guid ?? "");
				r.ssConf_Matl_Version = ((string) w.varWSConf_Matl_Version ?? "");
				r.ssPl_Ref_Mat_External = ((string) w.varWSPl_Ref_Mat_External ?? "");
				r.ssPl_Ref_Mat_Guid = ((string) w.varWSPl_Ref_Mat_Guid ?? "");
				r.ssPl_Ref_Mat_Version = ((string) w.varWSPl_Ref_Mat_Version ?? "");
				r.ssPr_Ref_Mat_External = ((string) w.varWSPr_Ref_Mat_External ?? "");
				r.ssPr_Ref_Mat_Guid = ((string) w.varWSPr_Ref_Mat_Guid ?? "");
				r.ssPr_Ref_Mat_Version = ((string) w.varWSPr_Ref_Mat_Version ?? "");
				r.ssWe_Origin_Acceptance = ((string) w.varWSWe_Origin_Acceptance ?? "");
				r.ssStd_Hu_Type = ((string) w.varWSStd_Hu_Type ?? "");
				r.ssPilferable = ((string) w.varWSPilferable ?? "");
				r.ssWhse_Storage_Condition = ((string) w.varWSWhse_Storage_Condition ?? "");
				r.ssWhse_Material_Group = ((string) w.varWSWhse_Material_Group ?? "");
				r.ssHandling_Indicator = ((string) w.varWSHandling_Indicator ?? "");
				r.ssHaz_Mat_Relevant = ((string) w.varWSHaz_Mat_Relevant ?? "");
				r.ssHu_Type = ((string) w.varWSHu_Type ?? "");
				r.ssVariable_Tare_Weight = ((string) w.varWSVariable_Tare_Weight ?? "");
				r.ssMax_Allowed_Capacity = (decimal) w.varWSMax_Allowed_Capacity;
				r.ssOvercapacity_Tolerance = (decimal) w.varWSOvercapacity_Tolerance;
				r.ssMax_Allowed_Length = (decimal) w.varWSMax_Allowed_Length;
				r.ssMax_Allowed_Width = (decimal) w.varWSMax_Allowed_Width;
				r.ssMax_Allowed_Heigth = (decimal) w.varWSMax_Allowed_Heigth;
				r.ssMax_Dimension_Un = ((string) w.varWSMax_Dimension_Un ?? "");
				r.ssMax_Dimension_Un_Iso = ((string) w.varWSMax_Dimension_Un_Iso ?? "");
				r.ssCountryori = ((string) w.varWSCountryori ?? "");
				r.ssCountryori_Iso = ((string) w.varWSCountryori_Iso ?? "");
				r.ssMatfrgtgrp = ((string) w.varWSMatfrgtgrp ?? "");
				r.ssQuarantine_Period = (decimal) w.varWSQuarantine_Period;
				r.ssQuarantine_Period_Un = ((string) w.varWSQuarantine_Period_Un ?? "");
				r.ssQuarantine_Period_Un_Iso = ((string) w.varWSQuarantine_Period_Un_Iso ?? "");
				r.ssQuality_Insp_Grp = ((string) w.varWSQuality_Insp_Grp ?? "");
				r.ssSerial_Number_Profile = ((string) w.varWSSerial_Number_Profile ?? "");
				r.ssEwm_Cw_Relevant = ((string) w.varWSEwm_Cw_Relevant ?? "");
				r.ssEwm_Cw_Logistical_Unit = ((string) w.varWSEwm_Cw_Logistical_Unit ?? "");
				r.ssEwm_Cw_Logistical_Unit_Iso = ((string) w.varWSEwm_Cw_Logistical_Unit_Iso ?? "");
				r.ssEwm_Cw_Tolerance_Group = ((string) w.varWSEwm_Cw_Tolerance_Group ?? "");
				r.ssEwm_Cw_Input_Control = ((string) w.varWSEwm_Cw_Input_Control ?? "");
				r.ssPacod = ((string) w.varWSPacod ?? "");
				r.ssDg_Pckging_Status = ((string) w.varWSDg_Pckging_Status ?? "");
				r.ssAdjust_Profile = ((string) w.varWSAdjust_Profile ?? "");
				r.ssIpmipproduct = ((string) w.varWSIpmipproduct ?? "");
				r.ssMedium = ((string) w.varWSMedium ?? "");
				r.ssNsnid = ((string) w.varWSNsnid ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLClientdataRecordList {
		public WORCClientdataRecord[] Array;


		public WORLClientdataRecordList(WORCClientdataRecord[] r) {
			if (r == null)
			Array = new WORCClientdataRecord[0];
			else
			Array = r;
		}
		public WORLClientdataRecordList() {
			Array = new WORCClientdataRecord[0];
		}

		public WORLClientdataRecordList(RLClientdataRecordList rl) {
			rl=(RLClientdataRecordList) rl.Duplicate();
			Array = new WORCClientdataRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCClientdataRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLClientdataRecordList {
		public static implicit operator RLClientdataRecordList(WORCClientdataRecord[] array) {
			RLClientdataRecordList rl = new RLClientdataRecordList();
			if (array != null) {
				foreach(WORCClientdataRecord val in array) {
					rl.Append((RCClientdataRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCClientdataRecord[](RLClientdataRecordList rl) {
			WORCClientdataRecord[] array = new WORCClientdataRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCClientdataRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLClientdataRecordList {
		public static implicit operator RLClientdataRecordList(WORLClientdataRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLClientdataRecordList(RLClientdataRecordList rl) {
			return new WORLClientdataRecordList(rl);
		}
		public static implicit operator WORCClientdataRecord[](WORLClientdataRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLClientdataRecordList(WORCClientdataRecord[] array) {
			return new WORLClientdataRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLClientdataList {
		public WORCClientdataRecord[] Array;


		public WORLClientdataList(WORCClientdataRecord[] r) {
			if (r == null)
			Array = new WORCClientdataRecord[0];
			else
			Array = r;
		}
		public WORLClientdataList() {
			Array = new WORCClientdataRecord[0];
		}

		public WORLClientdataList(RLClientdataList rl) {
			rl=(RLClientdataList) rl.Duplicate();
			Array = new WORCClientdataRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLClientdataList {
		public static implicit operator RLClientdataList(WORCClientdataRecord[] array) {
			RLClientdataList rl = new RLClientdataList();
			if (array != null) {
				foreach(WORCClientdataRecord val in array) {
					rl.Append((STClientdataStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCClientdataRecord[](RLClientdataList rl) {
			WORCClientdataRecord[] array = new WORCClientdataRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STClientdataStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLClientdataList {
		public static implicit operator RLClientdataList(WORLClientdataList w) {
			return w.Array;
		}
		public static implicit operator WORLClientdataList(RLClientdataList rl) {
			return new WORLClientdataList(rl);
		}
		public static implicit operator WORCClientdataRecord[](WORLClientdataList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLClientdataList(WORCClientdataRecord[] array) {
			return new WORLClientdataList(array);
		}
	}
}

