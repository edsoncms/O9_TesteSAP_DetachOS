/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STInput_AutoComplete_ListEntryStructure</code> that represents the Service Studio
	///  structure <code>Input_AutoComplete_ListEntry</code> <p> Description: Option to appear on the inpu
	/// t that uses the Input_AutoComplete web block.</p>
	/// </summary>
	[Serializable()]
	public partial struct STInput_AutoComplete_ListEntryStructure: ISerializable, ITypedRecord<STInput_AutoComplete_ListEntryStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("sxSgg9oQRkKKlyKvezqjKg*3KcPKPt21TGzsxphu1Ulnw");
		private static readonly GlobalObjectKey IdIdentifier = GlobalObjectKey.Parse("sxSgg9oQRkKKlyKvezqjKg*6ElBxT7zcQxiu+lo68r8Qw");

		public static void EnsureInitialized() {}

		static STInput_AutoComplete_ListEntryStructure() {
			global::ssTeste_SAP.STInput_AutoComplete_ListEntryStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Label")]
		public string ssLabel;

		[System.Xml.Serialization.XmlElement("Identifier")]
		public string ssIdentifier;


		public BitArray OptimizedAttributes;

		public STInput_AutoComplete_ListEntryStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssLabel = "";
			ssIdentifier = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLabel = r.ReadText(index++, "Input_AutoComplete_ListEntry.Label", "");
			ssIdentifier = r.ReadText(index++, "Input_AutoComplete_ListEntry.Identifier", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STInput_AutoComplete_ListEntryStructure r) {
			this = r;
		}


		public static bool operator == (STInput_AutoComplete_ListEntryStructure a, STInput_AutoComplete_ListEntryStructure b) {
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssIdentifier != b.ssIdentifier) return false;
			return true;
		}

		public static bool operator != (STInput_AutoComplete_ListEntryStructure a, STInput_AutoComplete_ListEntryStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STInput_AutoComplete_ListEntryStructure)) return false;
			return (this == (STInput_AutoComplete_ListEntryStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssIdentifier.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STInput_AutoComplete_ListEntryStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssLabel = "";
			ssIdentifier = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssLabel", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLabel' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLabel = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIdentifier", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIdentifier' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIdentifier = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STInput_AutoComplete_ListEntryStructure Duplicate() {
			STInput_AutoComplete_ListEntryStructure t;
			t.ssLabel = this.ssLabel;
			t.ssIdentifier = this.ssIdentifier;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Identifier")) VarValue.AppendAttribute(recordElem, "Identifier", ssIdentifier, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Identifier");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "identifier") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Identifier")) variable.Value = ssIdentifier; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdIdentifier) {
				return ssIdentifier;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssLabel = (string) other.AttributeGet(IdLabel);
			ssIdentifier = (string) other.AttributeGet(IdIdentifier);
		}
	} // STInput_AutoComplete_ListEntryStructure
	/// <summary>
	/// Structure <code>RCInput_AutoComplete_ListEntryRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCInput_AutoComplete_ListEntryRecord: ISerializable, ITypedRecord<RCInput_AutoComplete_ListEntryRecord> {
		private static readonly GlobalObjectKey IdInput_AutoComplete_ListEntry = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PjkT9vq5kQcEx+v+_2BuEQ");

		public static void EnsureInitialized() {}

		static RCInput_AutoComplete_ListEntryRecord() {
			global::ssTeste_SAP.RCInput_AutoComplete_ListEntryRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Input_AutoComplete_ListEntry")]
		public STInput_AutoComplete_ListEntryStructure ssSTInput_AutoComplete_ListEntry;


		public static implicit operator STInput_AutoComplete_ListEntryStructure(RCInput_AutoComplete_ListEntryRecord r) {
			return r.ssSTInput_AutoComplete_ListEntry;
		}

		public static implicit operator RCInput_AutoComplete_ListEntryRecord(STInput_AutoComplete_ListEntryStructure r) {
			RCInput_AutoComplete_ListEntryRecord res = new RCInput_AutoComplete_ListEntryRecord(null);
			res.ssSTInput_AutoComplete_ListEntry = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCInput_AutoComplete_ListEntryRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTInput_AutoComplete_ListEntry = new STInput_AutoComplete_ListEntryStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTInput_AutoComplete_ListEntry.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTInput_AutoComplete_ListEntry.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCInput_AutoComplete_ListEntryRecord r) {
			this = r;
		}


		public static bool operator == (RCInput_AutoComplete_ListEntryRecord a, RCInput_AutoComplete_ListEntryRecord b) {
			if (a.ssSTInput_AutoComplete_ListEntry != b.ssSTInput_AutoComplete_ListEntry) return false;
			return true;
		}

		public static bool operator != (RCInput_AutoComplete_ListEntryRecord a, RCInput_AutoComplete_ListEntryRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCInput_AutoComplete_ListEntryRecord)) return false;
			return (this == (RCInput_AutoComplete_ListEntryRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTInput_AutoComplete_ListEntry.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCInput_AutoComplete_ListEntryRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTInput_AutoComplete_ListEntry = new STInput_AutoComplete_ListEntryStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTInput_AutoComplete_ListEntry", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTInput_AutoComplete_ListEntry' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTInput_AutoComplete_ListEntry = (STInput_AutoComplete_ListEntryStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTInput_AutoComplete_ListEntry.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTInput_AutoComplete_ListEntry.InternalRecursiveSave();
		}


		public RCInput_AutoComplete_ListEntryRecord Duplicate() {
			RCInput_AutoComplete_ListEntryRecord t;
			t.ssSTInput_AutoComplete_ListEntry = (STInput_AutoComplete_ListEntryStructure) this.ssSTInput_AutoComplete_ListEntry.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTInput_AutoComplete_ListEntry.ToXml(this, recordElem, "Input_AutoComplete_ListEntry", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "input_autocomplete_listentry") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Input_AutoComplete_ListEntry")) variable.Value = ssSTInput_AutoComplete_ListEntry; else variable.Optimized = true;
				variable.SetFieldName("input_autocomplete_listentry");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdInput_AutoComplete_ListEntry) {
				return ssSTInput_AutoComplete_ListEntry;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTInput_AutoComplete_ListEntry.FillFromOther((IRecord) other.AttributeGet(IdInput_AutoComplete_ListEntry));
		}
	} // RCInput_AutoComplete_ListEntryRecord
	/// <summary>
	/// RecordList type <code>RLInput_AutoComplete_ListEntryRecordList</code> that represents a record list
	///  of <code>Input_AutoComplete_ListEntry</code>
	/// </summary>
	[Serializable()]
	public partial class RLInput_AutoComplete_ListEntryRecordList: GenericRecordList<RCInput_AutoComplete_ListEntryRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLInput_AutoComplete_ListEntryRecordList() {
			global::ssTeste_SAP.RLInput_AutoComplete_ListEntryRecordListTypeFactoryImpl.InitializeFactory();
		}

		protected override RCInput_AutoComplete_ListEntryRecord GetElementDefaultValue() {
			return new RCInput_AutoComplete_ListEntryRecord("");
		}

		public T[] ToArray<T>(Func<RCInput_AutoComplete_ListEntryRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLInput_AutoComplete_ListEntryRecordList recordlist, Func<RCInput_AutoComplete_ListEntryRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLInput_AutoComplete_ListEntryRecordList ToList<T>(T[] array, Func <T, RCInput_AutoComplete_ListEntryRecord> converter) {
			RLInput_AutoComplete_ListEntryRecordList result = new RLInput_AutoComplete_ListEntryRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLInput_AutoComplete_ListEntryRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLInput_AutoComplete_ListEntryRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLInput_AutoComplete_ListEntryRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLInput_AutoComplete_ListEntryRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCInput_AutoComplete_ListEntryRecord> NewList() {
			return new RLInput_AutoComplete_ListEntryRecordList();
		}


	} // RLInput_AutoComplete_ListEntryRecordList
	/// <summary>
	/// RecordList type <code>RLInput_AutoComplete_ListEntryList</code> that represents a record list of
	///  <code>Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLInput_AutoComplete_ListEntryList: GenericRecordList<STInput_AutoComplete_ListEntryStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STInput_AutoComplete_ListEntryStructure GetElementDefaultValue() {
			return new STInput_AutoComplete_ListEntryStructure("");
		}

		public T[] ToArray<T>(Func<STInput_AutoComplete_ListEntryStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLInput_AutoComplete_ListEntryList recordlist, Func<STInput_AutoComplete_ListEntryStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLInput_AutoComplete_ListEntryList ToList<T>(T[] array, Func <T, STInput_AutoComplete_ListEntryStructure> converter) {
			RLInput_AutoComplete_ListEntryList result = new RLInput_AutoComplete_ListEntryList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLInput_AutoComplete_ListEntryList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLInput_AutoComplete_ListEntryList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLInput_AutoComplete_ListEntryList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLInput_AutoComplete_ListEntryList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STInput_AutoComplete_ListEntryStructure> NewList() {
			return new RLInput_AutoComplete_ListEntryList();
		}


	} // RLInput_AutoComplete_ListEntryList
}

namespace ssTeste_SAP {
	[XmlType("Input_AutoComplete_ListEntry")]
	public class WORCInput_AutoComplete_ListEntryRecord {
		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Identifier")]
		public string varWSIdentifier;

		public WORCInput_AutoComplete_ListEntryRecord() {
			varWSLabel = (string) "";
			varWSIdentifier = (string) "";
		}

		public WORCInput_AutoComplete_ListEntryRecord(STInput_AutoComplete_ListEntryStructure r) {
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSIdentifier = BaseAppUtils.RemoveControlChars(r.ssIdentifier);
		}

		public static RLInput_AutoComplete_ListEntryList ToRecordList(WORCInput_AutoComplete_ListEntryRecord[] array) {
			RLInput_AutoComplete_ListEntryList rl = new RLInput_AutoComplete_ListEntryList();
			if (array != null) {
				foreach(WORCInput_AutoComplete_ListEntryRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCInput_AutoComplete_ListEntryRecord[] FromRecordList(RLInput_AutoComplete_ListEntryList rl) {
			WORCInput_AutoComplete_ListEntryRecord[] array = new WORCInput_AutoComplete_ListEntryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCInput_AutoComplete_ListEntryRecord {
		public static implicit operator WORCInput_AutoComplete_ListEntryRecord(RCInput_AutoComplete_ListEntryRecord r) {
			return new WORCInput_AutoComplete_ListEntryRecord(r.ssSTInput_AutoComplete_ListEntry);
		}

		public static implicit operator RCInput_AutoComplete_ListEntryRecord(WORCInput_AutoComplete_ListEntryRecord w) {
			RCInput_AutoComplete_ListEntryRecord r = new RCInput_AutoComplete_ListEntryRecord("");
			if (w != null) {
				r.ssSTInput_AutoComplete_ListEntry = w;
			}
			return r;
		}

	}

	partial struct STInput_AutoComplete_ListEntryStructure {
		public static implicit operator WORCInput_AutoComplete_ListEntryRecord(STInput_AutoComplete_ListEntryStructure r) {
			return new WORCInput_AutoComplete_ListEntryRecord(r);
		}

		public static implicit operator STInput_AutoComplete_ListEntryStructure(WORCInput_AutoComplete_ListEntryRecord w) {
			STInput_AutoComplete_ListEntryStructure r = new STInput_AutoComplete_ListEntryStructure("");
			if (w != null) {
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssIdentifier = ((string) w.varWSIdentifier ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLInput_AutoComplete_ListEntryRecordList {
		public WORCInput_AutoComplete_ListEntryRecord[] Array;


		public WORLInput_AutoComplete_ListEntryRecordList(WORCInput_AutoComplete_ListEntryRecord[] r) {
			if (r == null)
			Array = new WORCInput_AutoComplete_ListEntryRecord[0];
			else
			Array = r;
		}
		public WORLInput_AutoComplete_ListEntryRecordList() {
			Array = new WORCInput_AutoComplete_ListEntryRecord[0];
		}

		public WORLInput_AutoComplete_ListEntryRecordList(RLInput_AutoComplete_ListEntryRecordList rl) {
			rl=(RLInput_AutoComplete_ListEntryRecordList) rl.Duplicate();
			Array = new WORCInput_AutoComplete_ListEntryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCInput_AutoComplete_ListEntryRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLInput_AutoComplete_ListEntryRecordList {
		public static implicit operator RLInput_AutoComplete_ListEntryRecordList(WORCInput_AutoComplete_ListEntryRecord[] array) {
			RLInput_AutoComplete_ListEntryRecordList rl = new RLInput_AutoComplete_ListEntryRecordList();
			if (array != null) {
				foreach(WORCInput_AutoComplete_ListEntryRecord val in array) {
					rl.Append((RCInput_AutoComplete_ListEntryRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCInput_AutoComplete_ListEntryRecord[](RLInput_AutoComplete_ListEntryRecordList rl) {
			WORCInput_AutoComplete_ListEntryRecord[] array = new WORCInput_AutoComplete_ListEntryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCInput_AutoComplete_ListEntryRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLInput_AutoComplete_ListEntryRecordList {
		public static implicit operator RLInput_AutoComplete_ListEntryRecordList(WORLInput_AutoComplete_ListEntryRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLInput_AutoComplete_ListEntryRecordList(RLInput_AutoComplete_ListEntryRecordList rl) {
			return new WORLInput_AutoComplete_ListEntryRecordList(rl);
		}
		public static implicit operator WORCInput_AutoComplete_ListEntryRecord[](WORLInput_AutoComplete_ListEntryRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLInput_AutoComplete_ListEntryRecordList(WORCInput_AutoComplete_ListEntryRecord[] array) {
			return new WORLInput_AutoComplete_ListEntryRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLInput_AutoComplete_ListEntryList {
		public WORCInput_AutoComplete_ListEntryRecord[] Array;


		public WORLInput_AutoComplete_ListEntryList(WORCInput_AutoComplete_ListEntryRecord[] r) {
			if (r == null)
			Array = new WORCInput_AutoComplete_ListEntryRecord[0];
			else
			Array = r;
		}
		public WORLInput_AutoComplete_ListEntryList() {
			Array = new WORCInput_AutoComplete_ListEntryRecord[0];
		}

		public WORLInput_AutoComplete_ListEntryList(RLInput_AutoComplete_ListEntryList rl) {
			rl=(RLInput_AutoComplete_ListEntryList) rl.Duplicate();
			Array = new WORCInput_AutoComplete_ListEntryRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLInput_AutoComplete_ListEntryList {
		public static implicit operator RLInput_AutoComplete_ListEntryList(WORCInput_AutoComplete_ListEntryRecord[] array) {
			RLInput_AutoComplete_ListEntryList rl = new RLInput_AutoComplete_ListEntryList();
			if (array != null) {
				foreach(WORCInput_AutoComplete_ListEntryRecord val in array) {
					rl.Append((STInput_AutoComplete_ListEntryStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCInput_AutoComplete_ListEntryRecord[](RLInput_AutoComplete_ListEntryList rl) {
			WORCInput_AutoComplete_ListEntryRecord[] array = new WORCInput_AutoComplete_ListEntryRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STInput_AutoComplete_ListEntryStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLInput_AutoComplete_ListEntryList {
		public static implicit operator RLInput_AutoComplete_ListEntryList(WORLInput_AutoComplete_ListEntryList w) {
			return w.Array;
		}
		public static implicit operator WORLInput_AutoComplete_ListEntryList(RLInput_AutoComplete_ListEntryList rl) {
			return new WORLInput_AutoComplete_ListEntryList(rl);
		}
		public static implicit operator WORCInput_AutoComplete_ListEntryRecord[](WORLInput_AutoComplete_ListEntryList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLInput_AutoComplete_ListEntryList(WORCInput_AutoComplete_ListEntryRecord[] array) {
			return new WORLInput_AutoComplete_ListEntryList(array);
		}
	}
}

