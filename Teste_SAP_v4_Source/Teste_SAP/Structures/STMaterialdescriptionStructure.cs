/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STMaterialdescriptionStructure</code> that represents the Service Studio structure
	///  <code>Materialdescription</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STMaterialdescriptionStructure: ISerializable, ITypedRecord<STMaterialdescriptionStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdLangu = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*2YpLOWXpH0u3epCnpXO2Vg");
		private static readonly GlobalObjectKey IdLangu_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*XLyNuhRg6ku7_3H9isYJBw");
		private static readonly GlobalObjectKey IdMatl_Desc = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*4JQWcJ18WU6quH9AftDmQg");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Langu")]
		public string ssLangu;

		[System.Xml.Serialization.XmlElement("Langu_Iso")]
		public string ssLangu_Iso;

		[System.Xml.Serialization.XmlElement("Matl_Desc")]
		public string ssMatl_Desc;


		public BitArray OptimizedAttributes;

		public STMaterialdescriptionStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssLangu = "";
			ssLangu_Iso = "";
			ssMatl_Desc = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLangu = r.ReadText(index++, "Materialdescription.Langu", "");
			ssLangu_Iso = r.ReadText(index++, "Materialdescription.Langu_Iso", "");
			ssMatl_Desc = r.ReadText(index++, "Materialdescription.Matl_Desc", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STMaterialdescriptionStructure r) {
			this = r;
		}


		public static bool operator == (STMaterialdescriptionStructure a, STMaterialdescriptionStructure b) {
			if (a.ssLangu != b.ssLangu) return false;
			if (a.ssLangu_Iso != b.ssLangu_Iso) return false;
			if (a.ssMatl_Desc != b.ssMatl_Desc) return false;
			return true;
		}

		public static bool operator != (STMaterialdescriptionStructure a, STMaterialdescriptionStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STMaterialdescriptionStructure)) return false;
			return (this == (STMaterialdescriptionStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLangu.GetHashCode()
				^ ssLangu_Iso.GetHashCode()
				^ ssMatl_Desc.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STMaterialdescriptionStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssLangu = "";
			ssLangu_Iso = "";
			ssMatl_Desc = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssLangu", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLangu' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLangu = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLangu_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLangu_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLangu_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Desc", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Desc' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Desc = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STMaterialdescriptionStructure Duplicate() {
			STMaterialdescriptionStructure t;
			t.ssLangu = this.ssLangu;
			t.ssLangu_Iso = this.ssLangu_Iso;
			t.ssMatl_Desc = this.ssMatl_Desc;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Langu")) VarValue.AppendAttribute(recordElem, "Langu", ssLangu, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Langu");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Langu_Iso")) VarValue.AppendAttribute(recordElem, "Langu_Iso", ssLangu_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Langu_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Desc")) VarValue.AppendAttribute(recordElem, "Matl_Desc", ssMatl_Desc, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Desc");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "langu") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Langu")) variable.Value = ssLangu; else variable.Optimized = true;
			} else if (head == "langu_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Langu_Iso")) variable.Value = ssLangu_Iso; else variable.Optimized = true;
			} else if (head == "matl_desc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Desc")) variable.Value = ssMatl_Desc; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLangu) {
				return ssLangu;
			} else if (key == IdLangu_Iso) {
				return ssLangu_Iso;
			} else if (key == IdMatl_Desc) {
				return ssMatl_Desc;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssLangu = (string) other.AttributeGet(IdLangu);
			ssLangu_Iso = (string) other.AttributeGet(IdLangu_Iso);
			ssMatl_Desc = (string) other.AttributeGet(IdMatl_Desc);
		}
	} // STMaterialdescriptionStructure
	/// <summary>
	/// Structure <code>RCMaterialdescriptionRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCMaterialdescriptionRecord: ISerializable, ITypedRecord<RCMaterialdescriptionRecord> {
		private static readonly GlobalObjectKey IdMaterialdescription = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*m2pTd5cWECDSpBghj_nQEw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Materialdescription")]
		public STMaterialdescriptionStructure ssSTMaterialdescription;


		public static implicit operator STMaterialdescriptionStructure(RCMaterialdescriptionRecord r) {
			return r.ssSTMaterialdescription;
		}

		public static implicit operator RCMaterialdescriptionRecord(STMaterialdescriptionStructure r) {
			RCMaterialdescriptionRecord res = new RCMaterialdescriptionRecord(null);
			res.ssSTMaterialdescription = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCMaterialdescriptionRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTMaterialdescription = new STMaterialdescriptionStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTMaterialdescription.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTMaterialdescription.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCMaterialdescriptionRecord r) {
			this = r;
		}


		public static bool operator == (RCMaterialdescriptionRecord a, RCMaterialdescriptionRecord b) {
			if (a.ssSTMaterialdescription != b.ssSTMaterialdescription) return false;
			return true;
		}

		public static bool operator != (RCMaterialdescriptionRecord a, RCMaterialdescriptionRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCMaterialdescriptionRecord)) return false;
			return (this == (RCMaterialdescriptionRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTMaterialdescription.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCMaterialdescriptionRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTMaterialdescription = new STMaterialdescriptionStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTMaterialdescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTMaterialdescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTMaterialdescription = (STMaterialdescriptionStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTMaterialdescription.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTMaterialdescription.InternalRecursiveSave();
		}


		public RCMaterialdescriptionRecord Duplicate() {
			RCMaterialdescriptionRecord t;
			t.ssSTMaterialdescription = (STMaterialdescriptionStructure) this.ssSTMaterialdescription.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTMaterialdescription.ToXml(this, recordElem, "Materialdescription", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "materialdescription") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Materialdescription")) variable.Value = ssSTMaterialdescription; else variable.Optimized = true;
				variable.SetFieldName("materialdescription");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMaterialdescription) {
				return ssSTMaterialdescription;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTMaterialdescription.FillFromOther((IRecord) other.AttributeGet(IdMaterialdescription));
		}
	} // RCMaterialdescriptionRecord
	/// <summary>
	/// RecordList type <code>RLMaterialdescriptionRecordList</code> that represents a record list of
	///  <code>Materialdescription</code>
	/// </summary>
	[Serializable()]
	public partial class RLMaterialdescriptionRecordList: GenericRecordList<RCMaterialdescriptionRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCMaterialdescriptionRecord GetElementDefaultValue() {
			return new RCMaterialdescriptionRecord("");
		}

		public T[] ToArray<T>(Func<RCMaterialdescriptionRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMaterialdescriptionRecordList recordlist, Func<RCMaterialdescriptionRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMaterialdescriptionRecordList ToList<T>(T[] array, Func <T, RCMaterialdescriptionRecord> converter) {
			RLMaterialdescriptionRecordList result = new RLMaterialdescriptionRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMaterialdescriptionRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMaterialdescriptionRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMaterialdescriptionRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMaterialdescriptionRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCMaterialdescriptionRecord> NewList() {
			return new RLMaterialdescriptionRecordList();
		}


	} // RLMaterialdescriptionRecordList
	/// <summary>
	/// RecordList type <code>RLMaterialdescriptionList</code> that represents a record list of <code>Text,
	///  Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLMaterialdescriptionList: GenericRecordList<STMaterialdescriptionStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STMaterialdescriptionStructure GetElementDefaultValue() {
			return new STMaterialdescriptionStructure("");
		}

		public T[] ToArray<T>(Func<STMaterialdescriptionStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMaterialdescriptionList recordlist, Func<STMaterialdescriptionStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLMaterialdescriptionList ToList<T>(T[] array, Func <T, STMaterialdescriptionStructure> converter) {
			RLMaterialdescriptionList result = new RLMaterialdescriptionList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMaterialdescriptionList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMaterialdescriptionList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMaterialdescriptionList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMaterialdescriptionList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STMaterialdescriptionStructure> NewList() {
			return new RLMaterialdescriptionList();
		}


	} // RLMaterialdescriptionList
}

namespace ssTeste_SAP {
	[System.CodeDom.Compiler.GeneratedCodeAttribute("CompilerService", "9.1.616.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute("Materialdescription", Namespace= "http://www.outsystems.com")]
	public class WORCMaterialdescriptionRecord {
		[System.Xml.Serialization.XmlIgnore]
		public bool varWSLanguSpecified;
		[System.Xml.Serialization.XmlElement("Langu")]
		public System.String varWSLangu;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSLangu_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Langu_Iso")]
		public System.String varWSLangu_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_DescSpecified;
		[System.Xml.Serialization.XmlElement("Matl_Desc")]
		public System.String varWSMatl_Desc;

		public WORCMaterialdescriptionRecord() {
			varWSLangu = (System.String) "";
			varWSLangu_Iso = (System.String) "";
			varWSMatl_Desc = (System.String) "";
		}

		public WORCMaterialdescriptionRecord(STMaterialdescriptionStructure r) {
			varWSLangu = BaseAppUtils.RemoveControlChars(r.ssLangu);
			varWSLanguSpecified = r.ssLangu != "";
			varWSLangu_Iso = BaseAppUtils.RemoveControlChars(r.ssLangu_Iso);
			varWSLangu_IsoSpecified = r.ssLangu_Iso != "";
			varWSMatl_Desc = BaseAppUtils.RemoveControlChars(r.ssMatl_Desc);
			varWSMatl_DescSpecified = r.ssMatl_Desc != "";
		}

		public static RLMaterialdescriptionList ToRecordList(WORCMaterialdescriptionRecord[] array) {
			RLMaterialdescriptionList rl = new RLMaterialdescriptionList();
			if (array != null) {
				foreach(WORCMaterialdescriptionRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCMaterialdescriptionRecord[] FromRecordList(RLMaterialdescriptionList rl) {
			WORCMaterialdescriptionRecord[] array = new WORCMaterialdescriptionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCMaterialdescriptionRecord {
		public static implicit operator WORCMaterialdescriptionRecord(RCMaterialdescriptionRecord r) {
			return new WORCMaterialdescriptionRecord(r.ssSTMaterialdescription);
		}

		public static implicit operator RCMaterialdescriptionRecord(WORCMaterialdescriptionRecord w) {
			RCMaterialdescriptionRecord r = new RCMaterialdescriptionRecord("");
			if (w != null) {
				r.ssSTMaterialdescription = w;
			}
			return r;
		}

	}

	partial struct STMaterialdescriptionStructure {
		public static implicit operator WORCMaterialdescriptionRecord(STMaterialdescriptionStructure r) {
			return new WORCMaterialdescriptionRecord(r);
		}

		public static implicit operator STMaterialdescriptionStructure(WORCMaterialdescriptionRecord w) {
			STMaterialdescriptionStructure r = new STMaterialdescriptionStructure("");
			if (w != null) {
				r.ssLangu = ((string) w.varWSLangu ?? "");
				r.ssLangu_Iso = ((string) w.varWSLangu_Iso ?? "");
				r.ssMatl_Desc = ((string) w.varWSMatl_Desc ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLMaterialdescriptionRecordList {
		public WORCMaterialdescriptionRecord[] Array;


		public WORLMaterialdescriptionRecordList(WORCMaterialdescriptionRecord[] r) {
			if (r == null)
			Array = new WORCMaterialdescriptionRecord[0];
			else
			Array = r;
		}
		public WORLMaterialdescriptionRecordList() {
			Array = new WORCMaterialdescriptionRecord[0];
		}

		public WORLMaterialdescriptionRecordList(RLMaterialdescriptionRecordList rl) {
			rl=(RLMaterialdescriptionRecordList) rl.Duplicate();
			Array = new WORCMaterialdescriptionRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCMaterialdescriptionRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLMaterialdescriptionRecordList {
		public static implicit operator RLMaterialdescriptionRecordList(WORCMaterialdescriptionRecord[] array) {
			RLMaterialdescriptionRecordList rl = new RLMaterialdescriptionRecordList();
			if (array != null) {
				foreach(WORCMaterialdescriptionRecord val in array) {
					rl.Append((RCMaterialdescriptionRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMaterialdescriptionRecord[](RLMaterialdescriptionRecordList rl) {
			WORCMaterialdescriptionRecord[] array = new WORCMaterialdescriptionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCMaterialdescriptionRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLMaterialdescriptionRecordList {
		public static implicit operator RLMaterialdescriptionRecordList(WORLMaterialdescriptionRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLMaterialdescriptionRecordList(RLMaterialdescriptionRecordList rl) {
			return new WORLMaterialdescriptionRecordList(rl);
		}
		public static implicit operator WORCMaterialdescriptionRecord[](WORLMaterialdescriptionRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMaterialdescriptionRecordList(WORCMaterialdescriptionRecord[] array) {
			return new WORLMaterialdescriptionRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLMaterialdescriptionList {
		public WORCMaterialdescriptionRecord[] Array;


		public WORLMaterialdescriptionList(WORCMaterialdescriptionRecord[] r) {
			if (r == null)
			Array = new WORCMaterialdescriptionRecord[0];
			else
			Array = r;
		}
		public WORLMaterialdescriptionList() {
			Array = new WORCMaterialdescriptionRecord[0];
		}

		public WORLMaterialdescriptionList(RLMaterialdescriptionList rl) {
			rl=(RLMaterialdescriptionList) rl.Duplicate();
			Array = new WORCMaterialdescriptionRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLMaterialdescriptionList {
		public static implicit operator RLMaterialdescriptionList(WORCMaterialdescriptionRecord[] array) {
			RLMaterialdescriptionList rl = new RLMaterialdescriptionList();
			if (array != null) {
				foreach(WORCMaterialdescriptionRecord val in array) {
					rl.Append((STMaterialdescriptionStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMaterialdescriptionRecord[](RLMaterialdescriptionList rl) {
			WORCMaterialdescriptionRecord[] array = new WORCMaterialdescriptionRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STMaterialdescriptionStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLMaterialdescriptionList {
		public static implicit operator RLMaterialdescriptionList(WORLMaterialdescriptionList w) {
			return w.Array;
		}
		public static implicit operator WORLMaterialdescriptionList(RLMaterialdescriptionList rl) {
			return new WORLMaterialdescriptionList(rl);
		}
		public static implicit operator WORCMaterialdescriptionRecord[](WORLMaterialdescriptionList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMaterialdescriptionList(WORCMaterialdescriptionRecord[] array) {
			return new WORLMaterialdescriptionList(array);
		}
	}
}

