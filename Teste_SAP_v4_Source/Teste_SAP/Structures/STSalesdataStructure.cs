/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STSalesdataStructure</code> that represents the Service Studio structure
	///  <code>Salesdata</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STSalesdataStructure: ISerializable, ITypedRecord<STSalesdataStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdSales_Org = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*c+Dj9WJDX06L4nJPBrcOgw");
		private static readonly GlobalObjectKey IdDistr_Chan = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*kTvmFeYj3EGICYAfs+_q4g");
		private static readonly GlobalObjectKey IdDel_Flag = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*2aI8o9iF6kKtr5GnqXmvDQ");
		private static readonly GlobalObjectKey IdMatl_Stats = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Q60ZfEyzAk+LLXj1ldThFQ");
		private static readonly GlobalObjectKey IdRebate_Grp = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*bUmTpLsH2Ey8eKPYeNBKtw");
		private static readonly GlobalObjectKey IdComm_Group = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Vrjemb55UU+20bZKtrwLVQ");
		private static readonly GlobalObjectKey IdCash_Disc = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*rJ953fXLJk+Db2ziq7HGvA");
		private static readonly GlobalObjectKey IdSal_Status = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*uYGy1+g1N0mHtkH_UHxPYg");
		private static readonly GlobalObjectKey IdValid_From = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*+jWQdbxfvU+7_pGFsZXxtA");
		private static readonly GlobalObjectKey IdMin_Order = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*bXqJZeWJuUixHq5YT4+URg");
		private static readonly GlobalObjectKey IdMin_Dely = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Euao59aJPUSdGHbaQRm8Cw");
		private static readonly GlobalObjectKey IdMin_Mto = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*72Fg0w4gNkmPvmI+cqqwAw");
		private static readonly GlobalObjectKey IdDely_Unit = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*VdsvjQSdEkC9AABO2f6jXg");
		private static readonly GlobalObjectKey IdDely_Uom = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*hXL2eNp0j0GoTu5Dw7sCZg");
		private static readonly GlobalObjectKey IdDely_Uom_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*S6y1wlkLCE6nu_XzPx9IzQ");
		private static readonly GlobalObjectKey IdSales_Unit = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Behkpkx6LES2CdlAVpfEvw");
		private static readonly GlobalObjectKey IdSales_Unit_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*YPCCxI2fwEuXNJ2Vmx28yA");
		private static readonly GlobalObjectKey IdItem_Cat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*PyI6ULjrFEOHzifTFuCb1g");
		private static readonly GlobalObjectKey IdDelyg_Plnt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*7T_l8ZfYSkmFbEny5FCivQ");
		private static readonly GlobalObjectKey IdProd_Hier = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*2t7BEIUm60iDSFuT7zRoOA");
		private static readonly GlobalObjectKey IdPr_Ref_Mat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*U++2y1pMh0aa3M0W5xt7kA");
		private static readonly GlobalObjectKey IdMat_Pr_Grp = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*hGYDBzPeqUiD36mQ7_7g6Q");
		private static readonly GlobalObjectKey IdAcct_Assgt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*pHmfBXRkKkmaB3fguQWhVw");
		private static readonly GlobalObjectKey IdMatl_Grp_1 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*6_THQ_DxA02B+CE43r+2cg");
		private static readonly GlobalObjectKey IdMatl_Grp_2 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Ote0NR0pUEOi6ifbTq5YBw");
		private static readonly GlobalObjectKey IdMatl_Grp_3 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*M6pTTcWQbUuy+2XGoqF_Lw");
		private static readonly GlobalObjectKey IdMatl_Grp_4 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*jIRntUgrhkeKvu0gGAcQIQ");
		private static readonly GlobalObjectKey IdMatl_Grp_5 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*pYv5SSoCIEWDyejrj_f6gA");
		private static readonly GlobalObjectKey IdProd_Att_1 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*dl70okdGtUyf6n_41tlPOw");
		private static readonly GlobalObjectKey IdProd_Att_2 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*DKG4tK2FF0yogBLkYkGuww");
		private static readonly GlobalObjectKey IdProd_Att_3 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*jsB4jthAKEG0igBSGuZMog");
		private static readonly GlobalObjectKey IdProd_Att_4 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*WO6H6lJ7fkKs4Aff1p_s1g");
		private static readonly GlobalObjectKey IdProd_Att_5 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*hHx+P9IQWUWB3MqpcMs_xA");
		private static readonly GlobalObjectKey IdProd_Att_6 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*W8ya_50rckKNvGFikrQuEg");
		private static readonly GlobalObjectKey IdProd_Att_7 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*wUFYY8384Euhjqras+Zz2w");
		private static readonly GlobalObjectKey IdProd_Att_8 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*bIN4i32880yNnabfL_Z_wg");
		private static readonly GlobalObjectKey IdProd_Att_9 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*fxiCIPc39EqlgXW5cTEmxw");
		private static readonly GlobalObjectKey IdProd_Att10 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*XuV4xrTHvUmWQVt+51M_lg");
		private static readonly GlobalObjectKey IdRound_Prof = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*esDX8fgV_0O9y8BkczjeFQ");
		private static readonly GlobalObjectKey IdVar_Sales_Un = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*xsCzsL+eX0m0gLD1kiy4AA");
		private static readonly GlobalObjectKey IdUnit_Group = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*n3J598TLbUCFsHqPMj1V5w");
		private static readonly GlobalObjectKey IdPr_Ref_Mat_External = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*sEN8wRi2h06vS95056WAHw");
		private static readonly GlobalObjectKey IdPr_Ref_Mat_Guid = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*tvewvXnpSUmPzpxS9Z+yMQ");
		private static readonly GlobalObjectKey IdPr_Ref_Mat_Version = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*G_MdbLK0KkCNXPoK5v4S3Q");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Sales_Org")]
		public string ssSales_Org;

		[System.Xml.Serialization.XmlElement("Distr_Chan")]
		public string ssDistr_Chan;

		[System.Xml.Serialization.XmlElement("Del_Flag")]
		public string ssDel_Flag;

		[System.Xml.Serialization.XmlElement("Matl_Stats")]
		public string ssMatl_Stats;

		[System.Xml.Serialization.XmlElement("Rebate_Grp")]
		public string ssRebate_Grp;

		[System.Xml.Serialization.XmlElement("Comm_Group")]
		public string ssComm_Group;

		[System.Xml.Serialization.XmlElement("Cash_Disc")]
		public string ssCash_Disc;

		[System.Xml.Serialization.XmlElement("Sal_Status")]
		public string ssSal_Status;

		[System.Xml.Serialization.XmlElement("Valid_From")]
		public DateTime ssValid_From;

		[System.Xml.Serialization.XmlElement("Min_Order")]
		public decimal ssMin_Order;

		[System.Xml.Serialization.XmlElement("Min_Dely")]
		public decimal ssMin_Dely;

		[System.Xml.Serialization.XmlElement("Min_Mto")]
		public decimal ssMin_Mto;

		[System.Xml.Serialization.XmlElement("Dely_Unit")]
		public decimal ssDely_Unit;

		[System.Xml.Serialization.XmlElement("Dely_Uom")]
		public string ssDely_Uom;

		[System.Xml.Serialization.XmlElement("Dely_Uom_Iso")]
		public string ssDely_Uom_Iso;

		[System.Xml.Serialization.XmlElement("Sales_Unit")]
		public string ssSales_Unit;

		[System.Xml.Serialization.XmlElement("Sales_Unit_Iso")]
		public string ssSales_Unit_Iso;

		[System.Xml.Serialization.XmlElement("Item_Cat")]
		public string ssItem_Cat;

		[System.Xml.Serialization.XmlElement("Delyg_Plnt")]
		public string ssDelyg_Plnt;

		[System.Xml.Serialization.XmlElement("Prod_Hier")]
		public string ssProd_Hier;

		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat")]
		public string ssPr_Ref_Mat;

		[System.Xml.Serialization.XmlElement("Mat_Pr_Grp")]
		public string ssMat_Pr_Grp;

		[System.Xml.Serialization.XmlElement("Acct_Assgt")]
		public string ssAcct_Assgt;

		[System.Xml.Serialization.XmlElement("Matl_Grp_1")]
		public string ssMatl_Grp_1;

		[System.Xml.Serialization.XmlElement("Matl_Grp_2")]
		public string ssMatl_Grp_2;

		[System.Xml.Serialization.XmlElement("Matl_Grp_3")]
		public string ssMatl_Grp_3;

		[System.Xml.Serialization.XmlElement("Matl_Grp_4")]
		public string ssMatl_Grp_4;

		[System.Xml.Serialization.XmlElement("Matl_Grp_5")]
		public string ssMatl_Grp_5;

		[System.Xml.Serialization.XmlElement("Prod_Att_1")]
		public string ssProd_Att_1;

		[System.Xml.Serialization.XmlElement("Prod_Att_2")]
		public string ssProd_Att_2;

		[System.Xml.Serialization.XmlElement("Prod_Att_3")]
		public string ssProd_Att_3;

		[System.Xml.Serialization.XmlElement("Prod_Att_4")]
		public string ssProd_Att_4;

		[System.Xml.Serialization.XmlElement("Prod_Att_5")]
		public string ssProd_Att_5;

		[System.Xml.Serialization.XmlElement("Prod_Att_6")]
		public string ssProd_Att_6;

		[System.Xml.Serialization.XmlElement("Prod_Att_7")]
		public string ssProd_Att_7;

		[System.Xml.Serialization.XmlElement("Prod_Att_8")]
		public string ssProd_Att_8;

		[System.Xml.Serialization.XmlElement("Prod_Att_9")]
		public string ssProd_Att_9;

		[System.Xml.Serialization.XmlElement("Prod_Att10")]
		public string ssProd_Att10;

		[System.Xml.Serialization.XmlElement("Round_Prof")]
		public string ssRound_Prof;

		[System.Xml.Serialization.XmlElement("Var_Sales_Un")]
		public string ssVar_Sales_Un;

		[System.Xml.Serialization.XmlElement("Unit_Group")]
		public string ssUnit_Group;

		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_External")]
		public string ssPr_Ref_Mat_External;

		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_Guid")]
		public string ssPr_Ref_Mat_Guid;

		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_Version")]
		public string ssPr_Ref_Mat_Version;


		public BitArray OptimizedAttributes;

		public STSalesdataStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssSales_Org = "";
			ssDistr_Chan = "";
			ssDel_Flag = "";
			ssMatl_Stats = "";
			ssRebate_Grp = "";
			ssComm_Group = "";
			ssCash_Disc = "";
			ssSal_Status = "";
			ssValid_From = new DateTime(1900, 1, 1, 0, 0, 0);
			ssMin_Order = 0.0M;
			ssMin_Dely = 0.0M;
			ssMin_Mto = 0.0M;
			ssDely_Unit = 0.0M;
			ssDely_Uom = "";
			ssDely_Uom_Iso = "";
			ssSales_Unit = "";
			ssSales_Unit_Iso = "";
			ssItem_Cat = "";
			ssDelyg_Plnt = "";
			ssProd_Hier = "";
			ssPr_Ref_Mat = "";
			ssMat_Pr_Grp = "";
			ssAcct_Assgt = "";
			ssMatl_Grp_1 = "";
			ssMatl_Grp_2 = "";
			ssMatl_Grp_3 = "";
			ssMatl_Grp_4 = "";
			ssMatl_Grp_5 = "";
			ssProd_Att_1 = "";
			ssProd_Att_2 = "";
			ssProd_Att_3 = "";
			ssProd_Att_4 = "";
			ssProd_Att_5 = "";
			ssProd_Att_6 = "";
			ssProd_Att_7 = "";
			ssProd_Att_8 = "";
			ssProd_Att_9 = "";
			ssProd_Att10 = "";
			ssRound_Prof = "";
			ssVar_Sales_Un = "";
			ssUnit_Group = "";
			ssPr_Ref_Mat_External = "";
			ssPr_Ref_Mat_Guid = "";
			ssPr_Ref_Mat_Version = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSales_Org = r.ReadText(index++, "Salesdata.Sales_Org", "");
			ssDistr_Chan = r.ReadText(index++, "Salesdata.Distr_Chan", "");
			ssDel_Flag = r.ReadText(index++, "Salesdata.Del_Flag", "");
			ssMatl_Stats = r.ReadText(index++, "Salesdata.Matl_Stats", "");
			ssRebate_Grp = r.ReadText(index++, "Salesdata.Rebate_Grp", "");
			ssComm_Group = r.ReadText(index++, "Salesdata.Comm_Group", "");
			ssCash_Disc = r.ReadText(index++, "Salesdata.Cash_Disc", "");
			ssSal_Status = r.ReadText(index++, "Salesdata.Sal_Status", "");
			ssValid_From = r.ReadDate(index++, "Salesdata.Valid_From", new DateTime(1900, 1, 1, 0, 0, 0));
			ssMin_Order = r.ReadDecimal(index++, "Salesdata.Min_Order", 0.0M);
			ssMin_Dely = r.ReadDecimal(index++, "Salesdata.Min_Dely", 0.0M);
			ssMin_Mto = r.ReadDecimal(index++, "Salesdata.Min_Mto", 0.0M);
			ssDely_Unit = r.ReadDecimal(index++, "Salesdata.Dely_Unit", 0.0M);
			ssDely_Uom = r.ReadText(index++, "Salesdata.Dely_Uom", "");
			ssDely_Uom_Iso = r.ReadText(index++, "Salesdata.Dely_Uom_Iso", "");
			ssSales_Unit = r.ReadText(index++, "Salesdata.Sales_Unit", "");
			ssSales_Unit_Iso = r.ReadText(index++, "Salesdata.Sales_Unit_Iso", "");
			ssItem_Cat = r.ReadText(index++, "Salesdata.Item_Cat", "");
			ssDelyg_Plnt = r.ReadText(index++, "Salesdata.Delyg_Plnt", "");
			ssProd_Hier = r.ReadText(index++, "Salesdata.Prod_Hier", "");
			ssPr_Ref_Mat = r.ReadText(index++, "Salesdata.Pr_Ref_Mat", "");
			ssMat_Pr_Grp = r.ReadText(index++, "Salesdata.Mat_Pr_Grp", "");
			ssAcct_Assgt = r.ReadText(index++, "Salesdata.Acct_Assgt", "");
			ssMatl_Grp_1 = r.ReadText(index++, "Salesdata.Matl_Grp_1", "");
			ssMatl_Grp_2 = r.ReadText(index++, "Salesdata.Matl_Grp_2", "");
			ssMatl_Grp_3 = r.ReadText(index++, "Salesdata.Matl_Grp_3", "");
			ssMatl_Grp_4 = r.ReadText(index++, "Salesdata.Matl_Grp_4", "");
			ssMatl_Grp_5 = r.ReadText(index++, "Salesdata.Matl_Grp_5", "");
			ssProd_Att_1 = r.ReadText(index++, "Salesdata.Prod_Att_1", "");
			ssProd_Att_2 = r.ReadText(index++, "Salesdata.Prod_Att_2", "");
			ssProd_Att_3 = r.ReadText(index++, "Salesdata.Prod_Att_3", "");
			ssProd_Att_4 = r.ReadText(index++, "Salesdata.Prod_Att_4", "");
			ssProd_Att_5 = r.ReadText(index++, "Salesdata.Prod_Att_5", "");
			ssProd_Att_6 = r.ReadText(index++, "Salesdata.Prod_Att_6", "");
			ssProd_Att_7 = r.ReadText(index++, "Salesdata.Prod_Att_7", "");
			ssProd_Att_8 = r.ReadText(index++, "Salesdata.Prod_Att_8", "");
			ssProd_Att_9 = r.ReadText(index++, "Salesdata.Prod_Att_9", "");
			ssProd_Att10 = r.ReadText(index++, "Salesdata.Prod_Att10", "");
			ssRound_Prof = r.ReadText(index++, "Salesdata.Round_Prof", "");
			ssVar_Sales_Un = r.ReadText(index++, "Salesdata.Var_Sales_Un", "");
			ssUnit_Group = r.ReadText(index++, "Salesdata.Unit_Group", "");
			ssPr_Ref_Mat_External = r.ReadText(index++, "Salesdata.Pr_Ref_Mat_External", "");
			ssPr_Ref_Mat_Guid = r.ReadText(index++, "Salesdata.Pr_Ref_Mat_Guid", "");
			ssPr_Ref_Mat_Version = r.ReadText(index++, "Salesdata.Pr_Ref_Mat_Version", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STSalesdataStructure r) {
			this = r;
		}


		public static bool operator == (STSalesdataStructure a, STSalesdataStructure b) {
			if (a.ssSales_Org != b.ssSales_Org) return false;
			if (a.ssDistr_Chan != b.ssDistr_Chan) return false;
			if (a.ssDel_Flag != b.ssDel_Flag) return false;
			if (a.ssMatl_Stats != b.ssMatl_Stats) return false;
			if (a.ssRebate_Grp != b.ssRebate_Grp) return false;
			if (a.ssComm_Group != b.ssComm_Group) return false;
			if (a.ssCash_Disc != b.ssCash_Disc) return false;
			if (a.ssSal_Status != b.ssSal_Status) return false;
			if (a.ssValid_From != b.ssValid_From) return false;
			if (a.ssMin_Order != b.ssMin_Order) return false;
			if (a.ssMin_Dely != b.ssMin_Dely) return false;
			if (a.ssMin_Mto != b.ssMin_Mto) return false;
			if (a.ssDely_Unit != b.ssDely_Unit) return false;
			if (a.ssDely_Uom != b.ssDely_Uom) return false;
			if (a.ssDely_Uom_Iso != b.ssDely_Uom_Iso) return false;
			if (a.ssSales_Unit != b.ssSales_Unit) return false;
			if (a.ssSales_Unit_Iso != b.ssSales_Unit_Iso) return false;
			if (a.ssItem_Cat != b.ssItem_Cat) return false;
			if (a.ssDelyg_Plnt != b.ssDelyg_Plnt) return false;
			if (a.ssProd_Hier != b.ssProd_Hier) return false;
			if (a.ssPr_Ref_Mat != b.ssPr_Ref_Mat) return false;
			if (a.ssMat_Pr_Grp != b.ssMat_Pr_Grp) return false;
			if (a.ssAcct_Assgt != b.ssAcct_Assgt) return false;
			if (a.ssMatl_Grp_1 != b.ssMatl_Grp_1) return false;
			if (a.ssMatl_Grp_2 != b.ssMatl_Grp_2) return false;
			if (a.ssMatl_Grp_3 != b.ssMatl_Grp_3) return false;
			if (a.ssMatl_Grp_4 != b.ssMatl_Grp_4) return false;
			if (a.ssMatl_Grp_5 != b.ssMatl_Grp_5) return false;
			if (a.ssProd_Att_1 != b.ssProd_Att_1) return false;
			if (a.ssProd_Att_2 != b.ssProd_Att_2) return false;
			if (a.ssProd_Att_3 != b.ssProd_Att_3) return false;
			if (a.ssProd_Att_4 != b.ssProd_Att_4) return false;
			if (a.ssProd_Att_5 != b.ssProd_Att_5) return false;
			if (a.ssProd_Att_6 != b.ssProd_Att_6) return false;
			if (a.ssProd_Att_7 != b.ssProd_Att_7) return false;
			if (a.ssProd_Att_8 != b.ssProd_Att_8) return false;
			if (a.ssProd_Att_9 != b.ssProd_Att_9) return false;
			if (a.ssProd_Att10 != b.ssProd_Att10) return false;
			if (a.ssRound_Prof != b.ssRound_Prof) return false;
			if (a.ssVar_Sales_Un != b.ssVar_Sales_Un) return false;
			if (a.ssUnit_Group != b.ssUnit_Group) return false;
			if (a.ssPr_Ref_Mat_External != b.ssPr_Ref_Mat_External) return false;
			if (a.ssPr_Ref_Mat_Guid != b.ssPr_Ref_Mat_Guid) return false;
			if (a.ssPr_Ref_Mat_Version != b.ssPr_Ref_Mat_Version) return false;
			return true;
		}

		public static bool operator != (STSalesdataStructure a, STSalesdataStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STSalesdataStructure)) return false;
			return (this == (STSalesdataStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSales_Org.GetHashCode()
				^ ssDistr_Chan.GetHashCode()
				^ ssDel_Flag.GetHashCode()
				^ ssMatl_Stats.GetHashCode()
				^ ssRebate_Grp.GetHashCode()
				^ ssComm_Group.GetHashCode()
				^ ssCash_Disc.GetHashCode()
				^ ssSal_Status.GetHashCode()
				^ ssValid_From.GetHashCode()
				^ ssMin_Order.GetHashCode()
				^ ssMin_Dely.GetHashCode()
				^ ssMin_Mto.GetHashCode()
				^ ssDely_Unit.GetHashCode()
				^ ssDely_Uom.GetHashCode()
				^ ssDely_Uom_Iso.GetHashCode()
				^ ssSales_Unit.GetHashCode()
				^ ssSales_Unit_Iso.GetHashCode()
				^ ssItem_Cat.GetHashCode()
				^ ssDelyg_Plnt.GetHashCode()
				^ ssProd_Hier.GetHashCode()
				^ ssPr_Ref_Mat.GetHashCode()
				^ ssMat_Pr_Grp.GetHashCode()
				^ ssAcct_Assgt.GetHashCode()
				^ ssMatl_Grp_1.GetHashCode()
				^ ssMatl_Grp_2.GetHashCode()
				^ ssMatl_Grp_3.GetHashCode()
				^ ssMatl_Grp_4.GetHashCode()
				^ ssMatl_Grp_5.GetHashCode()
				^ ssProd_Att_1.GetHashCode()
				^ ssProd_Att_2.GetHashCode()
				^ ssProd_Att_3.GetHashCode()
				^ ssProd_Att_4.GetHashCode()
				^ ssProd_Att_5.GetHashCode()
				^ ssProd_Att_6.GetHashCode()
				^ ssProd_Att_7.GetHashCode()
				^ ssProd_Att_8.GetHashCode()
				^ ssProd_Att_9.GetHashCode()
				^ ssProd_Att10.GetHashCode()
				^ ssRound_Prof.GetHashCode()
				^ ssVar_Sales_Un.GetHashCode()
				^ ssUnit_Group.GetHashCode()
				^ ssPr_Ref_Mat_External.GetHashCode()
				^ ssPr_Ref_Mat_Guid.GetHashCode()
				^ ssPr_Ref_Mat_Version.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STSalesdataStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSales_Org = "";
			ssDistr_Chan = "";
			ssDel_Flag = "";
			ssMatl_Stats = "";
			ssRebate_Grp = "";
			ssComm_Group = "";
			ssCash_Disc = "";
			ssSal_Status = "";
			ssValid_From = new DateTime(1900, 1, 1, 0, 0, 0);
			ssMin_Order = 0.0M;
			ssMin_Dely = 0.0M;
			ssMin_Mto = 0.0M;
			ssDely_Unit = 0.0M;
			ssDely_Uom = "";
			ssDely_Uom_Iso = "";
			ssSales_Unit = "";
			ssSales_Unit_Iso = "";
			ssItem_Cat = "";
			ssDelyg_Plnt = "";
			ssProd_Hier = "";
			ssPr_Ref_Mat = "";
			ssMat_Pr_Grp = "";
			ssAcct_Assgt = "";
			ssMatl_Grp_1 = "";
			ssMatl_Grp_2 = "";
			ssMatl_Grp_3 = "";
			ssMatl_Grp_4 = "";
			ssMatl_Grp_5 = "";
			ssProd_Att_1 = "";
			ssProd_Att_2 = "";
			ssProd_Att_3 = "";
			ssProd_Att_4 = "";
			ssProd_Att_5 = "";
			ssProd_Att_6 = "";
			ssProd_Att_7 = "";
			ssProd_Att_8 = "";
			ssProd_Att_9 = "";
			ssProd_Att10 = "";
			ssRound_Prof = "";
			ssVar_Sales_Un = "";
			ssUnit_Group = "";
			ssPr_Ref_Mat_External = "";
			ssPr_Ref_Mat_Guid = "";
			ssPr_Ref_Mat_Version = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSales_Org", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSales_Org' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSales_Org = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDistr_Chan", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDistr_Chan' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDistr_Chan = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDel_Flag", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDel_Flag' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDel_Flag = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Stats", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Stats' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Stats = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssRebate_Grp", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssRebate_Grp' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssRebate_Grp = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssComm_Group", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssComm_Group' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssComm_Group = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssCash_Disc", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssCash_Disc' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssCash_Disc = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSal_Status", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSal_Status' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSal_Status = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValid_From", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValid_From' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValid_From = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMin_Order", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMin_Order' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMin_Order = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMin_Dely", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMin_Dely' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMin_Dely = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMin_Mto", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMin_Mto' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMin_Mto = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDely_Unit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDely_Unit' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDely_Unit = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDely_Uom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDely_Uom' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDely_Uom = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDely_Uom_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDely_Uom_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDely_Uom_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSales_Unit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSales_Unit' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSales_Unit = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSales_Unit_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSales_Unit_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSales_Unit_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssItem_Cat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssItem_Cat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssItem_Cat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDelyg_Plnt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDelyg_Plnt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDelyg_Plnt = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Hier", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Hier' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Hier = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPr_Ref_Mat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPr_Ref_Mat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPr_Ref_Mat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMat_Pr_Grp", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMat_Pr_Grp' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMat_Pr_Grp = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAcct_Assgt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAcct_Assgt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAcct_Assgt = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Grp_1", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Grp_1' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Grp_1 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Grp_2", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Grp_2' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Grp_2 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Grp_3", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Grp_3' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Grp_3 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Grp_4", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Grp_4' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Grp_4 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMatl_Grp_5", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMatl_Grp_5' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMatl_Grp_5 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_1", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_1' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_1 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_2", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_2' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_2 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_3", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_3' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_3 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_4", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_4' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_4 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_5", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_5' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_5 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_6", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_6' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_6 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_7", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_7' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_7 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_8", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_8' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_8 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att_9", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att_9' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att_9 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssProd_Att10", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssProd_Att10' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssProd_Att10 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssRound_Prof", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssRound_Prof' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssRound_Prof = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVar_Sales_Un", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVar_Sales_Un' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVar_Sales_Un = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUnit_Group", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUnit_Group' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUnit_Group = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPr_Ref_Mat_External", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPr_Ref_Mat_External' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPr_Ref_Mat_External = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPr_Ref_Mat_Guid", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPr_Ref_Mat_Guid' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPr_Ref_Mat_Guid = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssPr_Ref_Mat_Version", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssPr_Ref_Mat_Version' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssPr_Ref_Mat_Version = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STSalesdataStructure Duplicate() {
			STSalesdataStructure t;
			t.ssSales_Org = this.ssSales_Org;
			t.ssDistr_Chan = this.ssDistr_Chan;
			t.ssDel_Flag = this.ssDel_Flag;
			t.ssMatl_Stats = this.ssMatl_Stats;
			t.ssRebate_Grp = this.ssRebate_Grp;
			t.ssComm_Group = this.ssComm_Group;
			t.ssCash_Disc = this.ssCash_Disc;
			t.ssSal_Status = this.ssSal_Status;
			t.ssValid_From = this.ssValid_From;
			t.ssMin_Order = this.ssMin_Order;
			t.ssMin_Dely = this.ssMin_Dely;
			t.ssMin_Mto = this.ssMin_Mto;
			t.ssDely_Unit = this.ssDely_Unit;
			t.ssDely_Uom = this.ssDely_Uom;
			t.ssDely_Uom_Iso = this.ssDely_Uom_Iso;
			t.ssSales_Unit = this.ssSales_Unit;
			t.ssSales_Unit_Iso = this.ssSales_Unit_Iso;
			t.ssItem_Cat = this.ssItem_Cat;
			t.ssDelyg_Plnt = this.ssDelyg_Plnt;
			t.ssProd_Hier = this.ssProd_Hier;
			t.ssPr_Ref_Mat = this.ssPr_Ref_Mat;
			t.ssMat_Pr_Grp = this.ssMat_Pr_Grp;
			t.ssAcct_Assgt = this.ssAcct_Assgt;
			t.ssMatl_Grp_1 = this.ssMatl_Grp_1;
			t.ssMatl_Grp_2 = this.ssMatl_Grp_2;
			t.ssMatl_Grp_3 = this.ssMatl_Grp_3;
			t.ssMatl_Grp_4 = this.ssMatl_Grp_4;
			t.ssMatl_Grp_5 = this.ssMatl_Grp_5;
			t.ssProd_Att_1 = this.ssProd_Att_1;
			t.ssProd_Att_2 = this.ssProd_Att_2;
			t.ssProd_Att_3 = this.ssProd_Att_3;
			t.ssProd_Att_4 = this.ssProd_Att_4;
			t.ssProd_Att_5 = this.ssProd_Att_5;
			t.ssProd_Att_6 = this.ssProd_Att_6;
			t.ssProd_Att_7 = this.ssProd_Att_7;
			t.ssProd_Att_8 = this.ssProd_Att_8;
			t.ssProd_Att_9 = this.ssProd_Att_9;
			t.ssProd_Att10 = this.ssProd_Att10;
			t.ssRound_Prof = this.ssRound_Prof;
			t.ssVar_Sales_Un = this.ssVar_Sales_Un;
			t.ssUnit_Group = this.ssUnit_Group;
			t.ssPr_Ref_Mat_External = this.ssPr_Ref_Mat_External;
			t.ssPr_Ref_Mat_Guid = this.ssPr_Ref_Mat_Guid;
			t.ssPr_Ref_Mat_Version = this.ssPr_Ref_Mat_Version;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sales_Org")) VarValue.AppendAttribute(recordElem, "Sales_Org", ssSales_Org, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sales_Org");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Distr_Chan")) VarValue.AppendAttribute(recordElem, "Distr_Chan", ssDistr_Chan, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Distr_Chan");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Del_Flag")) VarValue.AppendAttribute(recordElem, "Del_Flag", ssDel_Flag, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Del_Flag");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Stats")) VarValue.AppendAttribute(recordElem, "Matl_Stats", ssMatl_Stats, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Stats");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Rebate_Grp")) VarValue.AppendAttribute(recordElem, "Rebate_Grp", ssRebate_Grp, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Rebate_Grp");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Comm_Group")) VarValue.AppendAttribute(recordElem, "Comm_Group", ssComm_Group, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Comm_Group");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Cash_Disc")) VarValue.AppendAttribute(recordElem, "Cash_Disc", ssCash_Disc, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Cash_Disc");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sal_Status")) VarValue.AppendAttribute(recordElem, "Sal_Status", ssSal_Status, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sal_Status");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Valid_From")) VarValue.AppendAttribute(recordElem, "Valid_From", ssValid_From, detailLevel, TypeKind.Date); else VarValue.AppendOptimizedAttribute(recordElem, "Valid_From");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Min_Order")) VarValue.AppendAttribute(recordElem, "Min_Order", ssMin_Order, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Min_Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Min_Dely")) VarValue.AppendAttribute(recordElem, "Min_Dely", ssMin_Dely, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Min_Dely");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Min_Mto")) VarValue.AppendAttribute(recordElem, "Min_Mto", ssMin_Mto, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Min_Mto");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Dely_Unit")) VarValue.AppendAttribute(recordElem, "Dely_Unit", ssDely_Unit, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Dely_Unit");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Dely_Uom")) VarValue.AppendAttribute(recordElem, "Dely_Uom", ssDely_Uom, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Dely_Uom");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Dely_Uom_Iso")) VarValue.AppendAttribute(recordElem, "Dely_Uom_Iso", ssDely_Uom_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Dely_Uom_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sales_Unit")) VarValue.AppendAttribute(recordElem, "Sales_Unit", ssSales_Unit, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sales_Unit");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sales_Unit_Iso")) VarValue.AppendAttribute(recordElem, "Sales_Unit_Iso", ssSales_Unit_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sales_Unit_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Item_Cat")) VarValue.AppendAttribute(recordElem, "Item_Cat", ssItem_Cat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Item_Cat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Delyg_Plnt")) VarValue.AppendAttribute(recordElem, "Delyg_Plnt", ssDelyg_Plnt, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Delyg_Plnt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Hier")) VarValue.AppendAttribute(recordElem, "Prod_Hier", ssProd_Hier, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Hier");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pr_Ref_Mat")) VarValue.AppendAttribute(recordElem, "Pr_Ref_Mat", ssPr_Ref_Mat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pr_Ref_Mat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Mat_Pr_Grp")) VarValue.AppendAttribute(recordElem, "Mat_Pr_Grp", ssMat_Pr_Grp, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Mat_Pr_Grp");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Acct_Assgt")) VarValue.AppendAttribute(recordElem, "Acct_Assgt", ssAcct_Assgt, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Acct_Assgt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Grp_1")) VarValue.AppendAttribute(recordElem, "Matl_Grp_1", ssMatl_Grp_1, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Grp_1");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Grp_2")) VarValue.AppendAttribute(recordElem, "Matl_Grp_2", ssMatl_Grp_2, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Grp_2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Grp_3")) VarValue.AppendAttribute(recordElem, "Matl_Grp_3", ssMatl_Grp_3, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Grp_3");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Grp_4")) VarValue.AppendAttribute(recordElem, "Matl_Grp_4", ssMatl_Grp_4, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Grp_4");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Matl_Grp_5")) VarValue.AppendAttribute(recordElem, "Matl_Grp_5", ssMatl_Grp_5, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Matl_Grp_5");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_1")) VarValue.AppendAttribute(recordElem, "Prod_Att_1", ssProd_Att_1, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_1");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_2")) VarValue.AppendAttribute(recordElem, "Prod_Att_2", ssProd_Att_2, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_3")) VarValue.AppendAttribute(recordElem, "Prod_Att_3", ssProd_Att_3, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_3");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_4")) VarValue.AppendAttribute(recordElem, "Prod_Att_4", ssProd_Att_4, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_4");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_5")) VarValue.AppendAttribute(recordElem, "Prod_Att_5", ssProd_Att_5, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_5");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_6")) VarValue.AppendAttribute(recordElem, "Prod_Att_6", ssProd_Att_6, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_6");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_7")) VarValue.AppendAttribute(recordElem, "Prod_Att_7", ssProd_Att_7, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_7");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_8")) VarValue.AppendAttribute(recordElem, "Prod_Att_8", ssProd_Att_8, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_8");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att_9")) VarValue.AppendAttribute(recordElem, "Prod_Att_9", ssProd_Att_9, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att_9");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Prod_Att10")) VarValue.AppendAttribute(recordElem, "Prod_Att10", ssProd_Att10, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Prod_Att10");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Round_Prof")) VarValue.AppendAttribute(recordElem, "Round_Prof", ssRound_Prof, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Round_Prof");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Var_Sales_Un")) VarValue.AppendAttribute(recordElem, "Var_Sales_Un", ssVar_Sales_Un, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Var_Sales_Un");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Unit_Group")) VarValue.AppendAttribute(recordElem, "Unit_Group", ssUnit_Group, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Unit_Group");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pr_Ref_Mat_External")) VarValue.AppendAttribute(recordElem, "Pr_Ref_Mat_External", ssPr_Ref_Mat_External, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pr_Ref_Mat_External");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pr_Ref_Mat_Guid")) VarValue.AppendAttribute(recordElem, "Pr_Ref_Mat_Guid", ssPr_Ref_Mat_Guid, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pr_Ref_Mat_Guid");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Pr_Ref_Mat_Version")) VarValue.AppendAttribute(recordElem, "Pr_Ref_Mat_Version", ssPr_Ref_Mat_Version, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Pr_Ref_Mat_Version");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "sales_org") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sales_Org")) variable.Value = ssSales_Org; else variable.Optimized = true;
			} else if (head == "distr_chan") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Distr_Chan")) variable.Value = ssDistr_Chan; else variable.Optimized = true;
			} else if (head == "del_flag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Del_Flag")) variable.Value = ssDel_Flag; else variable.Optimized = true;
			} else if (head == "matl_stats") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Stats")) variable.Value = ssMatl_Stats; else variable.Optimized = true;
			} else if (head == "rebate_grp") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Rebate_Grp")) variable.Value = ssRebate_Grp; else variable.Optimized = true;
			} else if (head == "comm_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Comm_Group")) variable.Value = ssComm_Group; else variable.Optimized = true;
			} else if (head == "cash_disc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Cash_Disc")) variable.Value = ssCash_Disc; else variable.Optimized = true;
			} else if (head == "sal_status") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sal_Status")) variable.Value = ssSal_Status; else variable.Optimized = true;
			} else if (head == "valid_from") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Valid_From")) variable.Value = ssValid_From; else variable.Optimized = true;
			} else if (head == "min_order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Min_Order")) variable.Value = ssMin_Order; else variable.Optimized = true;
			} else if (head == "min_dely") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Min_Dely")) variable.Value = ssMin_Dely; else variable.Optimized = true;
			} else if (head == "min_mto") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Min_Mto")) variable.Value = ssMin_Mto; else variable.Optimized = true;
			} else if (head == "dely_unit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Dely_Unit")) variable.Value = ssDely_Unit; else variable.Optimized = true;
			} else if (head == "dely_uom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Dely_Uom")) variable.Value = ssDely_Uom; else variable.Optimized = true;
			} else if (head == "dely_uom_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Dely_Uom_Iso")) variable.Value = ssDely_Uom_Iso; else variable.Optimized = true;
			} else if (head == "sales_unit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sales_Unit")) variable.Value = ssSales_Unit; else variable.Optimized = true;
			} else if (head == "sales_unit_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sales_Unit_Iso")) variable.Value = ssSales_Unit_Iso; else variable.Optimized = true;
			} else if (head == "item_cat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Item_Cat")) variable.Value = ssItem_Cat; else variable.Optimized = true;
			} else if (head == "delyg_plnt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Delyg_Plnt")) variable.Value = ssDelyg_Plnt; else variable.Optimized = true;
			} else if (head == "prod_hier") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Hier")) variable.Value = ssProd_Hier; else variable.Optimized = true;
			} else if (head == "pr_ref_mat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pr_Ref_Mat")) variable.Value = ssPr_Ref_Mat; else variable.Optimized = true;
			} else if (head == "mat_pr_grp") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Mat_Pr_Grp")) variable.Value = ssMat_Pr_Grp; else variable.Optimized = true;
			} else if (head == "acct_assgt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Acct_Assgt")) variable.Value = ssAcct_Assgt; else variable.Optimized = true;
			} else if (head == "matl_grp_1") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Grp_1")) variable.Value = ssMatl_Grp_1; else variable.Optimized = true;
			} else if (head == "matl_grp_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Grp_2")) variable.Value = ssMatl_Grp_2; else variable.Optimized = true;
			} else if (head == "matl_grp_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Grp_3")) variable.Value = ssMatl_Grp_3; else variable.Optimized = true;
			} else if (head == "matl_grp_4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Grp_4")) variable.Value = ssMatl_Grp_4; else variable.Optimized = true;
			} else if (head == "matl_grp_5") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Matl_Grp_5")) variable.Value = ssMatl_Grp_5; else variable.Optimized = true;
			} else if (head == "prod_att_1") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_1")) variable.Value = ssProd_Att_1; else variable.Optimized = true;
			} else if (head == "prod_att_2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_2")) variable.Value = ssProd_Att_2; else variable.Optimized = true;
			} else if (head == "prod_att_3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_3")) variable.Value = ssProd_Att_3; else variable.Optimized = true;
			} else if (head == "prod_att_4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_4")) variable.Value = ssProd_Att_4; else variable.Optimized = true;
			} else if (head == "prod_att_5") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_5")) variable.Value = ssProd_Att_5; else variable.Optimized = true;
			} else if (head == "prod_att_6") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_6")) variable.Value = ssProd_Att_6; else variable.Optimized = true;
			} else if (head == "prod_att_7") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_7")) variable.Value = ssProd_Att_7; else variable.Optimized = true;
			} else if (head == "prod_att_8") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_8")) variable.Value = ssProd_Att_8; else variable.Optimized = true;
			} else if (head == "prod_att_9") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att_9")) variable.Value = ssProd_Att_9; else variable.Optimized = true;
			} else if (head == "prod_att10") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Prod_Att10")) variable.Value = ssProd_Att10; else variable.Optimized = true;
			} else if (head == "round_prof") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Round_Prof")) variable.Value = ssRound_Prof; else variable.Optimized = true;
			} else if (head == "var_sales_un") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Var_Sales_Un")) variable.Value = ssVar_Sales_Un; else variable.Optimized = true;
			} else if (head == "unit_group") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unit_Group")) variable.Value = ssUnit_Group; else variable.Optimized = true;
			} else if (head == "pr_ref_mat_external") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pr_Ref_Mat_External")) variable.Value = ssPr_Ref_Mat_External; else variable.Optimized = true;
			} else if (head == "pr_ref_mat_guid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pr_Ref_Mat_Guid")) variable.Value = ssPr_Ref_Mat_Guid; else variable.Optimized = true;
			} else if (head == "pr_ref_mat_version") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Pr_Ref_Mat_Version")) variable.Value = ssPr_Ref_Mat_Version; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSales_Org) {
				return ssSales_Org;
			} else if (key == IdDistr_Chan) {
				return ssDistr_Chan;
			} else if (key == IdDel_Flag) {
				return ssDel_Flag;
			} else if (key == IdMatl_Stats) {
				return ssMatl_Stats;
			} else if (key == IdRebate_Grp) {
				return ssRebate_Grp;
			} else if (key == IdComm_Group) {
				return ssComm_Group;
			} else if (key == IdCash_Disc) {
				return ssCash_Disc;
			} else if (key == IdSal_Status) {
				return ssSal_Status;
			} else if (key == IdValid_From) {
				return ssValid_From;
			} else if (key == IdMin_Order) {
				return ssMin_Order;
			} else if (key == IdMin_Dely) {
				return ssMin_Dely;
			} else if (key == IdMin_Mto) {
				return ssMin_Mto;
			} else if (key == IdDely_Unit) {
				return ssDely_Unit;
			} else if (key == IdDely_Uom) {
				return ssDely_Uom;
			} else if (key == IdDely_Uom_Iso) {
				return ssDely_Uom_Iso;
			} else if (key == IdSales_Unit) {
				return ssSales_Unit;
			} else if (key == IdSales_Unit_Iso) {
				return ssSales_Unit_Iso;
			} else if (key == IdItem_Cat) {
				return ssItem_Cat;
			} else if (key == IdDelyg_Plnt) {
				return ssDelyg_Plnt;
			} else if (key == IdProd_Hier) {
				return ssProd_Hier;
			} else if (key == IdPr_Ref_Mat) {
				return ssPr_Ref_Mat;
			} else if (key == IdMat_Pr_Grp) {
				return ssMat_Pr_Grp;
			} else if (key == IdAcct_Assgt) {
				return ssAcct_Assgt;
			} else if (key == IdMatl_Grp_1) {
				return ssMatl_Grp_1;
			} else if (key == IdMatl_Grp_2) {
				return ssMatl_Grp_2;
			} else if (key == IdMatl_Grp_3) {
				return ssMatl_Grp_3;
			} else if (key == IdMatl_Grp_4) {
				return ssMatl_Grp_4;
			} else if (key == IdMatl_Grp_5) {
				return ssMatl_Grp_5;
			} else if (key == IdProd_Att_1) {
				return ssProd_Att_1;
			} else if (key == IdProd_Att_2) {
				return ssProd_Att_2;
			} else if (key == IdProd_Att_3) {
				return ssProd_Att_3;
			} else if (key == IdProd_Att_4) {
				return ssProd_Att_4;
			} else if (key == IdProd_Att_5) {
				return ssProd_Att_5;
			} else if (key == IdProd_Att_6) {
				return ssProd_Att_6;
			} else if (key == IdProd_Att_7) {
				return ssProd_Att_7;
			} else if (key == IdProd_Att_8) {
				return ssProd_Att_8;
			} else if (key == IdProd_Att_9) {
				return ssProd_Att_9;
			} else if (key == IdProd_Att10) {
				return ssProd_Att10;
			} else if (key == IdRound_Prof) {
				return ssRound_Prof;
			} else if (key == IdVar_Sales_Un) {
				return ssVar_Sales_Un;
			} else if (key == IdUnit_Group) {
				return ssUnit_Group;
			} else if (key == IdPr_Ref_Mat_External) {
				return ssPr_Ref_Mat_External;
			} else if (key == IdPr_Ref_Mat_Guid) {
				return ssPr_Ref_Mat_Guid;
			} else if (key == IdPr_Ref_Mat_Version) {
				return ssPr_Ref_Mat_Version;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSales_Org = (string) other.AttributeGet(IdSales_Org);
			ssDistr_Chan = (string) other.AttributeGet(IdDistr_Chan);
			ssDel_Flag = (string) other.AttributeGet(IdDel_Flag);
			ssMatl_Stats = (string) other.AttributeGet(IdMatl_Stats);
			ssRebate_Grp = (string) other.AttributeGet(IdRebate_Grp);
			ssComm_Group = (string) other.AttributeGet(IdComm_Group);
			ssCash_Disc = (string) other.AttributeGet(IdCash_Disc);
			ssSal_Status = (string) other.AttributeGet(IdSal_Status);
			ssValid_From = (DateTime) other.AttributeGet(IdValid_From);
			ssMin_Order = (decimal) other.AttributeGet(IdMin_Order);
			ssMin_Dely = (decimal) other.AttributeGet(IdMin_Dely);
			ssMin_Mto = (decimal) other.AttributeGet(IdMin_Mto);
			ssDely_Unit = (decimal) other.AttributeGet(IdDely_Unit);
			ssDely_Uom = (string) other.AttributeGet(IdDely_Uom);
			ssDely_Uom_Iso = (string) other.AttributeGet(IdDely_Uom_Iso);
			ssSales_Unit = (string) other.AttributeGet(IdSales_Unit);
			ssSales_Unit_Iso = (string) other.AttributeGet(IdSales_Unit_Iso);
			ssItem_Cat = (string) other.AttributeGet(IdItem_Cat);
			ssDelyg_Plnt = (string) other.AttributeGet(IdDelyg_Plnt);
			ssProd_Hier = (string) other.AttributeGet(IdProd_Hier);
			ssPr_Ref_Mat = (string) other.AttributeGet(IdPr_Ref_Mat);
			ssMat_Pr_Grp = (string) other.AttributeGet(IdMat_Pr_Grp);
			ssAcct_Assgt = (string) other.AttributeGet(IdAcct_Assgt);
			ssMatl_Grp_1 = (string) other.AttributeGet(IdMatl_Grp_1);
			ssMatl_Grp_2 = (string) other.AttributeGet(IdMatl_Grp_2);
			ssMatl_Grp_3 = (string) other.AttributeGet(IdMatl_Grp_3);
			ssMatl_Grp_4 = (string) other.AttributeGet(IdMatl_Grp_4);
			ssMatl_Grp_5 = (string) other.AttributeGet(IdMatl_Grp_5);
			ssProd_Att_1 = (string) other.AttributeGet(IdProd_Att_1);
			ssProd_Att_2 = (string) other.AttributeGet(IdProd_Att_2);
			ssProd_Att_3 = (string) other.AttributeGet(IdProd_Att_3);
			ssProd_Att_4 = (string) other.AttributeGet(IdProd_Att_4);
			ssProd_Att_5 = (string) other.AttributeGet(IdProd_Att_5);
			ssProd_Att_6 = (string) other.AttributeGet(IdProd_Att_6);
			ssProd_Att_7 = (string) other.AttributeGet(IdProd_Att_7);
			ssProd_Att_8 = (string) other.AttributeGet(IdProd_Att_8);
			ssProd_Att_9 = (string) other.AttributeGet(IdProd_Att_9);
			ssProd_Att10 = (string) other.AttributeGet(IdProd_Att10);
			ssRound_Prof = (string) other.AttributeGet(IdRound_Prof);
			ssVar_Sales_Un = (string) other.AttributeGet(IdVar_Sales_Un);
			ssUnit_Group = (string) other.AttributeGet(IdUnit_Group);
			ssPr_Ref_Mat_External = (string) other.AttributeGet(IdPr_Ref_Mat_External);
			ssPr_Ref_Mat_Guid = (string) other.AttributeGet(IdPr_Ref_Mat_Guid);
			ssPr_Ref_Mat_Version = (string) other.AttributeGet(IdPr_Ref_Mat_Version);
		}
	} // STSalesdataStructure
	/// <summary>
	/// Structure <code>RCSalesdataRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCSalesdataRecord: ISerializable, ITypedRecord<RCSalesdataRecord> {
		private static readonly GlobalObjectKey IdSalesdata = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*d0HBxdYcBj+wJl7pItWKUQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Salesdata")]
		public STSalesdataStructure ssSTSalesdata;


		public static implicit operator STSalesdataStructure(RCSalesdataRecord r) {
			return r.ssSTSalesdata;
		}

		public static implicit operator RCSalesdataRecord(STSalesdataStructure r) {
			RCSalesdataRecord res = new RCSalesdataRecord(null);
			res.ssSTSalesdata = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCSalesdataRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTSalesdata = new STSalesdataStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTSalesdata.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTSalesdata.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCSalesdataRecord r) {
			this = r;
		}


		public static bool operator == (RCSalesdataRecord a, RCSalesdataRecord b) {
			if (a.ssSTSalesdata != b.ssSTSalesdata) return false;
			return true;
		}

		public static bool operator != (RCSalesdataRecord a, RCSalesdataRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCSalesdataRecord)) return false;
			return (this == (RCSalesdataRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTSalesdata.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCSalesdataRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTSalesdata = new STSalesdataStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTSalesdata", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTSalesdata' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTSalesdata = (STSalesdataStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTSalesdata.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTSalesdata.InternalRecursiveSave();
		}


		public RCSalesdataRecord Duplicate() {
			RCSalesdataRecord t;
			t.ssSTSalesdata = (STSalesdataStructure) this.ssSTSalesdata.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTSalesdata.ToXml(this, recordElem, "Salesdata", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "salesdata") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Salesdata")) variable.Value = ssSTSalesdata; else variable.Optimized = true;
				variable.SetFieldName("salesdata");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdSalesdata) {
				return ssSTSalesdata;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTSalesdata.FillFromOther((IRecord) other.AttributeGet(IdSalesdata));
		}
	} // RCSalesdataRecord
	/// <summary>
	/// RecordList type <code>RLSalesdataRecordList</code> that represents a record list of
	///  <code>Salesdata</code>
	/// </summary>
	[Serializable()]
	public partial class RLSalesdataRecordList: GenericRecordList<RCSalesdataRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCSalesdataRecord GetElementDefaultValue() {
			return new RCSalesdataRecord("");
		}

		public T[] ToArray<T>(Func<RCSalesdataRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSalesdataRecordList recordlist, Func<RCSalesdataRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSalesdataRecordList ToList<T>(T[] array, Func <T, RCSalesdataRecord> converter) {
			RLSalesdataRecordList result = new RLSalesdataRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSalesdataRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSalesdataRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSalesdataRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSalesdataRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCSalesdataRecord> NewList() {
			return new RLSalesdataRecordList();
		}


	} // RLSalesdataRecordList
	/// <summary>
	/// RecordList type <code>RLSalesdataList</code> that represents a record list of <code>Text, Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text,
	///  Text, Text, Text, Text, Text, Decimal, Decimal, Decimal, Decimal, Date</code>
	/// </summary>
	[Serializable()]
	public partial class RLSalesdataList: GenericRecordList<STSalesdataStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STSalesdataStructure GetElementDefaultValue() {
			return new STSalesdataStructure("");
		}

		public T[] ToArray<T>(Func<STSalesdataStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLSalesdataList recordlist, Func<STSalesdataStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLSalesdataList ToList<T>(T[] array, Func <T, STSalesdataStructure> converter) {
			RLSalesdataList result = new RLSalesdataList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLSalesdataList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSalesdataList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLSalesdataList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLSalesdataList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STSalesdataStructure> NewList() {
			return new RLSalesdataList();
		}


	} // RLSalesdataList
}

namespace ssTeste_SAP {
	[System.CodeDom.Compiler.GeneratedCodeAttribute("CompilerService", "9.1.616.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute("Salesdata", Namespace= "http://www.outsystems.com")]
	public class WORCSalesdataRecord {
		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSales_OrgSpecified;
		[System.Xml.Serialization.XmlElement("Sales_Org")]
		public System.String varWSSales_Org;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDistr_ChanSpecified;
		[System.Xml.Serialization.XmlElement("Distr_Chan")]
		public System.String varWSDistr_Chan;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDel_FlagSpecified;
		[System.Xml.Serialization.XmlElement("Del_Flag")]
		public System.String varWSDel_Flag;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_StatsSpecified;
		[System.Xml.Serialization.XmlElement("Matl_Stats")]
		public System.String varWSMatl_Stats;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSRebate_GrpSpecified;
		[System.Xml.Serialization.XmlElement("Rebate_Grp")]
		public System.String varWSRebate_Grp;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSComm_GroupSpecified;
		[System.Xml.Serialization.XmlElement("Comm_Group")]
		public System.String varWSComm_Group;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSCash_DiscSpecified;
		[System.Xml.Serialization.XmlElement("Cash_Disc")]
		public System.String varWSCash_Disc;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSal_StatusSpecified;
		[System.Xml.Serialization.XmlElement("Sal_Status")]
		public System.String varWSSal_Status;

		[System.Xml.Serialization.XmlElementAttribute("Valid_From", DataType= "date")]
		public System.DateTime varWSValid_From;

		[System.Xml.Serialization.XmlElement("Min_Order")]
		public System.Decimal varWSMin_Order;

		[System.Xml.Serialization.XmlElement("Min_Dely")]
		public System.Decimal varWSMin_Dely;

		[System.Xml.Serialization.XmlElement("Min_Mto")]
		public System.Decimal varWSMin_Mto;

		[System.Xml.Serialization.XmlElement("Dely_Unit")]
		public System.Decimal varWSDely_Unit;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDely_UomSpecified;
		[System.Xml.Serialization.XmlElement("Dely_Uom")]
		public System.String varWSDely_Uom;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDely_Uom_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Dely_Uom_Iso")]
		public System.String varWSDely_Uom_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSales_UnitSpecified;
		[System.Xml.Serialization.XmlElement("Sales_Unit")]
		public System.String varWSSales_Unit;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSales_Unit_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Sales_Unit_Iso")]
		public System.String varWSSales_Unit_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSItem_CatSpecified;
		[System.Xml.Serialization.XmlElement("Item_Cat")]
		public System.String varWSItem_Cat;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSDelyg_PlntSpecified;
		[System.Xml.Serialization.XmlElement("Delyg_Plnt")]
		public System.String varWSDelyg_Plnt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_HierSpecified;
		[System.Xml.Serialization.XmlElement("Prod_Hier")]
		public System.String varWSProd_Hier;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPr_Ref_MatSpecified;
		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat")]
		public System.String varWSPr_Ref_Mat;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMat_Pr_GrpSpecified;
		[System.Xml.Serialization.XmlElement("Mat_Pr_Grp")]
		public System.String varWSMat_Pr_Grp;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSAcct_AssgtSpecified;
		[System.Xml.Serialization.XmlElement("Acct_Assgt")]
		public System.String varWSAcct_Assgt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_Grp_1Specified;
		[System.Xml.Serialization.XmlElement("Matl_Grp_1")]
		public System.String varWSMatl_Grp_1;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_Grp_2Specified;
		[System.Xml.Serialization.XmlElement("Matl_Grp_2")]
		public System.String varWSMatl_Grp_2;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_Grp_3Specified;
		[System.Xml.Serialization.XmlElement("Matl_Grp_3")]
		public System.String varWSMatl_Grp_3;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_Grp_4Specified;
		[System.Xml.Serialization.XmlElement("Matl_Grp_4")]
		public System.String varWSMatl_Grp_4;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSMatl_Grp_5Specified;
		[System.Xml.Serialization.XmlElement("Matl_Grp_5")]
		public System.String varWSMatl_Grp_5;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_1Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_1")]
		public System.String varWSProd_Att_1;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_2Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_2")]
		public System.String varWSProd_Att_2;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_3Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_3")]
		public System.String varWSProd_Att_3;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_4Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_4")]
		public System.String varWSProd_Att_4;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_5Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_5")]
		public System.String varWSProd_Att_5;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_6Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_6")]
		public System.String varWSProd_Att_6;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_7Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_7")]
		public System.String varWSProd_Att_7;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_8Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_8")]
		public System.String varWSProd_Att_8;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att_9Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att_9")]
		public System.String varWSProd_Att_9;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSProd_Att10Specified;
		[System.Xml.Serialization.XmlElement("Prod_Att10")]
		public System.String varWSProd_Att10;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSRound_ProfSpecified;
		[System.Xml.Serialization.XmlElement("Round_Prof")]
		public System.String varWSRound_Prof;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSVar_Sales_UnSpecified;
		[System.Xml.Serialization.XmlElement("Var_Sales_Un")]
		public System.String varWSVar_Sales_Un;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUnit_GroupSpecified;
		[System.Xml.Serialization.XmlElement("Unit_Group")]
		public System.String varWSUnit_Group;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPr_Ref_Mat_ExternalSpecified;
		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_External")]
		public System.String varWSPr_Ref_Mat_External;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPr_Ref_Mat_GuidSpecified;
		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_Guid")]
		public System.String varWSPr_Ref_Mat_Guid;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSPr_Ref_Mat_VersionSpecified;
		[System.Xml.Serialization.XmlElement("Pr_Ref_Mat_Version")]
		public System.String varWSPr_Ref_Mat_Version;

		public WORCSalesdataRecord() {
			varWSSales_Org = (System.String) "";
			varWSDistr_Chan = (System.String) "";
			varWSDel_Flag = (System.String) "";
			varWSMatl_Stats = (System.String) "";
			varWSRebate_Grp = (System.String) "";
			varWSComm_Group = (System.String) "";
			varWSCash_Disc = (System.String) "";
			varWSSal_Status = (System.String) "";
			varWSValid_From = (System.DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSMin_Order = (System.Decimal) 0.0M;
			varWSMin_Dely = (System.Decimal) 0.0M;
			varWSMin_Mto = (System.Decimal) 0.0M;
			varWSDely_Unit = (System.Decimal) 0.0M;
			varWSDely_Uom = (System.String) "";
			varWSDely_Uom_Iso = (System.String) "";
			varWSSales_Unit = (System.String) "";
			varWSSales_Unit_Iso = (System.String) "";
			varWSItem_Cat = (System.String) "";
			varWSDelyg_Plnt = (System.String) "";
			varWSProd_Hier = (System.String) "";
			varWSPr_Ref_Mat = (System.String) "";
			varWSMat_Pr_Grp = (System.String) "";
			varWSAcct_Assgt = (System.String) "";
			varWSMatl_Grp_1 = (System.String) "";
			varWSMatl_Grp_2 = (System.String) "";
			varWSMatl_Grp_3 = (System.String) "";
			varWSMatl_Grp_4 = (System.String) "";
			varWSMatl_Grp_5 = (System.String) "";
			varWSProd_Att_1 = (System.String) "";
			varWSProd_Att_2 = (System.String) "";
			varWSProd_Att_3 = (System.String) "";
			varWSProd_Att_4 = (System.String) "";
			varWSProd_Att_5 = (System.String) "";
			varWSProd_Att_6 = (System.String) "";
			varWSProd_Att_7 = (System.String) "";
			varWSProd_Att_8 = (System.String) "";
			varWSProd_Att_9 = (System.String) "";
			varWSProd_Att10 = (System.String) "";
			varWSRound_Prof = (System.String) "";
			varWSVar_Sales_Un = (System.String) "";
			varWSUnit_Group = (System.String) "";
			varWSPr_Ref_Mat_External = (System.String) "";
			varWSPr_Ref_Mat_Guid = (System.String) "";
			varWSPr_Ref_Mat_Version = (System.String) "";
		}

		public WORCSalesdataRecord(STSalesdataStructure r) {
			varWSSales_Org = BaseAppUtils.RemoveControlChars(r.ssSales_Org);
			varWSSales_OrgSpecified = r.ssSales_Org != "";
			varWSDistr_Chan = BaseAppUtils.RemoveControlChars(r.ssDistr_Chan);
			varWSDistr_ChanSpecified = r.ssDistr_Chan != "";
			varWSDel_Flag = BaseAppUtils.RemoveControlChars(r.ssDel_Flag);
			varWSDel_FlagSpecified = r.ssDel_Flag != "";
			varWSMatl_Stats = BaseAppUtils.RemoveControlChars(r.ssMatl_Stats);
			varWSMatl_StatsSpecified = r.ssMatl_Stats != "";
			varWSRebate_Grp = BaseAppUtils.RemoveControlChars(r.ssRebate_Grp);
			varWSRebate_GrpSpecified = r.ssRebate_Grp != "";
			varWSComm_Group = BaseAppUtils.RemoveControlChars(r.ssComm_Group);
			varWSComm_GroupSpecified = r.ssComm_Group != "";
			varWSCash_Disc = BaseAppUtils.RemoveControlChars(r.ssCash_Disc);
			varWSCash_DiscSpecified = r.ssCash_Disc != "";
			varWSSal_Status = BaseAppUtils.RemoveControlChars(r.ssSal_Status);
			varWSSal_StatusSpecified = r.ssSal_Status != "";
			varWSValid_From = (System.DateTime) r.ssValid_From;
			varWSMin_Order = (System.Decimal) r.ssMin_Order;
			varWSMin_Dely = (System.Decimal) r.ssMin_Dely;
			varWSMin_Mto = (System.Decimal) r.ssMin_Mto;
			varWSDely_Unit = (System.Decimal) r.ssDely_Unit;
			varWSDely_Uom = BaseAppUtils.RemoveControlChars(r.ssDely_Uom);
			varWSDely_UomSpecified = r.ssDely_Uom != "";
			varWSDely_Uom_Iso = BaseAppUtils.RemoveControlChars(r.ssDely_Uom_Iso);
			varWSDely_Uom_IsoSpecified = r.ssDely_Uom_Iso != "";
			varWSSales_Unit = BaseAppUtils.RemoveControlChars(r.ssSales_Unit);
			varWSSales_UnitSpecified = r.ssSales_Unit != "";
			varWSSales_Unit_Iso = BaseAppUtils.RemoveControlChars(r.ssSales_Unit_Iso);
			varWSSales_Unit_IsoSpecified = r.ssSales_Unit_Iso != "";
			varWSItem_Cat = BaseAppUtils.RemoveControlChars(r.ssItem_Cat);
			varWSItem_CatSpecified = r.ssItem_Cat != "";
			varWSDelyg_Plnt = BaseAppUtils.RemoveControlChars(r.ssDelyg_Plnt);
			varWSDelyg_PlntSpecified = r.ssDelyg_Plnt != "";
			varWSProd_Hier = BaseAppUtils.RemoveControlChars(r.ssProd_Hier);
			varWSProd_HierSpecified = r.ssProd_Hier != "";
			varWSPr_Ref_Mat = BaseAppUtils.RemoveControlChars(r.ssPr_Ref_Mat);
			varWSPr_Ref_MatSpecified = r.ssPr_Ref_Mat != "";
			varWSMat_Pr_Grp = BaseAppUtils.RemoveControlChars(r.ssMat_Pr_Grp);
			varWSMat_Pr_GrpSpecified = r.ssMat_Pr_Grp != "";
			varWSAcct_Assgt = BaseAppUtils.RemoveControlChars(r.ssAcct_Assgt);
			varWSAcct_AssgtSpecified = r.ssAcct_Assgt != "";
			varWSMatl_Grp_1 = BaseAppUtils.RemoveControlChars(r.ssMatl_Grp_1);
			varWSMatl_Grp_1Specified = r.ssMatl_Grp_1 != "";
			varWSMatl_Grp_2 = BaseAppUtils.RemoveControlChars(r.ssMatl_Grp_2);
			varWSMatl_Grp_2Specified = r.ssMatl_Grp_2 != "";
			varWSMatl_Grp_3 = BaseAppUtils.RemoveControlChars(r.ssMatl_Grp_3);
			varWSMatl_Grp_3Specified = r.ssMatl_Grp_3 != "";
			varWSMatl_Grp_4 = BaseAppUtils.RemoveControlChars(r.ssMatl_Grp_4);
			varWSMatl_Grp_4Specified = r.ssMatl_Grp_4 != "";
			varWSMatl_Grp_5 = BaseAppUtils.RemoveControlChars(r.ssMatl_Grp_5);
			varWSMatl_Grp_5Specified = r.ssMatl_Grp_5 != "";
			varWSProd_Att_1 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_1);
			varWSProd_Att_1Specified = r.ssProd_Att_1 != "";
			varWSProd_Att_2 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_2);
			varWSProd_Att_2Specified = r.ssProd_Att_2 != "";
			varWSProd_Att_3 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_3);
			varWSProd_Att_3Specified = r.ssProd_Att_3 != "";
			varWSProd_Att_4 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_4);
			varWSProd_Att_4Specified = r.ssProd_Att_4 != "";
			varWSProd_Att_5 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_5);
			varWSProd_Att_5Specified = r.ssProd_Att_5 != "";
			varWSProd_Att_6 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_6);
			varWSProd_Att_6Specified = r.ssProd_Att_6 != "";
			varWSProd_Att_7 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_7);
			varWSProd_Att_7Specified = r.ssProd_Att_7 != "";
			varWSProd_Att_8 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_8);
			varWSProd_Att_8Specified = r.ssProd_Att_8 != "";
			varWSProd_Att_9 = BaseAppUtils.RemoveControlChars(r.ssProd_Att_9);
			varWSProd_Att_9Specified = r.ssProd_Att_9 != "";
			varWSProd_Att10 = BaseAppUtils.RemoveControlChars(r.ssProd_Att10);
			varWSProd_Att10Specified = r.ssProd_Att10 != "";
			varWSRound_Prof = BaseAppUtils.RemoveControlChars(r.ssRound_Prof);
			varWSRound_ProfSpecified = r.ssRound_Prof != "";
			varWSVar_Sales_Un = BaseAppUtils.RemoveControlChars(r.ssVar_Sales_Un);
			varWSVar_Sales_UnSpecified = r.ssVar_Sales_Un != "";
			varWSUnit_Group = BaseAppUtils.RemoveControlChars(r.ssUnit_Group);
			varWSUnit_GroupSpecified = r.ssUnit_Group != "";
			varWSPr_Ref_Mat_External = BaseAppUtils.RemoveControlChars(r.ssPr_Ref_Mat_External);
			varWSPr_Ref_Mat_ExternalSpecified = r.ssPr_Ref_Mat_External != "";
			varWSPr_Ref_Mat_Guid = BaseAppUtils.RemoveControlChars(r.ssPr_Ref_Mat_Guid);
			varWSPr_Ref_Mat_GuidSpecified = r.ssPr_Ref_Mat_Guid != "";
			varWSPr_Ref_Mat_Version = BaseAppUtils.RemoveControlChars(r.ssPr_Ref_Mat_Version);
			varWSPr_Ref_Mat_VersionSpecified = r.ssPr_Ref_Mat_Version != "";
		}

		public static RLSalesdataList ToRecordList(WORCSalesdataRecord[] array) {
			RLSalesdataList rl = new RLSalesdataList();
			if (array != null) {
				foreach(WORCSalesdataRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCSalesdataRecord[] FromRecordList(RLSalesdataList rl) {
			WORCSalesdataRecord[] array = new WORCSalesdataRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCSalesdataRecord {
		public static implicit operator WORCSalesdataRecord(RCSalesdataRecord r) {
			return new WORCSalesdataRecord(r.ssSTSalesdata);
		}

		public static implicit operator RCSalesdataRecord(WORCSalesdataRecord w) {
			RCSalesdataRecord r = new RCSalesdataRecord("");
			if (w != null) {
				r.ssSTSalesdata = w;
			}
			return r;
		}

	}

	partial struct STSalesdataStructure {
		public static implicit operator WORCSalesdataRecord(STSalesdataStructure r) {
			return new WORCSalesdataRecord(r);
		}

		public static implicit operator STSalesdataStructure(WORCSalesdataRecord w) {
			STSalesdataStructure r = new STSalesdataStructure("");
			if (w != null) {
				r.ssSales_Org = ((string) w.varWSSales_Org ?? "");
				r.ssDistr_Chan = ((string) w.varWSDistr_Chan ?? "");
				r.ssDel_Flag = ((string) w.varWSDel_Flag ?? "");
				r.ssMatl_Stats = ((string) w.varWSMatl_Stats ?? "");
				r.ssRebate_Grp = ((string) w.varWSRebate_Grp ?? "");
				r.ssComm_Group = ((string) w.varWSComm_Group ?? "");
				r.ssCash_Disc = ((string) w.varWSCash_Disc ?? "");
				r.ssSal_Status = ((string) w.varWSSal_Status ?? "");
				r.ssValid_From = (DateTime) w.varWSValid_From;
				r.ssMin_Order = (decimal) w.varWSMin_Order;
				r.ssMin_Dely = (decimal) w.varWSMin_Dely;
				r.ssMin_Mto = (decimal) w.varWSMin_Mto;
				r.ssDely_Unit = (decimal) w.varWSDely_Unit;
				r.ssDely_Uom = ((string) w.varWSDely_Uom ?? "");
				r.ssDely_Uom_Iso = ((string) w.varWSDely_Uom_Iso ?? "");
				r.ssSales_Unit = ((string) w.varWSSales_Unit ?? "");
				r.ssSales_Unit_Iso = ((string) w.varWSSales_Unit_Iso ?? "");
				r.ssItem_Cat = ((string) w.varWSItem_Cat ?? "");
				r.ssDelyg_Plnt = ((string) w.varWSDelyg_Plnt ?? "");
				r.ssProd_Hier = ((string) w.varWSProd_Hier ?? "");
				r.ssPr_Ref_Mat = ((string) w.varWSPr_Ref_Mat ?? "");
				r.ssMat_Pr_Grp = ((string) w.varWSMat_Pr_Grp ?? "");
				r.ssAcct_Assgt = ((string) w.varWSAcct_Assgt ?? "");
				r.ssMatl_Grp_1 = ((string) w.varWSMatl_Grp_1 ?? "");
				r.ssMatl_Grp_2 = ((string) w.varWSMatl_Grp_2 ?? "");
				r.ssMatl_Grp_3 = ((string) w.varWSMatl_Grp_3 ?? "");
				r.ssMatl_Grp_4 = ((string) w.varWSMatl_Grp_4 ?? "");
				r.ssMatl_Grp_5 = ((string) w.varWSMatl_Grp_5 ?? "");
				r.ssProd_Att_1 = ((string) w.varWSProd_Att_1 ?? "");
				r.ssProd_Att_2 = ((string) w.varWSProd_Att_2 ?? "");
				r.ssProd_Att_3 = ((string) w.varWSProd_Att_3 ?? "");
				r.ssProd_Att_4 = ((string) w.varWSProd_Att_4 ?? "");
				r.ssProd_Att_5 = ((string) w.varWSProd_Att_5 ?? "");
				r.ssProd_Att_6 = ((string) w.varWSProd_Att_6 ?? "");
				r.ssProd_Att_7 = ((string) w.varWSProd_Att_7 ?? "");
				r.ssProd_Att_8 = ((string) w.varWSProd_Att_8 ?? "");
				r.ssProd_Att_9 = ((string) w.varWSProd_Att_9 ?? "");
				r.ssProd_Att10 = ((string) w.varWSProd_Att10 ?? "");
				r.ssRound_Prof = ((string) w.varWSRound_Prof ?? "");
				r.ssVar_Sales_Un = ((string) w.varWSVar_Sales_Un ?? "");
				r.ssUnit_Group = ((string) w.varWSUnit_Group ?? "");
				r.ssPr_Ref_Mat_External = ((string) w.varWSPr_Ref_Mat_External ?? "");
				r.ssPr_Ref_Mat_Guid = ((string) w.varWSPr_Ref_Mat_Guid ?? "");
				r.ssPr_Ref_Mat_Version = ((string) w.varWSPr_Ref_Mat_Version ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLSalesdataRecordList {
		public WORCSalesdataRecord[] Array;


		public WORLSalesdataRecordList(WORCSalesdataRecord[] r) {
			if (r == null)
			Array = new WORCSalesdataRecord[0];
			else
			Array = r;
		}
		public WORLSalesdataRecordList() {
			Array = new WORCSalesdataRecord[0];
		}

		public WORLSalesdataRecordList(RLSalesdataRecordList rl) {
			rl=(RLSalesdataRecordList) rl.Duplicate();
			Array = new WORCSalesdataRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCSalesdataRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLSalesdataRecordList {
		public static implicit operator RLSalesdataRecordList(WORCSalesdataRecord[] array) {
			RLSalesdataRecordList rl = new RLSalesdataRecordList();
			if (array != null) {
				foreach(WORCSalesdataRecord val in array) {
					rl.Append((RCSalesdataRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSalesdataRecord[](RLSalesdataRecordList rl) {
			WORCSalesdataRecord[] array = new WORCSalesdataRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCSalesdataRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLSalesdataRecordList {
		public static implicit operator RLSalesdataRecordList(WORLSalesdataRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLSalesdataRecordList(RLSalesdataRecordList rl) {
			return new WORLSalesdataRecordList(rl);
		}
		public static implicit operator WORCSalesdataRecord[](WORLSalesdataRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSalesdataRecordList(WORCSalesdataRecord[] array) {
			return new WORLSalesdataRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLSalesdataList {
		public WORCSalesdataRecord[] Array;


		public WORLSalesdataList(WORCSalesdataRecord[] r) {
			if (r == null)
			Array = new WORCSalesdataRecord[0];
			else
			Array = r;
		}
		public WORLSalesdataList() {
			Array = new WORCSalesdataRecord[0];
		}

		public WORLSalesdataList(RLSalesdataList rl) {
			rl=(RLSalesdataList) rl.Duplicate();
			Array = new WORCSalesdataRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLSalesdataList {
		public static implicit operator RLSalesdataList(WORCSalesdataRecord[] array) {
			RLSalesdataList rl = new RLSalesdataList();
			if (array != null) {
				foreach(WORCSalesdataRecord val in array) {
					rl.Append((STSalesdataStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCSalesdataRecord[](RLSalesdataList rl) {
			WORCSalesdataRecord[] array = new WORCSalesdataRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STSalesdataStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLSalesdataList {
		public static implicit operator RLSalesdataList(WORLSalesdataList w) {
			return w.Array;
		}
		public static implicit operator WORLSalesdataList(RLSalesdataList rl) {
			return new WORLSalesdataList(rl);
		}
		public static implicit operator WORCSalesdataRecord[](WORLSalesdataList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLSalesdataList(WORCSalesdataRecord[] array) {
			return new WORLSalesdataList(array);
		}
	}
}

