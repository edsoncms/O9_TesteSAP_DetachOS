/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STUnitsofmeasureStructure</code> that represents the Service Studio structure
	///  <code>Unitsofmeasure</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STUnitsofmeasureStructure: ISerializable, ITypedRecord<STUnitsofmeasureStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdAlt_Unit = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*tq1MXggkHkW+Kzl56oIHbg");
		private static readonly GlobalObjectKey IdAlt_Unit_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*CXlMEAoFUEC5ICDDMzm58A");
		private static readonly GlobalObjectKey IdNumerator = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*yua3PvSPgkieoLPHDTWDQg");
		private static readonly GlobalObjectKey IdDenominatr = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Qognq5Y8KU6PuFtnBTlIhw");
		private static readonly GlobalObjectKey IdEan_Upc = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*VDmSy5e9pE68KyfyB+vbWw");
		private static readonly GlobalObjectKey IdEan_Cat = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*cMl79qK0U0yrH5sDYhgbjg");
		private static readonly GlobalObjectKey IdLength = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*L8MT1OWcykaPf14XeZdZjQ");
		private static readonly GlobalObjectKey IdWidth = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*UBGTs8x7aEaVUKpjb2QrEQ");
		private static readonly GlobalObjectKey IdHeight = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*01mOC+EjAUCjyNYHed1Ylg");
		private static readonly GlobalObjectKey IdUnit_Dim = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*GAA7j7ytGkKIBI8DuQWfqA");
		private static readonly GlobalObjectKey IdUnit_Dim_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*j8jkplgO0UiLFDRbuoHw_w");
		private static readonly GlobalObjectKey IdVolume = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*9kEcikh6mUy0cQY2AkUsrg");
		private static readonly GlobalObjectKey IdVolumeunit = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*DJByC0LM4U2LEXsyj8gWsw");
		private static readonly GlobalObjectKey IdVolumeunit_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*IUp4TB5w9ESzsZJRSp8t8g");
		private static readonly GlobalObjectKey IdGross_Wt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*DSpGa0E1UkqnsKgKy8d1iQ");
		private static readonly GlobalObjectKey IdUnit_Of_Wt = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*1ym02mxAkkSBxQOvIDS5mA");
		private static readonly GlobalObjectKey IdUnit_Of_Wt_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*t8xQg+9xa0ip4Ugm+hdNeg");
		private static readonly GlobalObjectKey IdSub_Uom = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*QHXUSmjFZEmvCFMJxJwWeg");
		private static readonly GlobalObjectKey IdSub_Uom_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*61TteXezIE2ZZLWcDloJVg");
		private static readonly GlobalObjectKey IdInternal_Char = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*ukn1OLC25kOIRGTKq1yY4A");
		private static readonly GlobalObjectKey IdUomsortnumber = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*BuqYnnaeU0G46VuC_1x+LQ");
		private static readonly GlobalObjectKey IdLeadinguom = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*Fu6tJkPNqU2+exRD6y1d5g");
		private static readonly GlobalObjectKey IdValueduom = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*arGCxPv_kkenTxx569_b8Q");
		private static readonly GlobalObjectKey IdChar_Unit = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*KgOcWtvlk0C8cjo9RYbEKg");
		private static readonly GlobalObjectKey IdChar_Unit_Iso = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*OkP9+_g8tkaTUtP172kw7g");
		private static readonly GlobalObjectKey IdGtin_Variant = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*8T7gnuXBK0q8XmAmJuEhBQ");
		private static readonly GlobalObjectKey IdNet_Weight = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*eMSkKQrorUW+9r2E3tPfSg");
		private static readonly GlobalObjectKey IdMe_Anz_Sub = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*04JVh+eGOEay0XMXp20aaA");
		private static readonly GlobalObjectKey IdEwm_Cw_Uom_Type = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*9iYX_StXjUa_gOYefWX0FQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Alt_Unit")]
		public string ssAlt_Unit;

		[System.Xml.Serialization.XmlElement("Alt_Unit_Iso")]
		public string ssAlt_Unit_Iso;

		[System.Xml.Serialization.XmlElement("Numerator")]
		public decimal ssNumerator;

		[System.Xml.Serialization.XmlElement("Denominatr")]
		public decimal ssDenominatr;

		[System.Xml.Serialization.XmlElement("Ean_Upc")]
		public string ssEan_Upc;

		[System.Xml.Serialization.XmlElement("Ean_Cat")]
		public string ssEan_Cat;

		[System.Xml.Serialization.XmlElement("Length")]
		public decimal ssLength;

		[System.Xml.Serialization.XmlElement("Width")]
		public decimal ssWidth;

		[System.Xml.Serialization.XmlElement("Height")]
		public decimal ssHeight;

		[System.Xml.Serialization.XmlElement("Unit_Dim")]
		public string ssUnit_Dim;

		[System.Xml.Serialization.XmlElement("Unit_Dim_Iso")]
		public string ssUnit_Dim_Iso;

		[System.Xml.Serialization.XmlElement("Volume")]
		public decimal ssVolume;

		[System.Xml.Serialization.XmlElement("Volumeunit")]
		public string ssVolumeunit;

		[System.Xml.Serialization.XmlElement("Volumeunit_Iso")]
		public string ssVolumeunit_Iso;

		[System.Xml.Serialization.XmlElement("Gross_Wt")]
		public decimal ssGross_Wt;

		[System.Xml.Serialization.XmlElement("Unit_Of_Wt")]
		public string ssUnit_Of_Wt;

		[System.Xml.Serialization.XmlElement("Unit_Of_Wt_Iso")]
		public string ssUnit_Of_Wt_Iso;

		[System.Xml.Serialization.XmlElement("Sub_Uom")]
		public string ssSub_Uom;

		[System.Xml.Serialization.XmlElement("Sub_Uom_Iso")]
		public string ssSub_Uom_Iso;

		[System.Xml.Serialization.XmlElement("Internal_Char")]
		public string ssInternal_Char;

		[System.Xml.Serialization.XmlElement("Uomsortnumber")]
		public string ssUomsortnumber;

		[System.Xml.Serialization.XmlElement("Leadinguom")]
		public string ssLeadinguom;

		[System.Xml.Serialization.XmlElement("Valueduom")]
		public string ssValueduom;

		[System.Xml.Serialization.XmlElement("Char_Unit")]
		public string ssChar_Unit;

		[System.Xml.Serialization.XmlElement("Char_Unit_Iso")]
		public string ssChar_Unit_Iso;

		[System.Xml.Serialization.XmlElement("Gtin_Variant")]
		public string ssGtin_Variant;

		[System.Xml.Serialization.XmlElement("Net_Weight")]
		public decimal ssNet_Weight;

		[System.Xml.Serialization.XmlElement("Me_Anz_Sub")]
		public decimal ssMe_Anz_Sub;

		[System.Xml.Serialization.XmlElement("Ewm_Cw_Uom_Type")]
		public string ssEwm_Cw_Uom_Type;


		public BitArray OptimizedAttributes;

		public STUnitsofmeasureStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssAlt_Unit = "";
			ssAlt_Unit_Iso = "";
			ssNumerator = 0.0M;
			ssDenominatr = 0.0M;
			ssEan_Upc = "";
			ssEan_Cat = "";
			ssLength = 0.0M;
			ssWidth = 0.0M;
			ssHeight = 0.0M;
			ssUnit_Dim = "";
			ssUnit_Dim_Iso = "";
			ssVolume = 0.0M;
			ssVolumeunit = "";
			ssVolumeunit_Iso = "";
			ssGross_Wt = 0.0M;
			ssUnit_Of_Wt = "";
			ssUnit_Of_Wt_Iso = "";
			ssSub_Uom = "";
			ssSub_Uom_Iso = "";
			ssInternal_Char = "";
			ssUomsortnumber = "";
			ssLeadinguom = "";
			ssValueduom = "";
			ssChar_Unit = "";
			ssChar_Unit_Iso = "";
			ssGtin_Variant = "";
			ssNet_Weight = 0.0M;
			ssMe_Anz_Sub = 0.0M;
			ssEwm_Cw_Uom_Type = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssAlt_Unit = r.ReadText(index++, "Unitsofmeasure.Alt_Unit", "");
			ssAlt_Unit_Iso = r.ReadText(index++, "Unitsofmeasure.Alt_Unit_Iso", "");
			ssNumerator = r.ReadDecimal(index++, "Unitsofmeasure.Numerator", 0.0M);
			ssDenominatr = r.ReadDecimal(index++, "Unitsofmeasure.Denominatr", 0.0M);
			ssEan_Upc = r.ReadText(index++, "Unitsofmeasure.Ean_Upc", "");
			ssEan_Cat = r.ReadText(index++, "Unitsofmeasure.Ean_Cat", "");
			ssLength = r.ReadDecimal(index++, "Unitsofmeasure.Length", 0.0M);
			ssWidth = r.ReadDecimal(index++, "Unitsofmeasure.Width", 0.0M);
			ssHeight = r.ReadDecimal(index++, "Unitsofmeasure.Height", 0.0M);
			ssUnit_Dim = r.ReadText(index++, "Unitsofmeasure.Unit_Dim", "");
			ssUnit_Dim_Iso = r.ReadText(index++, "Unitsofmeasure.Unit_Dim_Iso", "");
			ssVolume = r.ReadDecimal(index++, "Unitsofmeasure.Volume", 0.0M);
			ssVolumeunit = r.ReadText(index++, "Unitsofmeasure.Volumeunit", "");
			ssVolumeunit_Iso = r.ReadText(index++, "Unitsofmeasure.Volumeunit_Iso", "");
			ssGross_Wt = r.ReadDecimal(index++, "Unitsofmeasure.Gross_Wt", 0.0M);
			ssUnit_Of_Wt = r.ReadText(index++, "Unitsofmeasure.Unit_Of_Wt", "");
			ssUnit_Of_Wt_Iso = r.ReadText(index++, "Unitsofmeasure.Unit_Of_Wt_Iso", "");
			ssSub_Uom = r.ReadText(index++, "Unitsofmeasure.Sub_Uom", "");
			ssSub_Uom_Iso = r.ReadText(index++, "Unitsofmeasure.Sub_Uom_Iso", "");
			ssInternal_Char = r.ReadText(index++, "Unitsofmeasure.Internal_Char", "");
			ssUomsortnumber = r.ReadText(index++, "Unitsofmeasure.Uomsortnumber", "");
			ssLeadinguom = r.ReadText(index++, "Unitsofmeasure.Leadinguom", "");
			ssValueduom = r.ReadText(index++, "Unitsofmeasure.Valueduom", "");
			ssChar_Unit = r.ReadText(index++, "Unitsofmeasure.Char_Unit", "");
			ssChar_Unit_Iso = r.ReadText(index++, "Unitsofmeasure.Char_Unit_Iso", "");
			ssGtin_Variant = r.ReadText(index++, "Unitsofmeasure.Gtin_Variant", "");
			ssNet_Weight = r.ReadDecimal(index++, "Unitsofmeasure.Net_Weight", 0.0M);
			ssMe_Anz_Sub = r.ReadDecimal(index++, "Unitsofmeasure.Me_Anz_Sub", 0.0M);
			ssEwm_Cw_Uom_Type = r.ReadText(index++, "Unitsofmeasure.Ewm_Cw_Uom_Type", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STUnitsofmeasureStructure r) {
			this = r;
		}


		public static bool operator == (STUnitsofmeasureStructure a, STUnitsofmeasureStructure b) {
			if (a.ssAlt_Unit != b.ssAlt_Unit) return false;
			if (a.ssAlt_Unit_Iso != b.ssAlt_Unit_Iso) return false;
			if (a.ssNumerator != b.ssNumerator) return false;
			if (a.ssDenominatr != b.ssDenominatr) return false;
			if (a.ssEan_Upc != b.ssEan_Upc) return false;
			if (a.ssEan_Cat != b.ssEan_Cat) return false;
			if (a.ssLength != b.ssLength) return false;
			if (a.ssWidth != b.ssWidth) return false;
			if (a.ssHeight != b.ssHeight) return false;
			if (a.ssUnit_Dim != b.ssUnit_Dim) return false;
			if (a.ssUnit_Dim_Iso != b.ssUnit_Dim_Iso) return false;
			if (a.ssVolume != b.ssVolume) return false;
			if (a.ssVolumeunit != b.ssVolumeunit) return false;
			if (a.ssVolumeunit_Iso != b.ssVolumeunit_Iso) return false;
			if (a.ssGross_Wt != b.ssGross_Wt) return false;
			if (a.ssUnit_Of_Wt != b.ssUnit_Of_Wt) return false;
			if (a.ssUnit_Of_Wt_Iso != b.ssUnit_Of_Wt_Iso) return false;
			if (a.ssSub_Uom != b.ssSub_Uom) return false;
			if (a.ssSub_Uom_Iso != b.ssSub_Uom_Iso) return false;
			if (a.ssInternal_Char != b.ssInternal_Char) return false;
			if (a.ssUomsortnumber != b.ssUomsortnumber) return false;
			if (a.ssLeadinguom != b.ssLeadinguom) return false;
			if (a.ssValueduom != b.ssValueduom) return false;
			if (a.ssChar_Unit != b.ssChar_Unit) return false;
			if (a.ssChar_Unit_Iso != b.ssChar_Unit_Iso) return false;
			if (a.ssGtin_Variant != b.ssGtin_Variant) return false;
			if (a.ssNet_Weight != b.ssNet_Weight) return false;
			if (a.ssMe_Anz_Sub != b.ssMe_Anz_Sub) return false;
			if (a.ssEwm_Cw_Uom_Type != b.ssEwm_Cw_Uom_Type) return false;
			return true;
		}

		public static bool operator != (STUnitsofmeasureStructure a, STUnitsofmeasureStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STUnitsofmeasureStructure)) return false;
			return (this == (STUnitsofmeasureStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssAlt_Unit.GetHashCode()
				^ ssAlt_Unit_Iso.GetHashCode()
				^ ssNumerator.GetHashCode()
				^ ssDenominatr.GetHashCode()
				^ ssEan_Upc.GetHashCode()
				^ ssEan_Cat.GetHashCode()
				^ ssLength.GetHashCode()
				^ ssWidth.GetHashCode()
				^ ssHeight.GetHashCode()
				^ ssUnit_Dim.GetHashCode()
				^ ssUnit_Dim_Iso.GetHashCode()
				^ ssVolume.GetHashCode()
				^ ssVolumeunit.GetHashCode()
				^ ssVolumeunit_Iso.GetHashCode()
				^ ssGross_Wt.GetHashCode()
				^ ssUnit_Of_Wt.GetHashCode()
				^ ssUnit_Of_Wt_Iso.GetHashCode()
				^ ssSub_Uom.GetHashCode()
				^ ssSub_Uom_Iso.GetHashCode()
				^ ssInternal_Char.GetHashCode()
				^ ssUomsortnumber.GetHashCode()
				^ ssLeadinguom.GetHashCode()
				^ ssValueduom.GetHashCode()
				^ ssChar_Unit.GetHashCode()
				^ ssChar_Unit_Iso.GetHashCode()
				^ ssGtin_Variant.GetHashCode()
				^ ssNet_Weight.GetHashCode()
				^ ssMe_Anz_Sub.GetHashCode()
				^ ssEwm_Cw_Uom_Type.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STUnitsofmeasureStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssAlt_Unit = "";
			ssAlt_Unit_Iso = "";
			ssNumerator = 0.0M;
			ssDenominatr = 0.0M;
			ssEan_Upc = "";
			ssEan_Cat = "";
			ssLength = 0.0M;
			ssWidth = 0.0M;
			ssHeight = 0.0M;
			ssUnit_Dim = "";
			ssUnit_Dim_Iso = "";
			ssVolume = 0.0M;
			ssVolumeunit = "";
			ssVolumeunit_Iso = "";
			ssGross_Wt = 0.0M;
			ssUnit_Of_Wt = "";
			ssUnit_Of_Wt_Iso = "";
			ssSub_Uom = "";
			ssSub_Uom_Iso = "";
			ssInternal_Char = "";
			ssUomsortnumber = "";
			ssLeadinguom = "";
			ssValueduom = "";
			ssChar_Unit = "";
			ssChar_Unit_Iso = "";
			ssGtin_Variant = "";
			ssNet_Weight = 0.0M;
			ssMe_Anz_Sub = 0.0M;
			ssEwm_Cw_Uom_Type = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssAlt_Unit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAlt_Unit' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAlt_Unit = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssAlt_Unit_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssAlt_Unit_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssAlt_Unit_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNumerator", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNumerator' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNumerator = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDenominatr", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDenominatr' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDenominatr = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEan_Upc", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEan_Upc' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEan_Upc = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEan_Cat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEan_Cat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEan_Cat = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLength", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLength' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLength = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssWidth", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssWidth' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssWidth = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssHeight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssHeight' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssHeight = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUnit_Dim", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUnit_Dim' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUnit_Dim = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUnit_Dim_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUnit_Dim_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUnit_Dim_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVolume", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVolume' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVolume = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVolumeunit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVolumeunit' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVolumeunit = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssVolumeunit_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssVolumeunit_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssVolumeunit_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssGross_Wt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssGross_Wt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssGross_Wt = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUnit_Of_Wt", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUnit_Of_Wt' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUnit_Of_Wt = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUnit_Of_Wt_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUnit_Of_Wt_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUnit_Of_Wt_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSub_Uom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSub_Uom' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSub_Uom = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssSub_Uom_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSub_Uom_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSub_Uom_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssInternal_Char", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssInternal_Char' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssInternal_Char = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUomsortnumber", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUomsortnumber' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUomsortnumber = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLeadinguom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLeadinguom' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLeadinguom = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValueduom", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValueduom' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValueduom = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssChar_Unit", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssChar_Unit' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssChar_Unit = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssChar_Unit_Iso", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssChar_Unit_Iso' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssChar_Unit_Iso = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssGtin_Variant", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssGtin_Variant' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssGtin_Variant = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssNet_Weight", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNet_Weight' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNet_Weight = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMe_Anz_Sub", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMe_Anz_Sub' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMe_Anz_Sub = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssEwm_Cw_Uom_Type", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssEwm_Cw_Uom_Type' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssEwm_Cw_Uom_Type = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STUnitsofmeasureStructure Duplicate() {
			STUnitsofmeasureStructure t;
			t.ssAlt_Unit = this.ssAlt_Unit;
			t.ssAlt_Unit_Iso = this.ssAlt_Unit_Iso;
			t.ssNumerator = this.ssNumerator;
			t.ssDenominatr = this.ssDenominatr;
			t.ssEan_Upc = this.ssEan_Upc;
			t.ssEan_Cat = this.ssEan_Cat;
			t.ssLength = this.ssLength;
			t.ssWidth = this.ssWidth;
			t.ssHeight = this.ssHeight;
			t.ssUnit_Dim = this.ssUnit_Dim;
			t.ssUnit_Dim_Iso = this.ssUnit_Dim_Iso;
			t.ssVolume = this.ssVolume;
			t.ssVolumeunit = this.ssVolumeunit;
			t.ssVolumeunit_Iso = this.ssVolumeunit_Iso;
			t.ssGross_Wt = this.ssGross_Wt;
			t.ssUnit_Of_Wt = this.ssUnit_Of_Wt;
			t.ssUnit_Of_Wt_Iso = this.ssUnit_Of_Wt_Iso;
			t.ssSub_Uom = this.ssSub_Uom;
			t.ssSub_Uom_Iso = this.ssSub_Uom_Iso;
			t.ssInternal_Char = this.ssInternal_Char;
			t.ssUomsortnumber = this.ssUomsortnumber;
			t.ssLeadinguom = this.ssLeadinguom;
			t.ssValueduom = this.ssValueduom;
			t.ssChar_Unit = this.ssChar_Unit;
			t.ssChar_Unit_Iso = this.ssChar_Unit_Iso;
			t.ssGtin_Variant = this.ssGtin_Variant;
			t.ssNet_Weight = this.ssNet_Weight;
			t.ssMe_Anz_Sub = this.ssMe_Anz_Sub;
			t.ssEwm_Cw_Uom_Type = this.ssEwm_Cw_Uom_Type;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Alt_Unit")) VarValue.AppendAttribute(recordElem, "Alt_Unit", ssAlt_Unit, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Alt_Unit");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Alt_Unit_Iso")) VarValue.AppendAttribute(recordElem, "Alt_Unit_Iso", ssAlt_Unit_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Alt_Unit_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Numerator")) VarValue.AppendAttribute(recordElem, "Numerator", ssNumerator, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Numerator");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Denominatr")) VarValue.AppendAttribute(recordElem, "Denominatr", ssDenominatr, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Denominatr");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ean_Upc")) VarValue.AppendAttribute(recordElem, "Ean_Upc", ssEan_Upc, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ean_Upc");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ean_Cat")) VarValue.AppendAttribute(recordElem, "Ean_Cat", ssEan_Cat, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ean_Cat");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Length")) VarValue.AppendAttribute(recordElem, "Length", ssLength, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Length");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Width")) VarValue.AppendAttribute(recordElem, "Width", ssWidth, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Width");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Height")) VarValue.AppendAttribute(recordElem, "Height", ssHeight, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Height");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Unit_Dim")) VarValue.AppendAttribute(recordElem, "Unit_Dim", ssUnit_Dim, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Unit_Dim");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Unit_Dim_Iso")) VarValue.AppendAttribute(recordElem, "Unit_Dim_Iso", ssUnit_Dim_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Unit_Dim_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Volume")) VarValue.AppendAttribute(recordElem, "Volume", ssVolume, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Volume");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Volumeunit")) VarValue.AppendAttribute(recordElem, "Volumeunit", ssVolumeunit, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Volumeunit");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Volumeunit_Iso")) VarValue.AppendAttribute(recordElem, "Volumeunit_Iso", ssVolumeunit_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Volumeunit_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Gross_Wt")) VarValue.AppendAttribute(recordElem, "Gross_Wt", ssGross_Wt, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Gross_Wt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Unit_Of_Wt")) VarValue.AppendAttribute(recordElem, "Unit_Of_Wt", ssUnit_Of_Wt, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Unit_Of_Wt");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Unit_Of_Wt_Iso")) VarValue.AppendAttribute(recordElem, "Unit_Of_Wt_Iso", ssUnit_Of_Wt_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Unit_Of_Wt_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sub_Uom")) VarValue.AppendAttribute(recordElem, "Sub_Uom", ssSub_Uom, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sub_Uom");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Sub_Uom_Iso")) VarValue.AppendAttribute(recordElem, "Sub_Uom_Iso", ssSub_Uom_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Sub_Uom_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Internal_Char")) VarValue.AppendAttribute(recordElem, "Internal_Char", ssInternal_Char, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Internal_Char");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Uomsortnumber")) VarValue.AppendAttribute(recordElem, "Uomsortnumber", ssUomsortnumber, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Uomsortnumber");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Leadinguom")) VarValue.AppendAttribute(recordElem, "Leadinguom", ssLeadinguom, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Leadinguom");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Valueduom")) VarValue.AppendAttribute(recordElem, "Valueduom", ssValueduom, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Valueduom");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Char_Unit")) VarValue.AppendAttribute(recordElem, "Char_Unit", ssChar_Unit, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Char_Unit");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Char_Unit_Iso")) VarValue.AppendAttribute(recordElem, "Char_Unit_Iso", ssChar_Unit_Iso, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Char_Unit_Iso");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Gtin_Variant")) VarValue.AppendAttribute(recordElem, "Gtin_Variant", ssGtin_Variant, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Gtin_Variant");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Net_Weight")) VarValue.AppendAttribute(recordElem, "Net_Weight", ssNet_Weight, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Net_Weight");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Me_Anz_Sub")) VarValue.AppendAttribute(recordElem, "Me_Anz_Sub", ssMe_Anz_Sub, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Me_Anz_Sub");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Ewm_Cw_Uom_Type")) VarValue.AppendAttribute(recordElem, "Ewm_Cw_Uom_Type", ssEwm_Cw_Uom_Type, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Ewm_Cw_Uom_Type");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "alt_unit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Alt_Unit")) variable.Value = ssAlt_Unit; else variable.Optimized = true;
			} else if (head == "alt_unit_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Alt_Unit_Iso")) variable.Value = ssAlt_Unit_Iso; else variable.Optimized = true;
			} else if (head == "numerator") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Numerator")) variable.Value = ssNumerator; else variable.Optimized = true;
			} else if (head == "denominatr") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Denominatr")) variable.Value = ssDenominatr; else variable.Optimized = true;
			} else if (head == "ean_upc") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ean_Upc")) variable.Value = ssEan_Upc; else variable.Optimized = true;
			} else if (head == "ean_cat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ean_Cat")) variable.Value = ssEan_Cat; else variable.Optimized = true;
			} else if (head == "length") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Length")) variable.Value = ssLength; else variable.Optimized = true;
			} else if (head == "width") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Width")) variable.Value = ssWidth; else variable.Optimized = true;
			} else if (head == "height") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Height")) variable.Value = ssHeight; else variable.Optimized = true;
			} else if (head == "unit_dim") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unit_Dim")) variable.Value = ssUnit_Dim; else variable.Optimized = true;
			} else if (head == "unit_dim_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unit_Dim_Iso")) variable.Value = ssUnit_Dim_Iso; else variable.Optimized = true;
			} else if (head == "volume") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Volume")) variable.Value = ssVolume; else variable.Optimized = true;
			} else if (head == "volumeunit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Volumeunit")) variable.Value = ssVolumeunit; else variable.Optimized = true;
			} else if (head == "volumeunit_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Volumeunit_Iso")) variable.Value = ssVolumeunit_Iso; else variable.Optimized = true;
			} else if (head == "gross_wt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Gross_Wt")) variable.Value = ssGross_Wt; else variable.Optimized = true;
			} else if (head == "unit_of_wt") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unit_Of_Wt")) variable.Value = ssUnit_Of_Wt; else variable.Optimized = true;
			} else if (head == "unit_of_wt_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unit_Of_Wt_Iso")) variable.Value = ssUnit_Of_Wt_Iso; else variable.Optimized = true;
			} else if (head == "sub_uom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sub_Uom")) variable.Value = ssSub_Uom; else variable.Optimized = true;
			} else if (head == "sub_uom_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Sub_Uom_Iso")) variable.Value = ssSub_Uom_Iso; else variable.Optimized = true;
			} else if (head == "internal_char") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Internal_Char")) variable.Value = ssInternal_Char; else variable.Optimized = true;
			} else if (head == "uomsortnumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Uomsortnumber")) variable.Value = ssUomsortnumber; else variable.Optimized = true;
			} else if (head == "leadinguom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Leadinguom")) variable.Value = ssLeadinguom; else variable.Optimized = true;
			} else if (head == "valueduom") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Valueduom")) variable.Value = ssValueduom; else variable.Optimized = true;
			} else if (head == "char_unit") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Char_Unit")) variable.Value = ssChar_Unit; else variable.Optimized = true;
			} else if (head == "char_unit_iso") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Char_Unit_Iso")) variable.Value = ssChar_Unit_Iso; else variable.Optimized = true;
			} else if (head == "gtin_variant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Gtin_Variant")) variable.Value = ssGtin_Variant; else variable.Optimized = true;
			} else if (head == "net_weight") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Net_Weight")) variable.Value = ssNet_Weight; else variable.Optimized = true;
			} else if (head == "me_anz_sub") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Me_Anz_Sub")) variable.Value = ssMe_Anz_Sub; else variable.Optimized = true;
			} else if (head == "ewm_cw_uom_type") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Ewm_Cw_Uom_Type")) variable.Value = ssEwm_Cw_Uom_Type; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAlt_Unit) {
				return ssAlt_Unit;
			} else if (key == IdAlt_Unit_Iso) {
				return ssAlt_Unit_Iso;
			} else if (key == IdNumerator) {
				return ssNumerator;
			} else if (key == IdDenominatr) {
				return ssDenominatr;
			} else if (key == IdEan_Upc) {
				return ssEan_Upc;
			} else if (key == IdEan_Cat) {
				return ssEan_Cat;
			} else if (key == IdLength) {
				return ssLength;
			} else if (key == IdWidth) {
				return ssWidth;
			} else if (key == IdHeight) {
				return ssHeight;
			} else if (key == IdUnit_Dim) {
				return ssUnit_Dim;
			} else if (key == IdUnit_Dim_Iso) {
				return ssUnit_Dim_Iso;
			} else if (key == IdVolume) {
				return ssVolume;
			} else if (key == IdVolumeunit) {
				return ssVolumeunit;
			} else if (key == IdVolumeunit_Iso) {
				return ssVolumeunit_Iso;
			} else if (key == IdGross_Wt) {
				return ssGross_Wt;
			} else if (key == IdUnit_Of_Wt) {
				return ssUnit_Of_Wt;
			} else if (key == IdUnit_Of_Wt_Iso) {
				return ssUnit_Of_Wt_Iso;
			} else if (key == IdSub_Uom) {
				return ssSub_Uom;
			} else if (key == IdSub_Uom_Iso) {
				return ssSub_Uom_Iso;
			} else if (key == IdInternal_Char) {
				return ssInternal_Char;
			} else if (key == IdUomsortnumber) {
				return ssUomsortnumber;
			} else if (key == IdLeadinguom) {
				return ssLeadinguom;
			} else if (key == IdValueduom) {
				return ssValueduom;
			} else if (key == IdChar_Unit) {
				return ssChar_Unit;
			} else if (key == IdChar_Unit_Iso) {
				return ssChar_Unit_Iso;
			} else if (key == IdGtin_Variant) {
				return ssGtin_Variant;
			} else if (key == IdNet_Weight) {
				return ssNet_Weight;
			} else if (key == IdMe_Anz_Sub) {
				return ssMe_Anz_Sub;
			} else if (key == IdEwm_Cw_Uom_Type) {
				return ssEwm_Cw_Uom_Type;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssAlt_Unit = (string) other.AttributeGet(IdAlt_Unit);
			ssAlt_Unit_Iso = (string) other.AttributeGet(IdAlt_Unit_Iso);
			ssNumerator = (decimal) other.AttributeGet(IdNumerator);
			ssDenominatr = (decimal) other.AttributeGet(IdDenominatr);
			ssEan_Upc = (string) other.AttributeGet(IdEan_Upc);
			ssEan_Cat = (string) other.AttributeGet(IdEan_Cat);
			ssLength = (decimal) other.AttributeGet(IdLength);
			ssWidth = (decimal) other.AttributeGet(IdWidth);
			ssHeight = (decimal) other.AttributeGet(IdHeight);
			ssUnit_Dim = (string) other.AttributeGet(IdUnit_Dim);
			ssUnit_Dim_Iso = (string) other.AttributeGet(IdUnit_Dim_Iso);
			ssVolume = (decimal) other.AttributeGet(IdVolume);
			ssVolumeunit = (string) other.AttributeGet(IdVolumeunit);
			ssVolumeunit_Iso = (string) other.AttributeGet(IdVolumeunit_Iso);
			ssGross_Wt = (decimal) other.AttributeGet(IdGross_Wt);
			ssUnit_Of_Wt = (string) other.AttributeGet(IdUnit_Of_Wt);
			ssUnit_Of_Wt_Iso = (string) other.AttributeGet(IdUnit_Of_Wt_Iso);
			ssSub_Uom = (string) other.AttributeGet(IdSub_Uom);
			ssSub_Uom_Iso = (string) other.AttributeGet(IdSub_Uom_Iso);
			ssInternal_Char = (string) other.AttributeGet(IdInternal_Char);
			ssUomsortnumber = (string) other.AttributeGet(IdUomsortnumber);
			ssLeadinguom = (string) other.AttributeGet(IdLeadinguom);
			ssValueduom = (string) other.AttributeGet(IdValueduom);
			ssChar_Unit = (string) other.AttributeGet(IdChar_Unit);
			ssChar_Unit_Iso = (string) other.AttributeGet(IdChar_Unit_Iso);
			ssGtin_Variant = (string) other.AttributeGet(IdGtin_Variant);
			ssNet_Weight = (decimal) other.AttributeGet(IdNet_Weight);
			ssMe_Anz_Sub = (decimal) other.AttributeGet(IdMe_Anz_Sub);
			ssEwm_Cw_Uom_Type = (string) other.AttributeGet(IdEwm_Cw_Uom_Type);
		}
	} // STUnitsofmeasureStructure
	/// <summary>
	/// Structure <code>RCUnitsofmeasureRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUnitsofmeasureRecord: ISerializable, ITypedRecord<RCUnitsofmeasureRecord> {
		private static readonly GlobalObjectKey IdUnitsofmeasure = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*gQ72vKbRrNUGtrPlVbLYKQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Unitsofmeasure")]
		public STUnitsofmeasureStructure ssSTUnitsofmeasure;


		public static implicit operator STUnitsofmeasureStructure(RCUnitsofmeasureRecord r) {
			return r.ssSTUnitsofmeasure;
		}

		public static implicit operator RCUnitsofmeasureRecord(STUnitsofmeasureStructure r) {
			RCUnitsofmeasureRecord res = new RCUnitsofmeasureRecord(null);
			res.ssSTUnitsofmeasure = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCUnitsofmeasureRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTUnitsofmeasure = new STUnitsofmeasureStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTUnitsofmeasure.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTUnitsofmeasure.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUnitsofmeasureRecord r) {
			this = r;
		}


		public static bool operator == (RCUnitsofmeasureRecord a, RCUnitsofmeasureRecord b) {
			if (a.ssSTUnitsofmeasure != b.ssSTUnitsofmeasure) return false;
			return true;
		}

		public static bool operator != (RCUnitsofmeasureRecord a, RCUnitsofmeasureRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUnitsofmeasureRecord)) return false;
			return (this == (RCUnitsofmeasureRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTUnitsofmeasure.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUnitsofmeasureRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTUnitsofmeasure = new STUnitsofmeasureStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTUnitsofmeasure", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTUnitsofmeasure' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTUnitsofmeasure = (STUnitsofmeasureStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTUnitsofmeasure.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTUnitsofmeasure.InternalRecursiveSave();
		}


		public RCUnitsofmeasureRecord Duplicate() {
			RCUnitsofmeasureRecord t;
			t.ssSTUnitsofmeasure = (STUnitsofmeasureStructure) this.ssSTUnitsofmeasure.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTUnitsofmeasure.ToXml(this, recordElem, "Unitsofmeasure", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "unitsofmeasure") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Unitsofmeasure")) variable.Value = ssSTUnitsofmeasure; else variable.Optimized = true;
				variable.SetFieldName("unitsofmeasure");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUnitsofmeasure) {
				return ssSTUnitsofmeasure;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTUnitsofmeasure.FillFromOther((IRecord) other.AttributeGet(IdUnitsofmeasure));
		}
	} // RCUnitsofmeasureRecord
	/// <summary>
	/// RecordList type <code>RLUnitsofmeasureRecordList</code> that represents a record list of
	///  <code>Unitsofmeasure</code>
	/// </summary>
	[Serializable()]
	public partial class RLUnitsofmeasureRecordList: GenericRecordList<RCUnitsofmeasureRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUnitsofmeasureRecord GetElementDefaultValue() {
			return new RCUnitsofmeasureRecord("");
		}

		public T[] ToArray<T>(Func<RCUnitsofmeasureRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUnitsofmeasureRecordList recordlist, Func<RCUnitsofmeasureRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUnitsofmeasureRecordList ToList<T>(T[] array, Func <T, RCUnitsofmeasureRecord> converter) {
			RLUnitsofmeasureRecordList result = new RLUnitsofmeasureRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUnitsofmeasureRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUnitsofmeasureRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUnitsofmeasureRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUnitsofmeasureRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUnitsofmeasureRecord> NewList() {
			return new RLUnitsofmeasureRecordList();
		}


	} // RLUnitsofmeasureRecordList
	/// <summary>
	/// RecordList type <code>RLUnitsofmeasureList</code> that represents a record list of <code>Text,
	///  Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text
	/// , Text, Text, Text, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal, Decimal,
	///  Decimal</code>
	/// </summary>
	[Serializable()]
	public partial class RLUnitsofmeasureList: GenericRecordList<STUnitsofmeasureStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STUnitsofmeasureStructure GetElementDefaultValue() {
			return new STUnitsofmeasureStructure("");
		}

		public T[] ToArray<T>(Func<STUnitsofmeasureStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUnitsofmeasureList recordlist, Func<STUnitsofmeasureStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUnitsofmeasureList ToList<T>(T[] array, Func <T, STUnitsofmeasureStructure> converter) {
			RLUnitsofmeasureList result = new RLUnitsofmeasureList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUnitsofmeasureList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUnitsofmeasureList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUnitsofmeasureList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUnitsofmeasureList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STUnitsofmeasureStructure> NewList() {
			return new RLUnitsofmeasureList();
		}


	} // RLUnitsofmeasureList
}

namespace ssTeste_SAP {
	[System.CodeDom.Compiler.GeneratedCodeAttribute("CompilerService", "9.1.616.0")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute("Unitsofmeasure", Namespace= "http://www.outsystems.com")]
	public class WORCUnitsofmeasureRecord {
		[System.Xml.Serialization.XmlIgnore]
		public bool varWSAlt_UnitSpecified;
		[System.Xml.Serialization.XmlElement("Alt_Unit")]
		public System.String varWSAlt_Unit;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSAlt_Unit_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Alt_Unit_Iso")]
		public System.String varWSAlt_Unit_Iso;

		[System.Xml.Serialization.XmlElement("Numerator")]
		public System.Decimal varWSNumerator;

		[System.Xml.Serialization.XmlElement("Denominatr")]
		public System.Decimal varWSDenominatr;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEan_UpcSpecified;
		[System.Xml.Serialization.XmlElement("Ean_Upc")]
		public System.String varWSEan_Upc;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEan_CatSpecified;
		[System.Xml.Serialization.XmlElement("Ean_Cat")]
		public System.String varWSEan_Cat;

		[System.Xml.Serialization.XmlElement("Length")]
		public System.Decimal varWSLength;

		[System.Xml.Serialization.XmlElement("Width")]
		public System.Decimal varWSWidth;

		[System.Xml.Serialization.XmlElement("Height")]
		public System.Decimal varWSHeight;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUnit_DimSpecified;
		[System.Xml.Serialization.XmlElement("Unit_Dim")]
		public System.String varWSUnit_Dim;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUnit_Dim_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Unit_Dim_Iso")]
		public System.String varWSUnit_Dim_Iso;

		[System.Xml.Serialization.XmlElement("Volume")]
		public System.Decimal varWSVolume;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSVolumeunitSpecified;
		[System.Xml.Serialization.XmlElement("Volumeunit")]
		public System.String varWSVolumeunit;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSVolumeunit_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Volumeunit_Iso")]
		public System.String varWSVolumeunit_Iso;

		[System.Xml.Serialization.XmlElement("Gross_Wt")]
		public System.Decimal varWSGross_Wt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUnit_Of_WtSpecified;
		[System.Xml.Serialization.XmlElement("Unit_Of_Wt")]
		public System.String varWSUnit_Of_Wt;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUnit_Of_Wt_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Unit_Of_Wt_Iso")]
		public System.String varWSUnit_Of_Wt_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSub_UomSpecified;
		[System.Xml.Serialization.XmlElement("Sub_Uom")]
		public System.String varWSSub_Uom;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSSub_Uom_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Sub_Uom_Iso")]
		public System.String varWSSub_Uom_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSInternal_CharSpecified;
		[System.Xml.Serialization.XmlElement("Internal_Char")]
		public System.String varWSInternal_Char;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSUomsortnumberSpecified;
		[System.Xml.Serialization.XmlElement("Uomsortnumber")]
		public System.String varWSUomsortnumber;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSLeadinguomSpecified;
		[System.Xml.Serialization.XmlElement("Leadinguom")]
		public System.String varWSLeadinguom;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSValueduomSpecified;
		[System.Xml.Serialization.XmlElement("Valueduom")]
		public System.String varWSValueduom;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSChar_UnitSpecified;
		[System.Xml.Serialization.XmlElement("Char_Unit")]
		public System.String varWSChar_Unit;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSChar_Unit_IsoSpecified;
		[System.Xml.Serialization.XmlElement("Char_Unit_Iso")]
		public System.String varWSChar_Unit_Iso;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSGtin_VariantSpecified;
		[System.Xml.Serialization.XmlElement("Gtin_Variant")]
		public System.String varWSGtin_Variant;

		[System.Xml.Serialization.XmlElement("Net_Weight")]
		public System.Decimal varWSNet_Weight;

		[System.Xml.Serialization.XmlElement("Me_Anz_Sub")]
		public System.Decimal varWSMe_Anz_Sub;

		[System.Xml.Serialization.XmlIgnore]
		public bool varWSEwm_Cw_Uom_TypeSpecified;
		[System.Xml.Serialization.XmlElement("Ewm_Cw_Uom_Type")]
		public System.String varWSEwm_Cw_Uom_Type;

		public WORCUnitsofmeasureRecord() {
			varWSAlt_Unit = (System.String) "";
			varWSAlt_Unit_Iso = (System.String) "";
			varWSNumerator = (System.Decimal) 0.0M;
			varWSDenominatr = (System.Decimal) 0.0M;
			varWSEan_Upc = (System.String) "";
			varWSEan_Cat = (System.String) "";
			varWSLength = (System.Decimal) 0.0M;
			varWSWidth = (System.Decimal) 0.0M;
			varWSHeight = (System.Decimal) 0.0M;
			varWSUnit_Dim = (System.String) "";
			varWSUnit_Dim_Iso = (System.String) "";
			varWSVolume = (System.Decimal) 0.0M;
			varWSVolumeunit = (System.String) "";
			varWSVolumeunit_Iso = (System.String) "";
			varWSGross_Wt = (System.Decimal) 0.0M;
			varWSUnit_Of_Wt = (System.String) "";
			varWSUnit_Of_Wt_Iso = (System.String) "";
			varWSSub_Uom = (System.String) "";
			varWSSub_Uom_Iso = (System.String) "";
			varWSInternal_Char = (System.String) "";
			varWSUomsortnumber = (System.String) "";
			varWSLeadinguom = (System.String) "";
			varWSValueduom = (System.String) "";
			varWSChar_Unit = (System.String) "";
			varWSChar_Unit_Iso = (System.String) "";
			varWSGtin_Variant = (System.String) "";
			varWSNet_Weight = (System.Decimal) 0.0M;
			varWSMe_Anz_Sub = (System.Decimal) 0.0M;
			varWSEwm_Cw_Uom_Type = (System.String) "";
		}

		public WORCUnitsofmeasureRecord(STUnitsofmeasureStructure r) {
			varWSAlt_Unit = BaseAppUtils.RemoveControlChars(r.ssAlt_Unit);
			varWSAlt_UnitSpecified = r.ssAlt_Unit != "";
			varWSAlt_Unit_Iso = BaseAppUtils.RemoveControlChars(r.ssAlt_Unit_Iso);
			varWSAlt_Unit_IsoSpecified = r.ssAlt_Unit_Iso != "";
			varWSNumerator = (System.Decimal) r.ssNumerator;
			varWSDenominatr = (System.Decimal) r.ssDenominatr;
			varWSEan_Upc = BaseAppUtils.RemoveControlChars(r.ssEan_Upc);
			varWSEan_UpcSpecified = r.ssEan_Upc != "";
			varWSEan_Cat = BaseAppUtils.RemoveControlChars(r.ssEan_Cat);
			varWSEan_CatSpecified = r.ssEan_Cat != "";
			varWSLength = (System.Decimal) r.ssLength;
			varWSWidth = (System.Decimal) r.ssWidth;
			varWSHeight = (System.Decimal) r.ssHeight;
			varWSUnit_Dim = BaseAppUtils.RemoveControlChars(r.ssUnit_Dim);
			varWSUnit_DimSpecified = r.ssUnit_Dim != "";
			varWSUnit_Dim_Iso = BaseAppUtils.RemoveControlChars(r.ssUnit_Dim_Iso);
			varWSUnit_Dim_IsoSpecified = r.ssUnit_Dim_Iso != "";
			varWSVolume = (System.Decimal) r.ssVolume;
			varWSVolumeunit = BaseAppUtils.RemoveControlChars(r.ssVolumeunit);
			varWSVolumeunitSpecified = r.ssVolumeunit != "";
			varWSVolumeunit_Iso = BaseAppUtils.RemoveControlChars(r.ssVolumeunit_Iso);
			varWSVolumeunit_IsoSpecified = r.ssVolumeunit_Iso != "";
			varWSGross_Wt = (System.Decimal) r.ssGross_Wt;
			varWSUnit_Of_Wt = BaseAppUtils.RemoveControlChars(r.ssUnit_Of_Wt);
			varWSUnit_Of_WtSpecified = r.ssUnit_Of_Wt != "";
			varWSUnit_Of_Wt_Iso = BaseAppUtils.RemoveControlChars(r.ssUnit_Of_Wt_Iso);
			varWSUnit_Of_Wt_IsoSpecified = r.ssUnit_Of_Wt_Iso != "";
			varWSSub_Uom = BaseAppUtils.RemoveControlChars(r.ssSub_Uom);
			varWSSub_UomSpecified = r.ssSub_Uom != "";
			varWSSub_Uom_Iso = BaseAppUtils.RemoveControlChars(r.ssSub_Uom_Iso);
			varWSSub_Uom_IsoSpecified = r.ssSub_Uom_Iso != "";
			varWSInternal_Char = BaseAppUtils.RemoveControlChars(r.ssInternal_Char);
			varWSInternal_CharSpecified = r.ssInternal_Char != "";
			varWSUomsortnumber = BaseAppUtils.RemoveControlChars(r.ssUomsortnumber);
			varWSUomsortnumberSpecified = r.ssUomsortnumber != "";
			varWSLeadinguom = BaseAppUtils.RemoveControlChars(r.ssLeadinguom);
			varWSLeadinguomSpecified = r.ssLeadinguom != "";
			varWSValueduom = BaseAppUtils.RemoveControlChars(r.ssValueduom);
			varWSValueduomSpecified = r.ssValueduom != "";
			varWSChar_Unit = BaseAppUtils.RemoveControlChars(r.ssChar_Unit);
			varWSChar_UnitSpecified = r.ssChar_Unit != "";
			varWSChar_Unit_Iso = BaseAppUtils.RemoveControlChars(r.ssChar_Unit_Iso);
			varWSChar_Unit_IsoSpecified = r.ssChar_Unit_Iso != "";
			varWSGtin_Variant = BaseAppUtils.RemoveControlChars(r.ssGtin_Variant);
			varWSGtin_VariantSpecified = r.ssGtin_Variant != "";
			varWSNet_Weight = (System.Decimal) r.ssNet_Weight;
			varWSMe_Anz_Sub = (System.Decimal) r.ssMe_Anz_Sub;
			varWSEwm_Cw_Uom_Type = BaseAppUtils.RemoveControlChars(r.ssEwm_Cw_Uom_Type);
			varWSEwm_Cw_Uom_TypeSpecified = r.ssEwm_Cw_Uom_Type != "";
		}

		public static RLUnitsofmeasureList ToRecordList(WORCUnitsofmeasureRecord[] array) {
			RLUnitsofmeasureList rl = new RLUnitsofmeasureList();
			if (array != null) {
				foreach(WORCUnitsofmeasureRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCUnitsofmeasureRecord[] FromRecordList(RLUnitsofmeasureList rl) {
			WORCUnitsofmeasureRecord[] array = new WORCUnitsofmeasureRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCUnitsofmeasureRecord {
		public static implicit operator WORCUnitsofmeasureRecord(RCUnitsofmeasureRecord r) {
			return new WORCUnitsofmeasureRecord(r.ssSTUnitsofmeasure);
		}

		public static implicit operator RCUnitsofmeasureRecord(WORCUnitsofmeasureRecord w) {
			RCUnitsofmeasureRecord r = new RCUnitsofmeasureRecord("");
			if (w != null) {
				r.ssSTUnitsofmeasure = w;
			}
			return r;
		}

	}

	partial struct STUnitsofmeasureStructure {
		public static implicit operator WORCUnitsofmeasureRecord(STUnitsofmeasureStructure r) {
			return new WORCUnitsofmeasureRecord(r);
		}

		public static implicit operator STUnitsofmeasureStructure(WORCUnitsofmeasureRecord w) {
			STUnitsofmeasureStructure r = new STUnitsofmeasureStructure("");
			if (w != null) {
				r.ssAlt_Unit = ((string) w.varWSAlt_Unit ?? "");
				r.ssAlt_Unit_Iso = ((string) w.varWSAlt_Unit_Iso ?? "");
				r.ssNumerator = (decimal) w.varWSNumerator;
				r.ssDenominatr = (decimal) w.varWSDenominatr;
				r.ssEan_Upc = ((string) w.varWSEan_Upc ?? "");
				r.ssEan_Cat = ((string) w.varWSEan_Cat ?? "");
				r.ssLength = (decimal) w.varWSLength;
				r.ssWidth = (decimal) w.varWSWidth;
				r.ssHeight = (decimal) w.varWSHeight;
				r.ssUnit_Dim = ((string) w.varWSUnit_Dim ?? "");
				r.ssUnit_Dim_Iso = ((string) w.varWSUnit_Dim_Iso ?? "");
				r.ssVolume = (decimal) w.varWSVolume;
				r.ssVolumeunit = ((string) w.varWSVolumeunit ?? "");
				r.ssVolumeunit_Iso = ((string) w.varWSVolumeunit_Iso ?? "");
				r.ssGross_Wt = (decimal) w.varWSGross_Wt;
				r.ssUnit_Of_Wt = ((string) w.varWSUnit_Of_Wt ?? "");
				r.ssUnit_Of_Wt_Iso = ((string) w.varWSUnit_Of_Wt_Iso ?? "");
				r.ssSub_Uom = ((string) w.varWSSub_Uom ?? "");
				r.ssSub_Uom_Iso = ((string) w.varWSSub_Uom_Iso ?? "");
				r.ssInternal_Char = ((string) w.varWSInternal_Char ?? "");
				r.ssUomsortnumber = ((string) w.varWSUomsortnumber ?? "");
				r.ssLeadinguom = ((string) w.varWSLeadinguom ?? "");
				r.ssValueduom = ((string) w.varWSValueduom ?? "");
				r.ssChar_Unit = ((string) w.varWSChar_Unit ?? "");
				r.ssChar_Unit_Iso = ((string) w.varWSChar_Unit_Iso ?? "");
				r.ssGtin_Variant = ((string) w.varWSGtin_Variant ?? "");
				r.ssNet_Weight = (decimal) w.varWSNet_Weight;
				r.ssMe_Anz_Sub = (decimal) w.varWSMe_Anz_Sub;
				r.ssEwm_Cw_Uom_Type = ((string) w.varWSEwm_Cw_Uom_Type ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLUnitsofmeasureRecordList {
		public WORCUnitsofmeasureRecord[] Array;


		public WORLUnitsofmeasureRecordList(WORCUnitsofmeasureRecord[] r) {
			if (r == null)
			Array = new WORCUnitsofmeasureRecord[0];
			else
			Array = r;
		}
		public WORLUnitsofmeasureRecordList() {
			Array = new WORCUnitsofmeasureRecord[0];
		}

		public WORLUnitsofmeasureRecordList(RLUnitsofmeasureRecordList rl) {
			rl=(RLUnitsofmeasureRecordList) rl.Duplicate();
			Array = new WORCUnitsofmeasureRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCUnitsofmeasureRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLUnitsofmeasureRecordList {
		public static implicit operator RLUnitsofmeasureRecordList(WORCUnitsofmeasureRecord[] array) {
			RLUnitsofmeasureRecordList rl = new RLUnitsofmeasureRecordList();
			if (array != null) {
				foreach(WORCUnitsofmeasureRecord val in array) {
					rl.Append((RCUnitsofmeasureRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCUnitsofmeasureRecord[](RLUnitsofmeasureRecordList rl) {
			WORCUnitsofmeasureRecord[] array = new WORCUnitsofmeasureRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCUnitsofmeasureRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLUnitsofmeasureRecordList {
		public static implicit operator RLUnitsofmeasureRecordList(WORLUnitsofmeasureRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLUnitsofmeasureRecordList(RLUnitsofmeasureRecordList rl) {
			return new WORLUnitsofmeasureRecordList(rl);
		}
		public static implicit operator WORCUnitsofmeasureRecord[](WORLUnitsofmeasureRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLUnitsofmeasureRecordList(WORCUnitsofmeasureRecord[] array) {
			return new WORLUnitsofmeasureRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLUnitsofmeasureList {
		public WORCUnitsofmeasureRecord[] Array;


		public WORLUnitsofmeasureList(WORCUnitsofmeasureRecord[] r) {
			if (r == null)
			Array = new WORCUnitsofmeasureRecord[0];
			else
			Array = r;
		}
		public WORLUnitsofmeasureList() {
			Array = new WORCUnitsofmeasureRecord[0];
		}

		public WORLUnitsofmeasureList(RLUnitsofmeasureList rl) {
			rl=(RLUnitsofmeasureList) rl.Duplicate();
			Array = new WORCUnitsofmeasureRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLUnitsofmeasureList {
		public static implicit operator RLUnitsofmeasureList(WORCUnitsofmeasureRecord[] array) {
			RLUnitsofmeasureList rl = new RLUnitsofmeasureList();
			if (array != null) {
				foreach(WORCUnitsofmeasureRecord val in array) {
					rl.Append((STUnitsofmeasureStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCUnitsofmeasureRecord[](RLUnitsofmeasureList rl) {
			WORCUnitsofmeasureRecord[] array = new WORCUnitsofmeasureRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STUnitsofmeasureStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLUnitsofmeasureList {
		public static implicit operator RLUnitsofmeasureList(WORLUnitsofmeasureList w) {
			return w.Array;
		}
		public static implicit operator WORLUnitsofmeasureList(RLUnitsofmeasureList rl) {
			return new WORLUnitsofmeasureList(rl);
		}
		public static implicit operator WORCUnitsofmeasureRecord[](WORLUnitsofmeasureList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLUnitsofmeasureList(WORCUnitsofmeasureRecord[] array) {
			return new WORLUnitsofmeasureList(array);
		}
	}
}

