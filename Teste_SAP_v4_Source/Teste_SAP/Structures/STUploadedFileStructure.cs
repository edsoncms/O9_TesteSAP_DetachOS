/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STUploadedFileStructure</code> that represents the Service Studio structure
	///  <code>UploadedFile</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STUploadedFileStructure: ISerializable, ITypedRecord<STUploadedFileStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdContent = GlobalObjectKey.Parse("sxSgg9oQRkKKlyKvezqjKg*9oz58Xlm_EmuzdAqGJJCew");
		private static readonly GlobalObjectKey IdFilename = GlobalObjectKey.Parse("sxSgg9oQRkKKlyKvezqjKg*w6yNmCRRakiQKEP1FUMQ8Q");
		private static readonly GlobalObjectKey IdFiletype = GlobalObjectKey.Parse("sxSgg9oQRkKKlyKvezqjKg*lfRcE+oq6kmWx7wPbgmaYQ");

		public static void EnsureInitialized() {}

		static STUploadedFileStructure() {
			global::ssTeste_SAP.STUploadedFileStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Content")]
		public byte[] ssContent;

		[System.Xml.Serialization.XmlElement("Filename")]
		public string ssFilename;

		[System.Xml.Serialization.XmlElement("Filetype")]
		public string ssFiletype;


		public BitArray OptimizedAttributes;

		public STUploadedFileStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssContent = new byte[] {};
			ssFilename = "";
			ssFiletype = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssContent = r.ReadBinaryData(index++, "UploadedFile.Content", new byte[] {}
			);
			ssFilename = r.ReadText(index++, "UploadedFile.Filename", "");
			ssFiletype = r.ReadText(index++, "UploadedFile.Filetype", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STUploadedFileStructure r) {
			this = r;
		}


		public static bool operator == (STUploadedFileStructure a, STUploadedFileStructure b) {
			if (!RuntimePlatformUtils.CompareByteArrays(a.ssContent, b.ssContent)) return false;
			if (a.ssFilename != b.ssFilename) return false;
			if (a.ssFiletype != b.ssFiletype) return false;
			return true;
		}

		public static bool operator != (STUploadedFileStructure a, STUploadedFileStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STUploadedFileStructure)) return false;
			return (this == (STUploadedFileStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssContent.GetHashCode()
				^ ssFilename.GetHashCode()
				^ ssFiletype.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STUploadedFileStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssContent = new byte[] {};
			ssFilename = "";
			ssFiletype = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssContent", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssContent' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssContent = (byte[]) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFilename", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFilename' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFilename = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssFiletype", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssFiletype' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssFiletype = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STUploadedFileStructure Duplicate() {
			STUploadedFileStructure t;
			if (this.ssContent != null) {
				t.ssContent = (byte[]) this.ssContent.Clone();
			} else {
				t.ssContent = null;
			}
			t.ssFilename = this.ssFilename;
			t.ssFiletype = this.ssFiletype;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Content")) VarValue.AppendAttribute(recordElem, "Content", ssContent, detailLevel, TypeKind.BinaryData); else VarValue.AppendOptimizedAttribute(recordElem, "Content");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Filename")) VarValue.AppendAttribute(recordElem, "Filename", ssFilename, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Filename");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Filetype")) VarValue.AppendAttribute(recordElem, "Filetype", ssFiletype, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Filetype");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "content") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Content")) variable.Value = ssContent; else variable.Optimized = true;
			} else if (head == "filename") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Filename")) variable.Value = ssFilename; else variable.Optimized = true;
			} else if (head == "filetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Filetype")) variable.Value = ssFiletype; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdContent) {
				return ssContent;
			} else if (key == IdFilename) {
				return ssFilename;
			} else if (key == IdFiletype) {
				return ssFiletype;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssContent = (byte[]) other.AttributeGet(IdContent);
			ssFilename = (string) other.AttributeGet(IdFilename);
			ssFiletype = (string) other.AttributeGet(IdFiletype);
		}
	} // STUploadedFileStructure
	/// <summary>
	/// Structure <code>RCUploadedFileRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUploadedFileRecord: ISerializable, ITypedRecord<RCUploadedFileRecord> {
		private static readonly GlobalObjectKey IdUploadedFile = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*XK0U2mX2qv3o+yK89DgOog");

		public static void EnsureInitialized() {}

		static RCUploadedFileRecord() {
			global::ssTeste_SAP.RCUploadedFileRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("UploadedFile")]
		public STUploadedFileStructure ssSTUploadedFile;


		public static implicit operator STUploadedFileStructure(RCUploadedFileRecord r) {
			return r.ssSTUploadedFile;
		}

		public static implicit operator RCUploadedFileRecord(STUploadedFileStructure r) {
			RCUploadedFileRecord res = new RCUploadedFileRecord(null);
			res.ssSTUploadedFile = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCUploadedFileRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTUploadedFile = new STUploadedFileStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTUploadedFile.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTUploadedFile.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUploadedFileRecord r) {
			this = r;
		}


		public static bool operator == (RCUploadedFileRecord a, RCUploadedFileRecord b) {
			if (a.ssSTUploadedFile != b.ssSTUploadedFile) return false;
			return true;
		}

		public static bool operator != (RCUploadedFileRecord a, RCUploadedFileRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUploadedFileRecord)) return false;
			return (this == (RCUploadedFileRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTUploadedFile.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUploadedFileRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTUploadedFile = new STUploadedFileStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTUploadedFile", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTUploadedFile' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTUploadedFile = (STUploadedFileStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTUploadedFile.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTUploadedFile.InternalRecursiveSave();
		}


		public RCUploadedFileRecord Duplicate() {
			RCUploadedFileRecord t;
			t.ssSTUploadedFile = (STUploadedFileStructure) this.ssSTUploadedFile.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTUploadedFile.ToXml(this, recordElem, "UploadedFile", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "uploadedfile") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UploadedFile")) variable.Value = ssSTUploadedFile; else variable.Optimized = true;
				variable.SetFieldName("uploadedfile");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUploadedFile) {
				return ssSTUploadedFile;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTUploadedFile.FillFromOther((IRecord) other.AttributeGet(IdUploadedFile));
		}
	} // RCUploadedFileRecord
	/// <summary>
	/// RecordList type <code>RLUploadedFileRecordList</code> that represents a record list of
	///  <code>UploadedFile</code>
	/// </summary>
	[Serializable()]
	public partial class RLUploadedFileRecordList: GenericRecordList<RCUploadedFileRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUploadedFileRecord GetElementDefaultValue() {
			return new RCUploadedFileRecord("");
		}

		public T[] ToArray<T>(Func<RCUploadedFileRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUploadedFileRecordList recordlist, Func<RCUploadedFileRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUploadedFileRecordList ToList<T>(T[] array, Func <T, RCUploadedFileRecord> converter) {
			RLUploadedFileRecordList result = new RLUploadedFileRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUploadedFileRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUploadedFileRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUploadedFileRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUploadedFileRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUploadedFileRecord> NewList() {
			return new RLUploadedFileRecordList();
		}


	} // RLUploadedFileRecordList
	/// <summary>
	/// RecordList type <code>RLUploadedFileList</code> that represents a record list of <code>Text, Text,
	///  BinaryData</code>
	/// </summary>
	[Serializable()]
	public partial class RLUploadedFileList: GenericRecordList<STUploadedFileStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STUploadedFileStructure GetElementDefaultValue() {
			return new STUploadedFileStructure("");
		}

		public T[] ToArray<T>(Func<STUploadedFileStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUploadedFileList recordlist, Func<STUploadedFileStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLUploadedFileList ToList<T>(T[] array, Func <T, STUploadedFileStructure> converter) {
			RLUploadedFileList result = new RLUploadedFileList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUploadedFileList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUploadedFileList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUploadedFileList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUploadedFileList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STUploadedFileStructure> NewList() {
			return new RLUploadedFileList();
		}


	} // RLUploadedFileList
}

namespace ssTeste_SAP {
	[XmlType("UploadedFile")]
	public class WORCUploadedFileRecord {
		[System.Xml.Serialization.XmlElement("Content", DataType= "base64Binary")]
		public byte[] varWSContent;

		[System.Xml.Serialization.XmlElement("Filename")]
		public string varWSFilename;

		[System.Xml.Serialization.XmlElement("Filetype")]
		public string varWSFiletype;

		public WORCUploadedFileRecord() {
			varWSContent = (byte[]) new byte[] {};
			varWSFilename = (string) "";
			varWSFiletype = (string) "";
		}

		public WORCUploadedFileRecord(STUploadedFileStructure r) {
			varWSContent = (byte[]) r.ssContent;
			varWSFilename = BaseAppUtils.RemoveControlChars(r.ssFilename);
			varWSFiletype = BaseAppUtils.RemoveControlChars(r.ssFiletype);
		}

		public static RLUploadedFileList ToRecordList(WORCUploadedFileRecord[] array) {
			RLUploadedFileList rl = new RLUploadedFileList();
			if (array != null) {
				foreach(WORCUploadedFileRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCUploadedFileRecord[] FromRecordList(RLUploadedFileList rl) {
			WORCUploadedFileRecord[] array = new WORCUploadedFileRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCUploadedFileRecord {
		public static implicit operator WORCUploadedFileRecord(RCUploadedFileRecord r) {
			return new WORCUploadedFileRecord(r.ssSTUploadedFile);
		}

		public static implicit operator RCUploadedFileRecord(WORCUploadedFileRecord w) {
			RCUploadedFileRecord r = new RCUploadedFileRecord("");
			if (w != null) {
				r.ssSTUploadedFile = w;
			}
			return r;
		}

	}

	partial struct STUploadedFileStructure {
		public static implicit operator WORCUploadedFileRecord(STUploadedFileStructure r) {
			return new WORCUploadedFileRecord(r);
		}

		public static implicit operator STUploadedFileStructure(WORCUploadedFileRecord w) {
			STUploadedFileStructure r = new STUploadedFileStructure("");
			if (w != null) {
				r.ssContent = ((byte[]) w.varWSContent ?? new byte[] {}
				);
				r.ssFilename = ((string) w.varWSFilename ?? "");
				r.ssFiletype = ((string) w.varWSFiletype ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLUploadedFileRecordList {
		public WORCUploadedFileRecord[] Array;


		public WORLUploadedFileRecordList(WORCUploadedFileRecord[] r) {
			if (r == null)
			Array = new WORCUploadedFileRecord[0];
			else
			Array = r;
		}
		public WORLUploadedFileRecordList() {
			Array = new WORCUploadedFileRecord[0];
		}

		public WORLUploadedFileRecordList(RLUploadedFileRecordList rl) {
			rl=(RLUploadedFileRecordList) rl.Duplicate();
			Array = new WORCUploadedFileRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCUploadedFileRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLUploadedFileRecordList {
		public static implicit operator RLUploadedFileRecordList(WORCUploadedFileRecord[] array) {
			RLUploadedFileRecordList rl = new RLUploadedFileRecordList();
			if (array != null) {
				foreach(WORCUploadedFileRecord val in array) {
					rl.Append((RCUploadedFileRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCUploadedFileRecord[](RLUploadedFileRecordList rl) {
			WORCUploadedFileRecord[] array = new WORCUploadedFileRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCUploadedFileRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLUploadedFileRecordList {
		public static implicit operator RLUploadedFileRecordList(WORLUploadedFileRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLUploadedFileRecordList(RLUploadedFileRecordList rl) {
			return new WORLUploadedFileRecordList(rl);
		}
		public static implicit operator WORCUploadedFileRecord[](WORLUploadedFileRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLUploadedFileRecordList(WORCUploadedFileRecord[] array) {
			return new WORLUploadedFileRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLUploadedFileList {
		public WORCUploadedFileRecord[] Array;


		public WORLUploadedFileList(WORCUploadedFileRecord[] r) {
			if (r == null)
			Array = new WORCUploadedFileRecord[0];
			else
			Array = r;
		}
		public WORLUploadedFileList() {
			Array = new WORCUploadedFileRecord[0];
		}

		public WORLUploadedFileList(RLUploadedFileList rl) {
			rl=(RLUploadedFileList) rl.Duplicate();
			Array = new WORCUploadedFileRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLUploadedFileList {
		public static implicit operator RLUploadedFileList(WORCUploadedFileRecord[] array) {
			RLUploadedFileList rl = new RLUploadedFileList();
			if (array != null) {
				foreach(WORCUploadedFileRecord val in array) {
					rl.Append((STUploadedFileStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCUploadedFileRecord[](RLUploadedFileList rl) {
			WORCUploadedFileRecord[] array = new WORCUploadedFileRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STUploadedFileStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLUploadedFileList {
		public static implicit operator RLUploadedFileList(WORLUploadedFileList w) {
			return w.Array;
		}
		public static implicit operator WORLUploadedFileList(RLUploadedFileList rl) {
			return new WORLUploadedFileList(rl);
		}
		public static implicit operator WORCUploadedFileRecord[](WORLUploadedFileList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLUploadedFileList(WORCUploadedFileRecord[] array) {
			return new WORLUploadedFileList(array);
		}
	}
}

