/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STXAxisFormatStructure</code> that represents the Service Studio structure
	///  <code>XAxisFormat</code> <p> Description: Information to format the X-axis on the chart.</p>
	/// </summary>
	[Serializable()]
	public partial struct STXAxisFormatStructure: ISerializable, ITypedRecord<STXAxisFormatStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdTitle = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*vy0biTeeC0WcEZdm2Se3_A");
		private static readonly GlobalObjectKey IdLabelsRotation = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*sdfV3+ORwkWatvsZFtqGkg");
		private static readonly GlobalObjectKey IdMinValue = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*LGV72l0tXEaQgi0f_VMOFA");
		private static readonly GlobalObjectKey IdMaxValue = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*iIq_f8RkskOLOUvcbyuHaQ");
		private static readonly GlobalObjectKey IdValuesType = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*8lZQagubCEigaiXgkxO8yg");

		public static void EnsureInitialized() {}

		static STXAxisFormatStructure() {
			global::ssTeste_SAP.STXAxisFormatStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Title")]
		public string ssTitle;

		[System.Xml.Serialization.XmlElement("LabelsRotation")]
		public int ssLabelsRotation;

		[System.Xml.Serialization.XmlElement("MinValue")]
		public string ssMinValue;

		[System.Xml.Serialization.XmlElement("MaxValue")]
		public string ssMaxValue;

		[System.Xml.Serialization.XmlElement("ValuesType")]
		public int ssValuesType;


		public BitArray OptimizedAttributes;

		public STXAxisFormatStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssTitle = "";
			ssLabelsRotation = 0;
			ssMinValue = "";
			ssMaxValue = "";
			ssValuesType = RsseSpaceCharts.DefaultValues.ReferenceStructure_XAxisFormat_ReferenceStructureAttribute_ValuesType;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssTitle = r.ReadText(index++, "XAxisFormat.Title", "");
			ssLabelsRotation = r.ReadInteger(index++, "XAxisFormat.LabelsRotation", 0);
			ssMinValue = r.ReadText(index++, "XAxisFormat.MinValue", "");
			ssMaxValue = r.ReadText(index++, "XAxisFormat.MaxValue", "");
			ssValuesType = r.ReadEntityReference(index++, "XAxisFormat.ValuesType", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STXAxisFormatStructure r) {
			this = r;
		}


		public static bool operator == (STXAxisFormatStructure a, STXAxisFormatStructure b) {
			if (a.ssTitle != b.ssTitle) return false;
			if (a.ssLabelsRotation != b.ssLabelsRotation) return false;
			if (a.ssMinValue != b.ssMinValue) return false;
			if (a.ssMaxValue != b.ssMaxValue) return false;
			if (a.ssValuesType != b.ssValuesType) return false;
			return true;
		}

		public static bool operator != (STXAxisFormatStructure a, STXAxisFormatStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STXAxisFormatStructure)) return false;
			return (this == (STXAxisFormatStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssTitle.GetHashCode()
				^ ssLabelsRotation.GetHashCode()
				^ ssMinValue.GetHashCode()
				^ ssMaxValue.GetHashCode()
				^ ssValuesType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STXAxisFormatStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssTitle = "";
			ssLabelsRotation = 0;
			ssMinValue = "";
			ssMaxValue = "";
			ssValuesType = RsseSpaceCharts.DefaultValues.ReferenceStructure_XAxisFormat_ReferenceStructureAttribute_ValuesType;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssTitle", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTitle' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTitle = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssLabelsRotation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLabelsRotation' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLabelsRotation = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMinValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMinValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMinValue = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMaxValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaxValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaxValue = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValuesType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValuesType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValuesType = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STXAxisFormatStructure Duplicate() {
			STXAxisFormatStructure t;
			t.ssTitle = this.ssTitle;
			t.ssLabelsRotation = this.ssLabelsRotation;
			t.ssMinValue = this.ssMinValue;
			t.ssMaxValue = this.ssMaxValue;
			t.ssValuesType = this.ssValuesType;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Title")) VarValue.AppendAttribute(recordElem, "Title", ssTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Title");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".LabelsRotation")) VarValue.AppendAttribute(recordElem, "LabelsRotation", ssLabelsRotation, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "LabelsRotation");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MinValue")) VarValue.AppendAttribute(recordElem, "MinValue", ssMinValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MinValue");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MaxValue")) VarValue.AppendAttribute(recordElem, "MaxValue", ssMaxValue, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MaxValue");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ValuesType")) VarValue.AppendAttribute(recordElem, "ValuesType", ssValuesType, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "ValuesType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "title") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Title")) variable.Value = ssTitle; else variable.Optimized = true;
			} else if (head == "labelsrotation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".LabelsRotation")) variable.Value = ssLabelsRotation; else variable.Optimized = true;
			} else if (head == "minvalue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MinValue")) variable.Value = ssMinValue; else variable.Optimized = true;
			} else if (head == "maxvalue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MaxValue")) variable.Value = ssMaxValue; else variable.Optimized = true;
			} else if (head == "valuestype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ValuesType")) variable.Value = ssValuesType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTitle) {
				return ssTitle;
			} else if (key == IdLabelsRotation) {
				return ssLabelsRotation;
			} else if (key == IdMinValue) {
				return ssMinValue;
			} else if (key == IdMaxValue) {
				return ssMaxValue;
			} else if (key == IdValuesType) {
				return ssValuesType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssTitle = (string) other.AttributeGet(IdTitle);
			ssLabelsRotation = (int) other.AttributeGet(IdLabelsRotation);
			ssMinValue = (string) other.AttributeGet(IdMinValue);
			ssMaxValue = (string) other.AttributeGet(IdMaxValue);
			ssValuesType = (int) other.AttributeGet(IdValuesType);
		}
	} // STXAxisFormatStructure
	/// <summary>
	/// Structure <code>RCXAxisFormatRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCXAxisFormatRecord: ISerializable, ITypedRecord<RCXAxisFormatRecord> {
		private static readonly GlobalObjectKey IdXAxisFormat = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*+BH1B_hI8td8RZWJIMJJcg");

		public static void EnsureInitialized() {}

		static RCXAxisFormatRecord() {
			global::ssTeste_SAP.RCXAxisFormatRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("XAxisFormat")]
		public STXAxisFormatStructure ssSTXAxisFormat;


		public static implicit operator STXAxisFormatStructure(RCXAxisFormatRecord r) {
			return r.ssSTXAxisFormat;
		}

		public static implicit operator RCXAxisFormatRecord(STXAxisFormatStructure r) {
			RCXAxisFormatRecord res = new RCXAxisFormatRecord(null);
			res.ssSTXAxisFormat = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCXAxisFormatRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTXAxisFormat = new STXAxisFormatStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTXAxisFormat.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTXAxisFormat.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCXAxisFormatRecord r) {
			this = r;
		}


		public static bool operator == (RCXAxisFormatRecord a, RCXAxisFormatRecord b) {
			if (a.ssSTXAxisFormat != b.ssSTXAxisFormat) return false;
			return true;
		}

		public static bool operator != (RCXAxisFormatRecord a, RCXAxisFormatRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCXAxisFormatRecord)) return false;
			return (this == (RCXAxisFormatRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTXAxisFormat.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCXAxisFormatRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTXAxisFormat = new STXAxisFormatStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTXAxisFormat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTXAxisFormat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTXAxisFormat = (STXAxisFormatStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTXAxisFormat.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTXAxisFormat.InternalRecursiveSave();
		}


		public RCXAxisFormatRecord Duplicate() {
			RCXAxisFormatRecord t;
			t.ssSTXAxisFormat = (STXAxisFormatStructure) this.ssSTXAxisFormat.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTXAxisFormat.ToXml(this, recordElem, "XAxisFormat", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "xaxisformat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".XAxisFormat")) variable.Value = ssSTXAxisFormat; else variable.Optimized = true;
				variable.SetFieldName("xaxisformat");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdXAxisFormat) {
				return ssSTXAxisFormat;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTXAxisFormat.FillFromOther((IRecord) other.AttributeGet(IdXAxisFormat));
		}
	} // RCXAxisFormatRecord
	/// <summary>
	/// RecordList type <code>RLXAxisFormatRecordList</code> that represents a record list of
	///  <code>XAxisFormat</code>
	/// </summary>
	[Serializable()]
	public partial class RLXAxisFormatRecordList: GenericRecordList<RCXAxisFormatRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCXAxisFormatRecord GetElementDefaultValue() {
			return new RCXAxisFormatRecord("");
		}

		public T[] ToArray<T>(Func<RCXAxisFormatRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLXAxisFormatRecordList recordlist, Func<RCXAxisFormatRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLXAxisFormatRecordList ToList<T>(T[] array, Func <T, RCXAxisFormatRecord> converter) {
			RLXAxisFormatRecordList result = new RLXAxisFormatRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLXAxisFormatRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLXAxisFormatRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLXAxisFormatRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLXAxisFormatRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCXAxisFormatRecord> NewList() {
			return new RLXAxisFormatRecordList();
		}


	} // RLXAxisFormatRecordList
	/// <summary>
	/// RecordList type <code>RLXAxisFormatList</code> that represents a record list of
	///  <code>XAxisValuesTypeIdentifier, Text, Text, Text, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLXAxisFormatList: GenericRecordList<STXAxisFormatStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STXAxisFormatStructure GetElementDefaultValue() {
			return new STXAxisFormatStructure("");
		}

		public T[] ToArray<T>(Func<STXAxisFormatStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLXAxisFormatList recordlist, Func<STXAxisFormatStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLXAxisFormatList ToList<T>(T[] array, Func <T, STXAxisFormatStructure> converter) {
			RLXAxisFormatList result = new RLXAxisFormatList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLXAxisFormatList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLXAxisFormatList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLXAxisFormatList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLXAxisFormatList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STXAxisFormatStructure> NewList() {
			return new RLXAxisFormatList();
		}


	} // RLXAxisFormatList
}

namespace ssTeste_SAP {
	[XmlType("XAxisFormat")]
	public class WORCXAxisFormatRecord {
		[System.Xml.Serialization.XmlElement("Title")]
		public string varWSTitle;

		[System.Xml.Serialization.XmlElement("LabelsRotation")]
		public int varWSLabelsRotation;

		[System.Xml.Serialization.XmlElement("MinValue")]
		public string varWSMinValue;

		[System.Xml.Serialization.XmlElement("MaxValue")]
		public string varWSMaxValue;

		[System.Xml.Serialization.XmlElement("ValuesType")]
		public int varWSValuesType;

		public WORCXAxisFormatRecord() {
			varWSTitle = (string) "";
			varWSLabelsRotation = (int) 0;
			varWSMinValue = (string) "";
			varWSMaxValue = (string) "";
			varWSValuesType = (int) RsseSpaceCharts.DefaultValues.ReferenceStructure_XAxisFormat_ReferenceStructureAttribute_ValuesType;
		}

		public WORCXAxisFormatRecord(STXAxisFormatStructure r) {
			varWSTitle = BaseAppUtils.RemoveControlChars(r.ssTitle);
			varWSLabelsRotation = (int) r.ssLabelsRotation;
			varWSMinValue = BaseAppUtils.RemoveControlChars(r.ssMinValue);
			varWSMaxValue = BaseAppUtils.RemoveControlChars(r.ssMaxValue);
			varWSValuesType = (int) r.ssValuesType;
		}

		public static RLXAxisFormatList ToRecordList(WORCXAxisFormatRecord[] array) {
			RLXAxisFormatList rl = new RLXAxisFormatList();
			if (array != null) {
				foreach(WORCXAxisFormatRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCXAxisFormatRecord[] FromRecordList(RLXAxisFormatList rl) {
			WORCXAxisFormatRecord[] array = new WORCXAxisFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCXAxisFormatRecord {
		public static implicit operator WORCXAxisFormatRecord(RCXAxisFormatRecord r) {
			return new WORCXAxisFormatRecord(r.ssSTXAxisFormat);
		}

		public static implicit operator RCXAxisFormatRecord(WORCXAxisFormatRecord w) {
			RCXAxisFormatRecord r = new RCXAxisFormatRecord("");
			if (w != null) {
				r.ssSTXAxisFormat = w;
			}
			return r;
		}

	}

	partial struct STXAxisFormatStructure {
		public static implicit operator WORCXAxisFormatRecord(STXAxisFormatStructure r) {
			return new WORCXAxisFormatRecord(r);
		}

		public static implicit operator STXAxisFormatStructure(WORCXAxisFormatRecord w) {
			STXAxisFormatStructure r = new STXAxisFormatStructure("");
			if (w != null) {
				r.ssTitle = ((string) w.varWSTitle ?? "");
				r.ssLabelsRotation = (int) w.varWSLabelsRotation;
				r.ssMinValue = ((string) w.varWSMinValue ?? "");
				r.ssMaxValue = ((string) w.varWSMaxValue ?? "");
				r.ssValuesType = (int) w.varWSValuesType;
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLXAxisFormatRecordList {
		public WORCXAxisFormatRecord[] Array;


		public WORLXAxisFormatRecordList(WORCXAxisFormatRecord[] r) {
			if (r == null)
			Array = new WORCXAxisFormatRecord[0];
			else
			Array = r;
		}
		public WORLXAxisFormatRecordList() {
			Array = new WORCXAxisFormatRecord[0];
		}

		public WORLXAxisFormatRecordList(RLXAxisFormatRecordList rl) {
			rl=(RLXAxisFormatRecordList) rl.Duplicate();
			Array = new WORCXAxisFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCXAxisFormatRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLXAxisFormatRecordList {
		public static implicit operator RLXAxisFormatRecordList(WORCXAxisFormatRecord[] array) {
			RLXAxisFormatRecordList rl = new RLXAxisFormatRecordList();
			if (array != null) {
				foreach(WORCXAxisFormatRecord val in array) {
					rl.Append((RCXAxisFormatRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCXAxisFormatRecord[](RLXAxisFormatRecordList rl) {
			WORCXAxisFormatRecord[] array = new WORCXAxisFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCXAxisFormatRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLXAxisFormatRecordList {
		public static implicit operator RLXAxisFormatRecordList(WORLXAxisFormatRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLXAxisFormatRecordList(RLXAxisFormatRecordList rl) {
			return new WORLXAxisFormatRecordList(rl);
		}
		public static implicit operator WORCXAxisFormatRecord[](WORLXAxisFormatRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLXAxisFormatRecordList(WORCXAxisFormatRecord[] array) {
			return new WORLXAxisFormatRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLXAxisFormatList {
		public WORCXAxisFormatRecord[] Array;


		public WORLXAxisFormatList(WORCXAxisFormatRecord[] r) {
			if (r == null)
			Array = new WORCXAxisFormatRecord[0];
			else
			Array = r;
		}
		public WORLXAxisFormatList() {
			Array = new WORCXAxisFormatRecord[0];
		}

		public WORLXAxisFormatList(RLXAxisFormatList rl) {
			rl=(RLXAxisFormatList) rl.Duplicate();
			Array = new WORCXAxisFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLXAxisFormatList {
		public static implicit operator RLXAxisFormatList(WORCXAxisFormatRecord[] array) {
			RLXAxisFormatList rl = new RLXAxisFormatList();
			if (array != null) {
				foreach(WORCXAxisFormatRecord val in array) {
					rl.Append((STXAxisFormatStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCXAxisFormatRecord[](RLXAxisFormatList rl) {
			WORCXAxisFormatRecord[] array = new WORCXAxisFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STXAxisFormatStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLXAxisFormatList {
		public static implicit operator RLXAxisFormatList(WORLXAxisFormatList w) {
			return w.Array;
		}
		public static implicit operator WORLXAxisFormatList(RLXAxisFormatList rl) {
			return new WORLXAxisFormatList(rl);
		}
		public static implicit operator WORCXAxisFormatRecord[](WORLXAxisFormatList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLXAxisFormatList(WORCXAxisFormatRecord[] array) {
			return new WORLXAxisFormatList(array);
		}
	}
}

