/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STYAxisFormatStructure</code> that represents the Service Studio structure
	///  <code>YAxisFormat</code> <p> Description: Information to format the Y-axis on the chart.</p>
	/// </summary>
	[Serializable()]
	public partial struct STYAxisFormatStructure: ISerializable, ITypedRecord<STYAxisFormatStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdTitle = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*jN+us0EV0UG_uRXMENX13w");
		private static readonly GlobalObjectKey IdMinValue = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*IpBRladvb0m4FqmqBKFXXg");
		private static readonly GlobalObjectKey IdMaxValue = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*6dlj9QPEjkuSItNTkwme_Q");
		private static readonly GlobalObjectKey IdValuesPrefix = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*WQVLF9kRU0ufCFh32_7acA");
		private static readonly GlobalObjectKey IdValuesSuffix = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*nSdeVCpk9kqEolNoyf9YeQ");
		private static readonly GlobalObjectKey IdGridLineStep = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*t+MiIFVNa0ul4RQ7REVHrg");

		public static void EnsureInitialized() {}

		static STYAxisFormatStructure() {
			global::ssTeste_SAP.STYAxisFormatStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Title")]
		public string ssTitle;

		[System.Xml.Serialization.XmlElement("MinValue")]
		public decimal ssMinValue;

		[System.Xml.Serialization.XmlElement("MaxValue")]
		public decimal ssMaxValue;

		[System.Xml.Serialization.XmlElement("ValuesPrefix")]
		public string ssValuesPrefix;

		[System.Xml.Serialization.XmlElement("ValuesSuffix")]
		public string ssValuesSuffix;

		[System.Xml.Serialization.XmlElement("GridLineStep")]
		public decimal ssGridLineStep;


		public BitArray OptimizedAttributes;

		public STYAxisFormatStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssTitle = "";
			ssMinValue = ((decimal) -2147483647);
			ssMaxValue = ((decimal) -2147483647);
			ssValuesPrefix = "";
			ssValuesSuffix = "";
			ssGridLineStep = ((decimal) -2147483647);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssTitle = r.ReadText(index++, "YAxisFormat.Title", "");
			ssMinValue = r.ReadDecimal(index++, "YAxisFormat.MinValue", 0.0M);
			ssMaxValue = r.ReadDecimal(index++, "YAxisFormat.MaxValue", 0.0M);
			ssValuesPrefix = r.ReadText(index++, "YAxisFormat.ValuesPrefix", "");
			ssValuesSuffix = r.ReadText(index++, "YAxisFormat.ValuesSuffix", "");
			ssGridLineStep = r.ReadDecimal(index++, "YAxisFormat.GridLineStep", 0.0M);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STYAxisFormatStructure r) {
			this = r;
		}


		public static bool operator == (STYAxisFormatStructure a, STYAxisFormatStructure b) {
			if (a.ssTitle != b.ssTitle) return false;
			if (a.ssMinValue != b.ssMinValue) return false;
			if (a.ssMaxValue != b.ssMaxValue) return false;
			if (a.ssValuesPrefix != b.ssValuesPrefix) return false;
			if (a.ssValuesSuffix != b.ssValuesSuffix) return false;
			if (a.ssGridLineStep != b.ssGridLineStep) return false;
			return true;
		}

		public static bool operator != (STYAxisFormatStructure a, STYAxisFormatStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STYAxisFormatStructure)) return false;
			return (this == (STYAxisFormatStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssTitle.GetHashCode()
				^ ssMinValue.GetHashCode()
				^ ssMaxValue.GetHashCode()
				^ ssValuesPrefix.GetHashCode()
				^ ssValuesSuffix.GetHashCode()
				^ ssGridLineStep.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STYAxisFormatStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssTitle = "";
			ssMinValue = ((decimal) -2147483647);
			ssMaxValue = ((decimal) -2147483647);
			ssValuesPrefix = "";
			ssValuesSuffix = "";
			ssGridLineStep = ((decimal) -2147483647);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssTitle", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTitle' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTitle = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMinValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMinValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMinValue = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMaxValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMaxValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMaxValue = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValuesPrefix", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValuesPrefix' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValuesPrefix = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValuesSuffix", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValuesSuffix' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValuesSuffix = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssGridLineStep", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssGridLineStep' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssGridLineStep = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STYAxisFormatStructure Duplicate() {
			STYAxisFormatStructure t;
			t.ssTitle = this.ssTitle;
			t.ssMinValue = this.ssMinValue;
			t.ssMaxValue = this.ssMaxValue;
			t.ssValuesPrefix = this.ssValuesPrefix;
			t.ssValuesSuffix = this.ssValuesSuffix;
			t.ssGridLineStep = this.ssGridLineStep;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Title")) VarValue.AppendAttribute(recordElem, "Title", ssTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Title");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MinValue")) VarValue.AppendAttribute(recordElem, "MinValue", ssMinValue, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "MinValue");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MaxValue")) VarValue.AppendAttribute(recordElem, "MaxValue", ssMaxValue, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "MaxValue");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ValuesPrefix")) VarValue.AppendAttribute(recordElem, "ValuesPrefix", ssValuesPrefix, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ValuesPrefix");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ValuesSuffix")) VarValue.AppendAttribute(recordElem, "ValuesSuffix", ssValuesSuffix, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "ValuesSuffix");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".GridLineStep")) VarValue.AppendAttribute(recordElem, "GridLineStep", ssGridLineStep, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "GridLineStep");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "title") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Title")) variable.Value = ssTitle; else variable.Optimized = true;
			} else if (head == "minvalue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MinValue")) variable.Value = ssMinValue; else variable.Optimized = true;
			} else if (head == "maxvalue") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MaxValue")) variable.Value = ssMaxValue; else variable.Optimized = true;
			} else if (head == "valuesprefix") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ValuesPrefix")) variable.Value = ssValuesPrefix; else variable.Optimized = true;
			} else if (head == "valuessuffix") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ValuesSuffix")) variable.Value = ssValuesSuffix; else variable.Optimized = true;
			} else if (head == "gridlinestep") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".GridLineStep")) variable.Value = ssGridLineStep; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTitle) {
				return ssTitle;
			} else if (key == IdMinValue) {
				return ssMinValue;
			} else if (key == IdMaxValue) {
				return ssMaxValue;
			} else if (key == IdValuesPrefix) {
				return ssValuesPrefix;
			} else if (key == IdValuesSuffix) {
				return ssValuesSuffix;
			} else if (key == IdGridLineStep) {
				return ssGridLineStep;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssTitle = (string) other.AttributeGet(IdTitle);
			ssMinValue = (decimal) other.AttributeGet(IdMinValue);
			ssMaxValue = (decimal) other.AttributeGet(IdMaxValue);
			ssValuesPrefix = (string) other.AttributeGet(IdValuesPrefix);
			ssValuesSuffix = (string) other.AttributeGet(IdValuesSuffix);
			ssGridLineStep = (decimal) other.AttributeGet(IdGridLineStep);
		}
	} // STYAxisFormatStructure
	/// <summary>
	/// Structure <code>RCYAxisFormatRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCYAxisFormatRecord: ISerializable, ITypedRecord<RCYAxisFormatRecord> {
		private static readonly GlobalObjectKey IdYAxisFormat = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*5UD+F_fnamCS41Uu2n8Rew");

		public static void EnsureInitialized() {}

		static RCYAxisFormatRecord() {
			global::ssTeste_SAP.RCYAxisFormatRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("YAxisFormat")]
		public STYAxisFormatStructure ssSTYAxisFormat;


		public static implicit operator STYAxisFormatStructure(RCYAxisFormatRecord r) {
			return r.ssSTYAxisFormat;
		}

		public static implicit operator RCYAxisFormatRecord(STYAxisFormatStructure r) {
			RCYAxisFormatRecord res = new RCYAxisFormatRecord(null);
			res.ssSTYAxisFormat = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCYAxisFormatRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTYAxisFormat = new STYAxisFormatStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTYAxisFormat.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTYAxisFormat.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCYAxisFormatRecord r) {
			this = r;
		}


		public static bool operator == (RCYAxisFormatRecord a, RCYAxisFormatRecord b) {
			if (a.ssSTYAxisFormat != b.ssSTYAxisFormat) return false;
			return true;
		}

		public static bool operator != (RCYAxisFormatRecord a, RCYAxisFormatRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCYAxisFormatRecord)) return false;
			return (this == (RCYAxisFormatRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTYAxisFormat.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCYAxisFormatRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTYAxisFormat = new STYAxisFormatStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTYAxisFormat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTYAxisFormat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTYAxisFormat = (STYAxisFormatStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTYAxisFormat.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTYAxisFormat.InternalRecursiveSave();
		}


		public RCYAxisFormatRecord Duplicate() {
			RCYAxisFormatRecord t;
			t.ssSTYAxisFormat = (STYAxisFormatStructure) this.ssSTYAxisFormat.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTYAxisFormat.ToXml(this, recordElem, "YAxisFormat", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "yaxisformat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".YAxisFormat")) variable.Value = ssSTYAxisFormat; else variable.Optimized = true;
				variable.SetFieldName("yaxisformat");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdYAxisFormat) {
				return ssSTYAxisFormat;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTYAxisFormat.FillFromOther((IRecord) other.AttributeGet(IdYAxisFormat));
		}
	} // RCYAxisFormatRecord
	/// <summary>
	/// RecordList type <code>RLYAxisFormatRecordList</code> that represents a record list of
	///  <code>YAxisFormat</code>
	/// </summary>
	[Serializable()]
	public partial class RLYAxisFormatRecordList: GenericRecordList<RCYAxisFormatRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCYAxisFormatRecord GetElementDefaultValue() {
			return new RCYAxisFormatRecord("");
		}

		public T[] ToArray<T>(Func<RCYAxisFormatRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLYAxisFormatRecordList recordlist, Func<RCYAxisFormatRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLYAxisFormatRecordList ToList<T>(T[] array, Func <T, RCYAxisFormatRecord> converter) {
			RLYAxisFormatRecordList result = new RLYAxisFormatRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLYAxisFormatRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLYAxisFormatRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLYAxisFormatRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLYAxisFormatRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCYAxisFormatRecord> NewList() {
			return new RLYAxisFormatRecordList();
		}


	} // RLYAxisFormatRecordList
	/// <summary>
	/// RecordList type <code>RLYAxisFormatList</code> that represents a record list of <code>Text, Text,
	///  Text, Decimal, Decimal, Decimal</code>
	/// </summary>
	[Serializable()]
	public partial class RLYAxisFormatList: GenericRecordList<STYAxisFormatStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STYAxisFormatStructure GetElementDefaultValue() {
			return new STYAxisFormatStructure("");
		}

		public T[] ToArray<T>(Func<STYAxisFormatStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLYAxisFormatList recordlist, Func<STYAxisFormatStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLYAxisFormatList ToList<T>(T[] array, Func <T, STYAxisFormatStructure> converter) {
			RLYAxisFormatList result = new RLYAxisFormatList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLYAxisFormatList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLYAxisFormatList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLYAxisFormatList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLYAxisFormatList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STYAxisFormatStructure> NewList() {
			return new RLYAxisFormatList();
		}


	} // RLYAxisFormatList
}

namespace ssTeste_SAP {
	[XmlType("YAxisFormat")]
	public class WORCYAxisFormatRecord {
		[System.Xml.Serialization.XmlElement("Title")]
		public string varWSTitle;

		[System.Xml.Serialization.XmlElement("MinValue")]
		public decimal varWSMinValue;

		[System.Xml.Serialization.XmlElement("MaxValue")]
		public decimal varWSMaxValue;

		[System.Xml.Serialization.XmlElement("ValuesPrefix")]
		public string varWSValuesPrefix;

		[System.Xml.Serialization.XmlElement("ValuesSuffix")]
		public string varWSValuesSuffix;

		[System.Xml.Serialization.XmlElement("GridLineStep")]
		public decimal varWSGridLineStep;

		public WORCYAxisFormatRecord() {
			varWSTitle = (string) "";
			varWSMinValue = (decimal) ((decimal) -2147483647);
			varWSMaxValue = (decimal) ((decimal) -2147483647);
			varWSValuesPrefix = (string) "";
			varWSValuesSuffix = (string) "";
			varWSGridLineStep = (decimal) ((decimal) -2147483647);
		}

		public WORCYAxisFormatRecord(STYAxisFormatStructure r) {
			varWSTitle = BaseAppUtils.RemoveControlChars(r.ssTitle);
			varWSMinValue = (decimal) r.ssMinValue;
			varWSMaxValue = (decimal) r.ssMaxValue;
			varWSValuesPrefix = BaseAppUtils.RemoveControlChars(r.ssValuesPrefix);
			varWSValuesSuffix = BaseAppUtils.RemoveControlChars(r.ssValuesSuffix);
			varWSGridLineStep = (decimal) r.ssGridLineStep;
		}

		public static RLYAxisFormatList ToRecordList(WORCYAxisFormatRecord[] array) {
			RLYAxisFormatList rl = new RLYAxisFormatList();
			if (array != null) {
				foreach(WORCYAxisFormatRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCYAxisFormatRecord[] FromRecordList(RLYAxisFormatList rl) {
			WORCYAxisFormatRecord[] array = new WORCYAxisFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCYAxisFormatRecord {
		public static implicit operator WORCYAxisFormatRecord(RCYAxisFormatRecord r) {
			return new WORCYAxisFormatRecord(r.ssSTYAxisFormat);
		}

		public static implicit operator RCYAxisFormatRecord(WORCYAxisFormatRecord w) {
			RCYAxisFormatRecord r = new RCYAxisFormatRecord("");
			if (w != null) {
				r.ssSTYAxisFormat = w;
			}
			return r;
		}

	}

	partial struct STYAxisFormatStructure {
		public static implicit operator WORCYAxisFormatRecord(STYAxisFormatStructure r) {
			return new WORCYAxisFormatRecord(r);
		}

		public static implicit operator STYAxisFormatStructure(WORCYAxisFormatRecord w) {
			STYAxisFormatStructure r = new STYAxisFormatStructure("");
			if (w != null) {
				r.ssTitle = ((string) w.varWSTitle ?? "");
				r.ssMinValue = (decimal) w.varWSMinValue;
				r.ssMaxValue = (decimal) w.varWSMaxValue;
				r.ssValuesPrefix = ((string) w.varWSValuesPrefix ?? "");
				r.ssValuesSuffix = ((string) w.varWSValuesSuffix ?? "");
				r.ssGridLineStep = (decimal) w.varWSGridLineStep;
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLYAxisFormatRecordList {
		public WORCYAxisFormatRecord[] Array;


		public WORLYAxisFormatRecordList(WORCYAxisFormatRecord[] r) {
			if (r == null)
			Array = new WORCYAxisFormatRecord[0];
			else
			Array = r;
		}
		public WORLYAxisFormatRecordList() {
			Array = new WORCYAxisFormatRecord[0];
		}

		public WORLYAxisFormatRecordList(RLYAxisFormatRecordList rl) {
			rl=(RLYAxisFormatRecordList) rl.Duplicate();
			Array = new WORCYAxisFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCYAxisFormatRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLYAxisFormatRecordList {
		public static implicit operator RLYAxisFormatRecordList(WORCYAxisFormatRecord[] array) {
			RLYAxisFormatRecordList rl = new RLYAxisFormatRecordList();
			if (array != null) {
				foreach(WORCYAxisFormatRecord val in array) {
					rl.Append((RCYAxisFormatRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCYAxisFormatRecord[](RLYAxisFormatRecordList rl) {
			WORCYAxisFormatRecord[] array = new WORCYAxisFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCYAxisFormatRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLYAxisFormatRecordList {
		public static implicit operator RLYAxisFormatRecordList(WORLYAxisFormatRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLYAxisFormatRecordList(RLYAxisFormatRecordList rl) {
			return new WORLYAxisFormatRecordList(rl);
		}
		public static implicit operator WORCYAxisFormatRecord[](WORLYAxisFormatRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLYAxisFormatRecordList(WORCYAxisFormatRecord[] array) {
			return new WORLYAxisFormatRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLYAxisFormatList {
		public WORCYAxisFormatRecord[] Array;


		public WORLYAxisFormatList(WORCYAxisFormatRecord[] r) {
			if (r == null)
			Array = new WORCYAxisFormatRecord[0];
			else
			Array = r;
		}
		public WORLYAxisFormatList() {
			Array = new WORCYAxisFormatRecord[0];
		}

		public WORLYAxisFormatList(RLYAxisFormatList rl) {
			rl=(RLYAxisFormatList) rl.Duplicate();
			Array = new WORCYAxisFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLYAxisFormatList {
		public static implicit operator RLYAxisFormatList(WORCYAxisFormatRecord[] array) {
			RLYAxisFormatList rl = new RLYAxisFormatList();
			if (array != null) {
				foreach(WORCYAxisFormatRecord val in array) {
					rl.Append((STYAxisFormatStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCYAxisFormatRecord[](RLYAxisFormatList rl) {
			WORCYAxisFormatRecord[] array = new WORCYAxisFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STYAxisFormatStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLYAxisFormatList {
		public static implicit operator RLYAxisFormatList(WORLYAxisFormatList w) {
			return w.Array;
		}
		public static implicit operator WORLYAxisFormatList(RLYAxisFormatList rl) {
			return new WORLYAxisFormatList(rl);
		}
		public static implicit operator WORCYAxisFormatRecord[](WORLYAxisFormatList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLYAxisFormatList(WORCYAxisFormatRecord[] array) {
			return new WORLYAxisFormatList(array);
		}
	}
}

