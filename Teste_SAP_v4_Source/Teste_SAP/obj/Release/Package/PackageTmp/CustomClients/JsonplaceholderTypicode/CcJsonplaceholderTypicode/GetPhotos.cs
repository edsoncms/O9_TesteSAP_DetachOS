/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Resources;
using System.IO;
using System.Net;
using System.Text;
using System.Data;
using System.Globalization;
using Newtonsoft.Json;

namespace ssTeste_SAP {
	public static partial class CcJsonplaceholderTypicode {
		/// <summary>
		/// Action: GetPhotos
		/// </summary>

		public static void ActionGetPhotos(HeContext heContext, ICcJsonplaceholderTypicodeCallbacks _callbacks, out RLGetPhotosResponseList outParamResponse) {
			outParamResponse = new RLGetPhotosResponseList();

			String __url = "";
			String __errorLogId = "";
			String __endpoint = null;
			String __message = null;
			String __detail = null;
			String __detailLabel = null;
			DateTime __startExecution = DateTime.Now;
			try {
				RestPluginRuntimeUtils.Configuration config = RestPluginRuntimeUtils.Configuration.GetCustomClientConfiguration("0e9f6ff2-075b-409e-a05f-e3d6d2cb508d", 94);
				StringBuilder httpTrace = new StringBuilder();
				bool failedRequest = false;
				try {
					string baseURL = config.Url.TrimEnd('/');
					if (baseURL == string.Empty) {
						baseURL = "https://jsonplaceholder.typicode.com";
					}
					string relativeUrl = "" + RestPluginRuntimeUtils.UrlEncode("") + "/" + RestPluginRuntimeUtils.UrlEncode("photos") + "";
					string httpMethod = "GET";
					var headers = new Dictionary<string, RestPluginRuntimeUtils.NameValue>();
					headers.Add("User-Agent", new RestPluginRuntimeUtils.NameValue("User-Agent", "OutSystemsPlatform"));
					string username = config.Username;
					string password = OutSystems.HubEdition.RuntimePlatform.Settings.DecryptString(config.Password);
					if (username != "" || password != "") {
						headers.Add("Authorization", new RestPluginRuntimeUtils.NameValue("Authorization", "Basic " + Convert.ToBase64String(Encoding.ASCII.GetBytes(username + ":" + password))));
					}
					var queryParams = new List<RestPluginRuntimeUtils.NameValue>();
					String url = baseURL + relativeUrl;
					for (int i = 0; i < queryParams.Count; i++) {
						url += (i == 0) ? "?": "&";
						url += RestPluginRuntimeUtils.UrlQueryEncode(queryParams[i] .Name) + "=" + RestPluginRuntimeUtils.UrlQueryEncode(queryParams[i] .Value);
					}
					__endpoint = baseURL + relativeUrl;
					var request = (HttpWebRequest) HttpWebRequest.Create(url);
					request.Method = httpMethod;
					request.Timeout = 100000;
					foreach(var header in headers.Values) {
						RestPluginRuntimeUtils.SetRequestHeader(request, header.Name, header.Value);
					}
					if (request.CookieContainer == null && request.Headers[HttpRequestHeader.Cookie] == null) {
						request.CookieContainer = new CookieContainer();
					}
					if (config.Trace) {
						httpTrace.AppendLine(request.Method + " " + request.RequestUri.ToString() + " HTTP/" + request.ProtocolVersion.ToString());
						foreach(var header in request.Headers.AllKeys) {
							httpTrace.AppendLine(header + ": " + request.Headers[header]);
						}
						if (request.ContentLength != -1) {
							httpTrace.AppendLine("Content-Length: " + request.ContentLength);
						}
						httpTrace.AppendLine();
						httpTrace.AppendLine();
					}

					HttpWebResponse response;

					try {
						response = (HttpWebResponse) request.GetResponse();
					} catch (WebException we) {
						response = (HttpWebResponse) we.Response;
						if (response == null) {
							throw;
						}
					}

					String responseText = String.Empty;
					byte[] responseArray = new byte[0];
					using(var responseContext = new OutSystems.Internal.REST.ResponseContext("GetPhotos", response)) {
						responseText = responseContext.GetText();
						responseArray = responseContext.GetBinary();
						if (config.Trace) {
							httpTrace.AppendLine("HTTP/" + response.ProtocolVersion + " " + ((int) response.StatusCode) + " " + response.StatusDescription);
							foreach(var headerName in response.Headers.AllKeys) {
								httpTrace.AppendLine(headerName + ": " + response.Headers[headerName]);
							}
							httpTrace.AppendLine();
							httpTrace.Append(responseText);
						}

					}

					int statusCode = (int) response.StatusCode;
					String statusLine = statusCode + " " + response.StatusDescription;
					var responseHeaders = new List<RestPluginRuntimeUtils.NameValue>();
					foreach(var headerName in response.Headers.AllKeys) {
						responseHeaders.Add(new RestPluginRuntimeUtils.NameValue(headerName, response.Headers[headerName]));
					}

					if (statusCode < 200 || statusCode >= 400) {
						throw new Exception(statusLine);
					}

					var deserializationMessages = new List<String>();

					RESTGetPhotosResponse[] responseHolder = null;

					try {
						responseHolder = JsonConvert.DeserializeObject<RESTGetPhotosResponse[] >(responseText, new JsonSerializerSettings {
							DefaultValueHandling = DefaultValueHandling.Ignore, DateTimeZoneHandling = DateTimeZoneHandling.Local, Error = (sender, args) => {
								String message = "Parsing '" + args.ErrorContext.Path + "': " + args.ErrorContext.Error.Message;
								if (!deserializationMessages.Contains(message)) {
									deserializationMessages.Add(message);
								}
								args.ErrorContext.Handled = true;
							}
						}
						);
					} catch (Exception e) {
						deserializationMessages.Add("Parsing failed for all attributes: " + e.Message);
					}

					if (responseHolder != null) {
						outParamResponse = RLGetPhotosResponseList.ToList(responseHolder, RESTGetPhotosResponse.ToStructure);
					}
					if (deserializationMessages.Any()) {
						var detail = new StringBuilder();
						detail.Append("Failed to parse response of the method 'GetPhotos' of the 'JsonplaceholderTypicode' REST API:\n");
						for (int maxErrorMessagesToShow = 3, currentPosition = 0; maxErrorMessagesToShow > 0 && currentPosition < deserializationMessages.Count; --maxErrorMessagesToShow, ++currentPosition) {
							detail.Append(deserializationMessages[currentPosition]);
							detail.Append("\n");
						}

						throw new Exception(detail.ToString());
					}
				} catch {
					failedRequest = true;
					throw;
				} finally {
					if (config.TraceAll || (config.TraceErrors && failedRequest)) {
						__message = "";
						__detail = httpTrace.ToString();
						__detailLabel = "HTTP Trace";
					}
				}
			} catch (Exception __ex) {
				__errorLogId = ErrorLog.LogApplicationError(__ex, heContext, "REST (Consume)");
				throw __ex;
			} finally {
				DateTime __instant = DateTime.Now;
				TimeSpan __duration = __instant.Subtract(__startExecution);
				if (heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterConsumedIntegrationExecuted("JsonplaceholderTypicode_GetPhotos", "c00df260-e440-44c7-81e1-9ff249bd7636",
					 "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP",
					 "REST (Consume)", (int) __duration.TotalMilliseconds, __instant,
					__endpoint); 
				}
				if (!String.IsNullOrEmpty(__errorLogId) ||
				(heContext.AppInfo != null && (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging))) {
					String __integrationLogId = IntegrationLog.StaticWrite(__instant,
					(int) __duration.TotalMilliseconds,
					null,
					__endpoint,
					 "JsonplaceholderTypicode.GetPhotos",
					 "REST (Consume)",
					(heContext.AppInfo != null ? heContext.AppInfo.eSpaceId: 0),
					(heContext.AppInfo != null && heContext.AppInfo.Tenant != null ? heContext.AppInfo.Tenant.Id: 0),
					__errorLogId,
					Environment.MachineName,
					false);
					if (!String.IsNullOrEmpty(__detail) ||
					!String.IsNullOrEmpty(__message)) {
						IntDetailLog.StaticWrite(__integrationLogId,
						__instant,
						(heContext.AppInfo != null && heContext.AppInfo.Tenant != null ? heContext.AppInfo.Tenant.Id: 0),
						__message,
						__detail,
						__detailLabel);
					}
				}
			}
		}
	}
}
