/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STExtensioninStructure</code> that represents the Service Studio structure
	///  <code>Extensionin</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STExtensioninStructure: ISerializable, ITypedRecord<STExtensioninStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdStructure = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*aUduKpINekqnOejdYtU2VQ");
		private static readonly GlobalObjectKey IdValuepart1 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*9zNJrKFTY0mj9cHQHxN8nQ");
		private static readonly GlobalObjectKey IdValuepart2 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*hBllNDzmxEyWsLlQgPYbfQ");
		private static readonly GlobalObjectKey IdValuepart3 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*jdq48reQDEKYHYE6hWLZag");
		private static readonly GlobalObjectKey IdValuepart4 = GlobalObjectKey.Parse("N2UIQTt6+k6ug6JI4E9zoQ*1CSNa6DByUiCs_gn9r0pLA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Structure")]
		public string ssStructure;

		[System.Xml.Serialization.XmlElement("Valuepart1")]
		public string ssValuepart1;

		[System.Xml.Serialization.XmlElement("Valuepart2")]
		public string ssValuepart2;

		[System.Xml.Serialization.XmlElement("Valuepart3")]
		public string ssValuepart3;

		[System.Xml.Serialization.XmlElement("Valuepart4")]
		public string ssValuepart4;


		public BitArray OptimizedAttributes;

		public STExtensioninStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssStructure = "";
			ssValuepart1 = "";
			ssValuepart2 = "";
			ssValuepart3 = "";
			ssValuepart4 = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssStructure = r.ReadText(index++, "Extensionin.Structure", "");
			ssValuepart1 = r.ReadText(index++, "Extensionin.Valuepart1", "");
			ssValuepart2 = r.ReadText(index++, "Extensionin.Valuepart2", "");
			ssValuepart3 = r.ReadText(index++, "Extensionin.Valuepart3", "");
			ssValuepart4 = r.ReadText(index++, "Extensionin.Valuepart4", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STExtensioninStructure r) {
			this = r;
		}


		public static bool operator == (STExtensioninStructure a, STExtensioninStructure b) {
			if (a.ssStructure != b.ssStructure) return false;
			if (a.ssValuepart1 != b.ssValuepart1) return false;
			if (a.ssValuepart2 != b.ssValuepart2) return false;
			if (a.ssValuepart3 != b.ssValuepart3) return false;
			if (a.ssValuepart4 != b.ssValuepart4) return false;
			return true;
		}

		public static bool operator != (STExtensioninStructure a, STExtensioninStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STExtensioninStructure)) return false;
			return (this == (STExtensioninStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssStructure.GetHashCode()
				^ ssValuepart1.GetHashCode()
				^ ssValuepart2.GetHashCode()
				^ ssValuepart3.GetHashCode()
				^ ssValuepart4.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STExtensioninStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssStructure = "";
			ssValuepart1 = "";
			ssValuepart2 = "";
			ssValuepart3 = "";
			ssValuepart4 = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssStructure", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssStructure' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssStructure = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValuepart1", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValuepart1' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValuepart1 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValuepart2", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValuepart2' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValuepart2 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValuepart3", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValuepart3' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValuepart3 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValuepart4", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValuepart4' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValuepart4 = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STExtensioninStructure Duplicate() {
			STExtensioninStructure t;
			t.ssStructure = this.ssStructure;
			t.ssValuepart1 = this.ssValuepart1;
			t.ssValuepart2 = this.ssValuepart2;
			t.ssValuepart3 = this.ssValuepart3;
			t.ssValuepart4 = this.ssValuepart4;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Structure")) VarValue.AppendAttribute(recordElem, "Structure", ssStructure, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Structure");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Valuepart1")) VarValue.AppendAttribute(recordElem, "Valuepart1", ssValuepart1, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Valuepart1");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Valuepart2")) VarValue.AppendAttribute(recordElem, "Valuepart2", ssValuepart2, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Valuepart2");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Valuepart3")) VarValue.AppendAttribute(recordElem, "Valuepart3", ssValuepart3, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Valuepart3");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Valuepart4")) VarValue.AppendAttribute(recordElem, "Valuepart4", ssValuepart4, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Valuepart4");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "structure") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Structure")) variable.Value = ssStructure; else variable.Optimized = true;
			} else if (head == "valuepart1") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Valuepart1")) variable.Value = ssValuepart1; else variable.Optimized = true;
			} else if (head == "valuepart2") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Valuepart2")) variable.Value = ssValuepart2; else variable.Optimized = true;
			} else if (head == "valuepart3") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Valuepart3")) variable.Value = ssValuepart3; else variable.Optimized = true;
			} else if (head == "valuepart4") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Valuepart4")) variable.Value = ssValuepart4; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdStructure) {
				return ssStructure;
			} else if (key == IdValuepart1) {
				return ssValuepart1;
			} else if (key == IdValuepart2) {
				return ssValuepart2;
			} else if (key == IdValuepart3) {
				return ssValuepart3;
			} else if (key == IdValuepart4) {
				return ssValuepart4;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssStructure = (string) other.AttributeGet(IdStructure);
			ssValuepart1 = (string) other.AttributeGet(IdValuepart1);
			ssValuepart2 = (string) other.AttributeGet(IdValuepart2);
			ssValuepart3 = (string) other.AttributeGet(IdValuepart3);
			ssValuepart4 = (string) other.AttributeGet(IdValuepart4);
		}
	} // STExtensioninStructure
	/// <summary>
	/// Structure <code>RCExtensioninRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCExtensioninRecord: ISerializable, ITypedRecord<RCExtensioninRecord> {
		private static readonly GlobalObjectKey IdExtensionin = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*SUtszItnZAdCpQqRkUHjVw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Extensionin")]
		public STExtensioninStructure ssSTExtensionin;


		public static implicit operator STExtensioninStructure(RCExtensioninRecord r) {
			return r.ssSTExtensionin;
		}

		public static implicit operator RCExtensioninRecord(STExtensioninStructure r) {
			RCExtensioninRecord res = new RCExtensioninRecord(null);
			res.ssSTExtensionin = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCExtensioninRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTExtensionin = new STExtensioninStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTExtensionin.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTExtensionin.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCExtensioninRecord r) {
			this = r;
		}


		public static bool operator == (RCExtensioninRecord a, RCExtensioninRecord b) {
			if (a.ssSTExtensionin != b.ssSTExtensionin) return false;
			return true;
		}

		public static bool operator != (RCExtensioninRecord a, RCExtensioninRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCExtensioninRecord)) return false;
			return (this == (RCExtensioninRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTExtensionin.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCExtensioninRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTExtensionin = new STExtensioninStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTExtensionin", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTExtensionin' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTExtensionin = (STExtensioninStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTExtensionin.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTExtensionin.InternalRecursiveSave();
		}


		public RCExtensioninRecord Duplicate() {
			RCExtensioninRecord t;
			t.ssSTExtensionin = (STExtensioninStructure) this.ssSTExtensionin.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTExtensionin.ToXml(this, recordElem, "Extensionin", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "extensionin") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Extensionin")) variable.Value = ssSTExtensionin; else variable.Optimized = true;
				variable.SetFieldName("extensionin");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdExtensionin) {
				return ssSTExtensionin;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTExtensionin.FillFromOther((IRecord) other.AttributeGet(IdExtensionin));
		}
	} // RCExtensioninRecord
	/// <summary>
	/// RecordList type <code>RLExtensioninRecordList</code> that represents a record list of
	///  <code>Extensionin</code>
	/// </summary>
	[Serializable()]
	public partial class RLExtensioninRecordList: GenericRecordList<RCExtensioninRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCExtensioninRecord GetElementDefaultValue() {
			return new RCExtensioninRecord("");
		}

		public T[] ToArray<T>(Func<RCExtensioninRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLExtensioninRecordList recordlist, Func<RCExtensioninRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLExtensioninRecordList ToList<T>(T[] array, Func <T, RCExtensioninRecord> converter) {
			RLExtensioninRecordList result = new RLExtensioninRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLExtensioninRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLExtensioninRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLExtensioninRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLExtensioninRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCExtensioninRecord> NewList() {
			return new RLExtensioninRecordList();
		}


	} // RLExtensioninRecordList
	/// <summary>
	/// RecordList type <code>RLExtensioninList</code> that represents a record list of <code>Text, Text,
	///  Text, Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLExtensioninList: GenericRecordList<STExtensioninStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STExtensioninStructure GetElementDefaultValue() {
			return new STExtensioninStructure("");
		}

		public T[] ToArray<T>(Func<STExtensioninStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLExtensioninList recordlist, Func<STExtensioninStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLExtensioninList ToList<T>(T[] array, Func <T, STExtensioninStructure> converter) {
			RLExtensioninList result = new RLExtensioninList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLExtensioninList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLExtensioninList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLExtensioninList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLExtensioninList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STExtensioninStructure> NewList() {
			return new RLExtensioninList();
		}


	} // RLExtensioninList
}

namespace ssTeste_SAP {
	[XmlType("Extensionin")]
	public class WORCExtensioninRecord {
		[System.Xml.Serialization.XmlElement("Structure")]
		public string varWSStructure;

		[System.Xml.Serialization.XmlElement("Valuepart1")]
		public string varWSValuepart1;

		[System.Xml.Serialization.XmlElement("Valuepart2")]
		public string varWSValuepart2;

		[System.Xml.Serialization.XmlElement("Valuepart3")]
		public string varWSValuepart3;

		[System.Xml.Serialization.XmlElement("Valuepart4")]
		public string varWSValuepart4;

		public WORCExtensioninRecord() {
			varWSStructure = (string) "";
			varWSValuepart1 = (string) "";
			varWSValuepart2 = (string) "";
			varWSValuepart3 = (string) "";
			varWSValuepart4 = (string) "";
		}

		public WORCExtensioninRecord(STExtensioninStructure r) {
			varWSStructure = BaseAppUtils.RemoveControlChars(r.ssStructure);
			varWSValuepart1 = BaseAppUtils.RemoveControlChars(r.ssValuepart1);
			varWSValuepart2 = BaseAppUtils.RemoveControlChars(r.ssValuepart2);
			varWSValuepart3 = BaseAppUtils.RemoveControlChars(r.ssValuepart3);
			varWSValuepart4 = BaseAppUtils.RemoveControlChars(r.ssValuepart4);
		}

		public static RLExtensioninList ToRecordList(WORCExtensioninRecord[] array) {
			RLExtensioninList rl = new RLExtensioninList();
			if (array != null) {
				foreach(WORCExtensioninRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCExtensioninRecord[] FromRecordList(RLExtensioninList rl) {
			WORCExtensioninRecord[] array = new WORCExtensioninRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCExtensioninRecord {
		public static implicit operator WORCExtensioninRecord(RCExtensioninRecord r) {
			return new WORCExtensioninRecord(r.ssSTExtensionin);
		}

		public static implicit operator RCExtensioninRecord(WORCExtensioninRecord w) {
			RCExtensioninRecord r = new RCExtensioninRecord("");
			if (w != null) {
				r.ssSTExtensionin = w;
			}
			return r;
		}

	}

	partial struct STExtensioninStructure {
		public static implicit operator WORCExtensioninRecord(STExtensioninStructure r) {
			return new WORCExtensioninRecord(r);
		}

		public static implicit operator STExtensioninStructure(WORCExtensioninRecord w) {
			STExtensioninStructure r = new STExtensioninStructure("");
			if (w != null) {
				r.ssStructure = ((string) w.varWSStructure ?? "");
				r.ssValuepart1 = ((string) w.varWSValuepart1 ?? "");
				r.ssValuepart2 = ((string) w.varWSValuepart2 ?? "");
				r.ssValuepart3 = ((string) w.varWSValuepart3 ?? "");
				r.ssValuepart4 = ((string) w.varWSValuepart4 ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLExtensioninRecordList {
		public WORCExtensioninRecord[] Array;


		public WORLExtensioninRecordList(WORCExtensioninRecord[] r) {
			if (r == null)
			Array = new WORCExtensioninRecord[0];
			else
			Array = r;
		}
		public WORLExtensioninRecordList() {
			Array = new WORCExtensioninRecord[0];
		}

		public WORLExtensioninRecordList(RLExtensioninRecordList rl) {
			rl=(RLExtensioninRecordList) rl.Duplicate();
			Array = new WORCExtensioninRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCExtensioninRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLExtensioninRecordList {
		public static implicit operator RLExtensioninRecordList(WORCExtensioninRecord[] array) {
			RLExtensioninRecordList rl = new RLExtensioninRecordList();
			if (array != null) {
				foreach(WORCExtensioninRecord val in array) {
					rl.Append((RCExtensioninRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCExtensioninRecord[](RLExtensioninRecordList rl) {
			WORCExtensioninRecord[] array = new WORCExtensioninRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCExtensioninRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLExtensioninRecordList {
		public static implicit operator RLExtensioninRecordList(WORLExtensioninRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLExtensioninRecordList(RLExtensioninRecordList rl) {
			return new WORLExtensioninRecordList(rl);
		}
		public static implicit operator WORCExtensioninRecord[](WORLExtensioninRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLExtensioninRecordList(WORCExtensioninRecord[] array) {
			return new WORLExtensioninRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLExtensioninList {
		public WORCExtensioninRecord[] Array;


		public WORLExtensioninList(WORCExtensioninRecord[] r) {
			if (r == null)
			Array = new WORCExtensioninRecord[0];
			else
			Array = r;
		}
		public WORLExtensioninList() {
			Array = new WORCExtensioninRecord[0];
		}

		public WORLExtensioninList(RLExtensioninList rl) {
			rl=(RLExtensioninList) rl.Duplicate();
			Array = new WORCExtensioninRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLExtensioninList {
		public static implicit operator RLExtensioninList(WORCExtensioninRecord[] array) {
			RLExtensioninList rl = new RLExtensioninList();
			if (array != null) {
				foreach(WORCExtensioninRecord val in array) {
					rl.Append((STExtensioninStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCExtensioninRecord[](RLExtensioninList rl) {
			WORCExtensioninRecord[] array = new WORCExtensioninRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STExtensioninStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLExtensioninList {
		public static implicit operator RLExtensioninList(WORLExtensioninList w) {
			return w.Array;
		}
		public static implicit operator WORLExtensioninList(RLExtensioninList rl) {
			return new WORLExtensioninList(rl);
		}
		public static implicit operator WORCExtensioninRecord[](WORLExtensioninList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLExtensioninList(WORCExtensioninRecord[] array) {
			return new WORLExtensioninList(array);
		}
	}
}


namespace ssTeste_SAP {
	using System;
	using System.Data;
	using System.Runtime.Serialization;
	using System.Reflection;
	using System.Xml;
	using OutSystems.ObjectKeys;
	using OutSystems.RuntimeCommon;
	using OutSystems.HubEdition.RuntimePlatform;
	using OutSystems.HubEdition.RuntimePlatform.Db;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Collections.Generic;
	using SAP.Middleware.Connector;
	using System.Text;
	using OutSystems.Plugin.SAP;
	public static partial class CcSAPConnectionPRD {
		public class StructureHelperExtensionin
		{
			public static STExtensioninStructure ToStructure(RfcDestination destination, IRfcDataContainer container, string containerName, string functionName, StringBuilder detailedTrace, string prefix, SapCallContext callContext)
			{
				IRfcStructure rfcStr = null;
				IRfcTable rfcTable = null;
				int index = 0;
				STExtensioninStructure str = new STExtensioninStructure(null);
				String structParamName = callContext.CurrentParameterName;
				callContext.CurrentParameterName = structParamName+ ".Structure";
				str.ssStructure = container.GetString("STRUCTURE");
				detailedTrace.AppendLine("'" + prefix + "STRUCTURE' = '" +str.ssStructure+ "'");
				callContext.CurrentParameterName = structParamName+ ".Valuepart1";
				str.ssValuepart1 = container.GetString("VALUEPART1");
				detailedTrace.AppendLine("'" + prefix + "VALUEPART1' = '" +str.ssValuepart1+ "'");
				callContext.CurrentParameterName = structParamName+ ".Valuepart2";
				str.ssValuepart2 = container.GetString("VALUEPART2");
				detailedTrace.AppendLine("'" + prefix + "VALUEPART2' = '" +str.ssValuepart2+ "'");
				callContext.CurrentParameterName = structParamName+ ".Valuepart3";
				str.ssValuepart3 = container.GetString("VALUEPART3");
				detailedTrace.AppendLine("'" + prefix + "VALUEPART3' = '" +str.ssValuepart3+ "'");
				callContext.CurrentParameterName = structParamName+ ".Valuepart4";
				str.ssValuepart4 = container.GetString("VALUEPART4");
				detailedTrace.AppendLine("'" + prefix + "VALUEPART4' = '" +str.ssValuepart4+ "'");
				callContext.CurrentParameterName = structParamName;
				return str;
			}

			public static void FromStructure(RfcDestination destination, IRfcDataContainer container, STExtensioninStructure str, string containerName, string functionName, StringBuilder detailedTrace, string prefix, SapCallContext callContext)
			{
				String structParamName = callContext.CurrentParameterName;
				callContext.CurrentParameterName = structParamName+ ".Structure";
				if (!(str.ssStructure == "")) {
					detailedTrace.AppendLine("'" + prefix + "STRUCTURE' = '" +str.ssStructure+ "'");
					container.SetValue("STRUCTURE", str.ssStructure);
				}
				callContext.CurrentParameterName = structParamName+ ".Valuepart1";
				if (!(str.ssValuepart1 == "")) {
					detailedTrace.AppendLine("'" + prefix + "VALUEPART1' = '" +str.ssValuepart1+ "'");
					container.SetValue("VALUEPART1", str.ssValuepart1);
				}
				callContext.CurrentParameterName = structParamName+ ".Valuepart2";
				if (!(str.ssValuepart2 == "")) {
					detailedTrace.AppendLine("'" + prefix + "VALUEPART2' = '" +str.ssValuepart2+ "'");
					container.SetValue("VALUEPART2", str.ssValuepart2);
				}
				callContext.CurrentParameterName = structParamName+ ".Valuepart3";
				if (!(str.ssValuepart3 == "")) {
					detailedTrace.AppendLine("'" + prefix + "VALUEPART3' = '" +str.ssValuepart3+ "'");
					container.SetValue("VALUEPART3", str.ssValuepart3);
				}
				callContext.CurrentParameterName = structParamName+ ".Valuepart4";
				if (!(str.ssValuepart4 == "")) {
					detailedTrace.AppendLine("'" + prefix + "VALUEPART4' = '" +str.ssValuepart4+ "'");
					container.SetValue("VALUEPART4", str.ssValuepart4);
				}
				callContext.CurrentParameterName = structParamName;
			}
		}
	}
}
