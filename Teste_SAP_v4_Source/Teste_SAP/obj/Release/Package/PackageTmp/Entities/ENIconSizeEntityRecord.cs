/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssTeste_SAP {

	public sealed partial class ENIconSizeEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceRichWidgets.ENIconSizeEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceRichWidgets.ENIconSizeEntity.eSpaceId;
	} // ENIconSizeEntity

	/// <summary>
	/// Entity <code>ENIconSizeEntityRecord</code> that represents the Service Studio entity
	///  <code>IconSize</code> <p> Description: Awesome icon size</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("IconSize", "x8hUd6PlmkCgJdD3DWtSUg", "sxSgg9oQRkKKlyKvezqjKg", 0, "IconSize", "")]
	[Serializable()]
	public partial struct ENIconSizeEntityRecord: ISerializable, ITypedRecord<ENIconSizeEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdClass = GlobalObjectKey.Parse("sxSgg9oQRkKKlyKvezqjKg*WGMYSG3+ZUuEjb0vrzS0ug");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CLASS", 50, false, true, false, true)]
		[System.Xml.Serialization.XmlElement("Class")]
		private string _ssClass;
		public string ssClass {
			get {
				return _ssClass;
			}
			set {
				if ((_ssClass!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(1, true);
					_ssClass = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENIconSizeEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(1, true);
			OptimizedAttributes = new BitArray(1, false);
			_ssClass = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssClass = r.ReadText(index++, "IconSize.Class", "");
			ChangedAttributes = new BitArray(1, false);
			OptimizedAttributes = new BitArray(1, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENIconSizeEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENIconSizeEntityRecord a, ENIconSizeEntityRecord b) {
			if (a.ssClass != b.ssClass) return false;
			return true;
		}

		public static bool operator != (ENIconSizeEntityRecord a, ENIconSizeEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENIconSizeEntityRecord)) return false;
			return (this == (ENIconSizeEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssClass.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENIconSizeEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(1, true);
			OptimizedAttributes = new BitArray(1, false);
			_ssClass = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_ssClass", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssClass' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssClass = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENIconSizeEntityRecord Duplicate() {
			ENIconSizeEntityRecord t;
			t._ssClass = this._ssClass;
			t.ChangedAttributes = new BitArray(1);
			t.OptimizedAttributes = new BitArray(1);
			for (int i = 0; i < 1; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Class")) VarValue.AppendAttribute(recordElem, "Class", ssClass, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Class");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "class") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Class")) variable.Value = ssClass; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdClass)) {
				return ChangedAttributes[0];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdClass)) {
				return OptimizedAttributes[0];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdClass) {
				return ssClass;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(1);
			OptimizedAttributes = new BitArray(1);
			if (other == null) return;
			ssClass = (string) other.AttributeGet(IdClass);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdClass);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdClass);
		}
	} // ENIconSizeEntityRecord
	/// <summary>
	/// Static Entity <code>ENIconSizeEntity</code> gets the values for this static entity records in
	///  runtime <code>IconSize</code>
	/// </summary>
	partial class ENIconSizeEntity {


		static ENIconSizeEntity() {
			ENIconSizeEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENIconSizeEntityRecord GetRecordById(string id) {
			return (ENIconSizeEntityRecord) RsseSpaceRichWidgets.ENIconSizeEntity.GetRecordById(id);
		}

		public static ENIconSizeEntityRecord GetRecordByName(string name) {
			return (ENIconSizeEntityRecord) RsseSpaceRichWidgets.ENIconSizeEntity.GetRecordByName(name);
		}

		public static ENIconSizeEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENIconSizeEntityRecord) RsseSpaceRichWidgets.ENIconSizeEntity.GetRecordByKey(key);
		}
	} // ENIconSizeEntity;
	/// <summary>
	/// Structure <code>RCIconSizeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCIconSizeRecord: ISerializable, ITypedRecord<RCIconSizeRecord> {
		private static readonly GlobalObjectKey IdIconSize = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*A9nQL28dGAibBUpG5W9Lvw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("IconSize")]
		public ENIconSizeEntityRecord ssENIconSize;


		public static implicit operator ENIconSizeEntityRecord(RCIconSizeRecord r) {
			return r.ssENIconSize;
		}

		public static implicit operator RCIconSizeRecord(ENIconSizeEntityRecord r) {
			RCIconSizeRecord res = new RCIconSizeRecord(null);
			res.ssENIconSize = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENIconSize.ChangedAttributes = value;
			}
			get {
				return ssENIconSize.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCIconSizeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENIconSize = new ENIconSizeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(1, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENIconSize.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENIconSize.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENIconSize.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENIconSize.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCIconSizeRecord r) {
			this = r;
		}


		public static bool operator == (RCIconSizeRecord a, RCIconSizeRecord b) {
			if (a.ssENIconSize != b.ssENIconSize) return false;
			return true;
		}

		public static bool operator != (RCIconSizeRecord a, RCIconSizeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCIconSizeRecord)) return false;
			return (this == (RCIconSizeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENIconSize.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCIconSizeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENIconSize = new ENIconSizeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENIconSize", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENIconSize' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENIconSize = (ENIconSizeEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENIconSize.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENIconSize.InternalRecursiveSave();
		}


		public RCIconSizeRecord Duplicate() {
			RCIconSizeRecord t;
			t.ssENIconSize = (ENIconSizeEntityRecord) this.ssENIconSize.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENIconSize.ToXml(this, recordElem, "IconSize", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "iconsize") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IconSize")) variable.Value = ssENIconSize; else variable.Optimized = true;
				variable.SetFieldName("iconsize");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENIconSize.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENIconSize.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdIconSize) {
				return ssENIconSize;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENIconSize.FillFromOther((IRecord) other.AttributeGet(IdIconSize));
		}
	} // RCIconSizeRecord
	/// <summary>
	/// RecordList type <code>RLIconSizeRecordList</code> that represents a record list of
	///  <code>IconSize</code>
	/// </summary>
	[Serializable()]
	public partial class RLIconSizeRecordList: GenericRecordList<RCIconSizeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCIconSizeRecord GetElementDefaultValue() {
			return new RCIconSizeRecord("");
		}

		public T[] ToArray<T>(Func<RCIconSizeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLIconSizeRecordList recordlist, Func<RCIconSizeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLIconSizeRecordList ToList<T>(T[] array, Func <T, RCIconSizeRecord> converter) {
			RLIconSizeRecordList result = new RLIconSizeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLIconSizeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIconSizeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIconSizeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLIconSizeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(1, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCIconSizeRecord> NewList() {
			return new RLIconSizeRecordList();
		}


	} // RLIconSizeRecordList

	/// <summary>
	/// RecordList type <code>RLIconSizeList</code> that represents a record list of <code>Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLIconSizeList: GenericRecordList<ENIconSizeEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENIconSizeEntityRecord GetElementDefaultValue() {
			return new ENIconSizeEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENIconSizeEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLIconSizeList recordlist, Func<ENIconSizeEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLIconSizeList ToList<T>(T[] array, Func <T, ENIconSizeEntityRecord> converter) {
			RLIconSizeList result = new RLIconSizeList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLIconSizeList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIconSizeList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLIconSizeList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLIconSizeList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENIconSizeEntityRecord> NewList() {
			return new RLIconSizeList();
		}


	} // RLIconSizeList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetIconSize
		/// </summary>

		public static void GetIconSize(HeContext heContext, string inParamId, out RCIconSizeRecord outParamRecord) {
			outParamRecord = new RCIconSizeRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENIconSizeEntity.eSpaceId;
				try {
					outParamRecord = ENIconSizeEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [CLASS]" +
						 " FROM " + ENIconSizeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [CLASS] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.String, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetIconSize", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENIconSizeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssTeste_SAP {
	[XmlType("IconSize")]
	public class WORCIconSizeRecord {
		[System.Xml.Serialization.XmlElement("Class")]
		public string varWSClass;

		public WORCIconSizeRecord() {
			varWSClass = (string) "";
		}

		public WORCIconSizeRecord(ENIconSizeEntityRecord r) {
			varWSClass = BaseAppUtils.RemoveControlChars(r.ssClass);
		}

		public static RLIconSizeList ToRecordList(WORCIconSizeRecord[] array) {
			RLIconSizeList rl = new RLIconSizeList();
			if (array != null) {
				foreach(WORCIconSizeRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCIconSizeRecord[] FromRecordList(RLIconSizeList rl) {
			WORCIconSizeRecord[] array = new WORCIconSizeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCIconSizeRecord {
		public static implicit operator WORCIconSizeRecord(RCIconSizeRecord r) {
			return new WORCIconSizeRecord(r.ssENIconSize);
		}

		public static implicit operator RCIconSizeRecord(WORCIconSizeRecord w) {
			RCIconSizeRecord r = new RCIconSizeRecord("");
			if (w != null) {
				r.ssENIconSize = w;
			}
			return r;
		}

	}

	partial struct ENIconSizeEntityRecord {
		public static implicit operator WORCIconSizeRecord(ENIconSizeEntityRecord r) {
			return new WORCIconSizeRecord(r);
		}

		public static implicit operator ENIconSizeEntityRecord(WORCIconSizeRecord w) {
			ENIconSizeEntityRecord r = new ENIconSizeEntityRecord("");
			if (w != null) {
				r.ssClass = ((string) w.varWSClass ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLIconSizeRecordList {
		public WORCIconSizeRecord[] Array;


		public WORLIconSizeRecordList(WORCIconSizeRecord[] r) {
			if (r == null)
			Array = new WORCIconSizeRecord[0];
			else
			Array = r;
		}
		public WORLIconSizeRecordList() {
			Array = new WORCIconSizeRecord[0];
		}

		public WORLIconSizeRecordList(RLIconSizeRecordList rl) {
			rl=(RLIconSizeRecordList) rl.Duplicate();
			Array = new WORCIconSizeRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCIconSizeRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLIconSizeRecordList {
		public static implicit operator RLIconSizeRecordList(WORCIconSizeRecord[] array) {
			RLIconSizeRecordList rl = new RLIconSizeRecordList();
			if (array != null) {
				foreach(WORCIconSizeRecord val in array) {
					rl.Append((RCIconSizeRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCIconSizeRecord[](RLIconSizeRecordList rl) {
			WORCIconSizeRecord[] array = new WORCIconSizeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCIconSizeRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLIconSizeRecordList {
		public static implicit operator RLIconSizeRecordList(WORLIconSizeRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLIconSizeRecordList(RLIconSizeRecordList rl) {
			return new WORLIconSizeRecordList(rl);
		}
		public static implicit operator WORCIconSizeRecord[](WORLIconSizeRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLIconSizeRecordList(WORCIconSizeRecord[] array) {
			return new WORLIconSizeRecordList(array);
		}
	}
}

