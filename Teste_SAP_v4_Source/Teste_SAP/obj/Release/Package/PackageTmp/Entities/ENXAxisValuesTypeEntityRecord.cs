/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace ssTeste_SAP {

	public sealed partial class ENXAxisValuesTypeEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return RsseSpaceCharts.ENXAxisValuesTypeEntity.ViewName(tenant, locale);
		}
		public const int eSpaceId = RsseSpaceCharts.ENXAxisValuesTypeEntity.eSpaceId;
	} // ENXAxisValuesTypeEntity

	/// <summary>
	/// Entity <code>ENXAxisValuesTypeEntityRecord</code> that represents the Service Studio entity
	///  <code>XAxisValuesType</code> <p> Description: The data type of labels displayed on the X-axis t
	/// o format them.  Using ‘Auto’ means the type is inferred from the label of the first data point.</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("XAxisValuesType", "bkTh7070pkWxA+ynTWbjVA", "uQHsYT2wwkKZ1wrN3PIifQ", 0, "OSUSR_bjy_XAxisValuesType", "")]
	[Serializable()]
	public partial struct ENXAxisValuesTypeEntityRecord: ISerializable, ITypedRecord<ENXAxisValuesTypeEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*JaMTBs2OWU6YaJ82+0TQJw");
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*0ua9JnP7N028LatBUlm9ZA");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*zWjBGT7rCUC0IN1gNFWEEA");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, false, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Label")]
		private string _ssLabel;
		public string ssLabel {
			get {
				return _ssLabel;
			}
			set {
				if ((_ssLabel!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssLabel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssOrder = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENXAxisValuesTypeEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssLabel = "";
			_ssOrder = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "XAxisValuesType.Id", 0);
			ssLabel = r.ReadText(index++, "XAxisValuesType.Label", "");
			ssOrder = r.ReadInteger(index++, "XAxisValuesType.Order", 0);
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENXAxisValuesTypeEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENXAxisValuesTypeEntityRecord a, ENXAxisValuesTypeEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssOrder != b.ssOrder) return false;
			return true;
		}

		public static bool operator != (ENXAxisValuesTypeEntityRecord a, ENXAxisValuesTypeEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENXAxisValuesTypeEntityRecord)) return false;
			return (this == (ENXAxisValuesTypeEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssOrder.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENXAxisValuesTypeEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssLabel = "";
			_ssOrder = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssLabel", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssLabel' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssLabel = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssOrder' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssOrder = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENXAxisValuesTypeEntityRecord Duplicate() {
			ENXAxisValuesTypeEntityRecord t;
			t._ssId = this._ssId;
			t._ssLabel = this._ssLabel;
			t._ssOrder = this._ssOrder;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdOrder) {
				return ssOrder;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssLabel = (string) other.AttributeGet(IdLabel);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdOrder);
		}
	} // ENXAxisValuesTypeEntityRecord
	/// <summary>
	/// Static Entity <code>ENXAxisValuesTypeEntity</code> gets the values for this static entity records
	///  in runtime <code>XAxisValuesType</code>
	/// </summary>
	partial class ENXAxisValuesTypeEntity {


		static ENXAxisValuesTypeEntity() {
			ENXAxisValuesTypeEntityRecordTypeFactoryImpl.InitializeFactory();
		}

		public static ENXAxisValuesTypeEntityRecord GetRecordById(int id) {
			return (ENXAxisValuesTypeEntityRecord) RsseSpaceCharts.ENXAxisValuesTypeEntity.GetRecordById(id);
		}

		public static ENXAxisValuesTypeEntityRecord GetRecordByName(string name) {
			return (ENXAxisValuesTypeEntityRecord) RsseSpaceCharts.ENXAxisValuesTypeEntity.GetRecordByName(name);
		}

		public static ENXAxisValuesTypeEntityRecord GetRecordByKey(ObjectKey key) {
			return (ENXAxisValuesTypeEntityRecord) RsseSpaceCharts.ENXAxisValuesTypeEntity.GetRecordByKey(key);
		}
	} // ENXAxisValuesTypeEntity;
	/// <summary>
	/// Structure <code>RCXAxisValuesTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCXAxisValuesTypeRecord: ISerializable, ITypedRecord<RCXAxisValuesTypeRecord> {
		private static readonly GlobalObjectKey IdXAxisValuesType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*PTckZeYAFSlR0rh76o4NhQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("XAxisValuesType")]
		public ENXAxisValuesTypeEntityRecord ssENXAxisValuesType;


		public static implicit operator ENXAxisValuesTypeEntityRecord(RCXAxisValuesTypeRecord r) {
			return r.ssENXAxisValuesType;
		}

		public static implicit operator RCXAxisValuesTypeRecord(ENXAxisValuesTypeEntityRecord r) {
			RCXAxisValuesTypeRecord res = new RCXAxisValuesTypeRecord(null);
			res.ssENXAxisValuesType = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENXAxisValuesType.ChangedAttributes = value;
			}
			get {
				return ssENXAxisValuesType.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCXAxisValuesTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENXAxisValuesType = new ENXAxisValuesTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENXAxisValuesType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENXAxisValuesType.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENXAxisValuesType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENXAxisValuesType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCXAxisValuesTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCXAxisValuesTypeRecord a, RCXAxisValuesTypeRecord b) {
			if (a.ssENXAxisValuesType != b.ssENXAxisValuesType) return false;
			return true;
		}

		public static bool operator != (RCXAxisValuesTypeRecord a, RCXAxisValuesTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCXAxisValuesTypeRecord)) return false;
			return (this == (RCXAxisValuesTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENXAxisValuesType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCXAxisValuesTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENXAxisValuesType = new ENXAxisValuesTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENXAxisValuesType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENXAxisValuesType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENXAxisValuesType = (ENXAxisValuesTypeEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENXAxisValuesType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENXAxisValuesType.InternalRecursiveSave();
		}


		public RCXAxisValuesTypeRecord Duplicate() {
			RCXAxisValuesTypeRecord t;
			t.ssENXAxisValuesType = (ENXAxisValuesTypeEntityRecord) this.ssENXAxisValuesType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENXAxisValuesType.ToXml(this, recordElem, "XAxisValuesType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "xaxisvaluestype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".XAxisValuesType")) variable.Value = ssENXAxisValuesType; else variable.Optimized = true;
				variable.SetFieldName("xaxisvaluestype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENXAxisValuesType.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENXAxisValuesType.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdXAxisValuesType) {
				return ssENXAxisValuesType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENXAxisValuesType.FillFromOther((IRecord) other.AttributeGet(IdXAxisValuesType));
		}
	} // RCXAxisValuesTypeRecord
	/// <summary>
	/// RecordList type <code>RLXAxisValuesTypeRecordList</code> that represents a record list of
	///  <code>XAxisValuesType</code>
	/// </summary>
	[Serializable()]
	public partial class RLXAxisValuesTypeRecordList: GenericRecordList<RCXAxisValuesTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCXAxisValuesTypeRecord GetElementDefaultValue() {
			return new RCXAxisValuesTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCXAxisValuesTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLXAxisValuesTypeRecordList recordlist, Func<RCXAxisValuesTypeRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLXAxisValuesTypeRecordList ToList<T>(T[] array, Func <T, RCXAxisValuesTypeRecord> converter) {
			RLXAxisValuesTypeRecordList result = new RLXAxisValuesTypeRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLXAxisValuesTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLXAxisValuesTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLXAxisValuesTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLXAxisValuesTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCXAxisValuesTypeRecord> NewList() {
			return new RLXAxisValuesTypeRecordList();
		}


	} // RLXAxisValuesTypeRecordList

	/// <summary>
	/// RecordList type <code>RLXAxisValuesTypeList</code> that represents a record list of <code>Text,
	///  Integer, Integer</code>
	/// </summary>
	[Serializable()]
	public partial class RLXAxisValuesTypeList: GenericRecordList<ENXAxisValuesTypeEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENXAxisValuesTypeEntityRecord GetElementDefaultValue() {
			return new ENXAxisValuesTypeEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENXAxisValuesTypeEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLXAxisValuesTypeList recordlist, Func<ENXAxisValuesTypeEntityRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLXAxisValuesTypeList ToList<T>(T[] array, Func <T, ENXAxisValuesTypeEntityRecord> converter) {
			RLXAxisValuesTypeList result = new RLXAxisValuesTypeList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLXAxisValuesTypeList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLXAxisValuesTypeList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLXAxisValuesTypeList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLXAxisValuesTypeList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENXAxisValuesTypeEntityRecord> NewList() {
			return new RLXAxisValuesTypeList();
		}


	} // RLXAxisValuesTypeList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetXAxisValuesType
		/// </summary>

		public static void GetXAxisValuesType(HeContext heContext, int inParamId, out RCXAxisValuesTypeRecord outParamRecord) {
			outParamRecord = new RCXAxisValuesTypeRecord(null);

			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ENXAxisValuesTypeEntity.eSpaceId;
				try {
					outParamRecord = ENXAxisValuesTypeEntity.GetRecordById(inParamId);
				} catch {
					using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
						string sql =
						 "SELECT " +
						 " [ID]" +
						 ", [LABEL]" +
						 ", [ORDER]" +
						 " FROM " + ENXAxisValuesTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
						 "WHERE [ID] = @inParamId";
						Command sqlCmd = trans.CreateCommand(sql);
						sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
						using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetXAxisValuesType", true, false, false)) {
							if (reader.Read()) {
								outParamRecord.ReadDB(reader);
							} else
							throw new DataBaseException(ENXAxisValuesTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
						}
					}
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
		}

	}
}

namespace ssTeste_SAP {
	[XmlType("XAxisValuesType")]
	public class WORCXAxisValuesTypeRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		public WORCXAxisValuesTypeRecord() {
			varWSId = (int) 0;
			varWSLabel = (string) "";
			varWSOrder = (int) 0;
		}

		public WORCXAxisValuesTypeRecord(ENXAxisValuesTypeEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSOrder = (int) r.ssOrder;
		}

		public static RLXAxisValuesTypeList ToRecordList(WORCXAxisValuesTypeRecord[] array) {
			RLXAxisValuesTypeList rl = new RLXAxisValuesTypeList();
			if (array != null) {
				foreach(WORCXAxisValuesTypeRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCXAxisValuesTypeRecord[] FromRecordList(RLXAxisValuesTypeList rl) {
			WORCXAxisValuesTypeRecord[] array = new WORCXAxisValuesTypeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCXAxisValuesTypeRecord {
		public static implicit operator WORCXAxisValuesTypeRecord(RCXAxisValuesTypeRecord r) {
			return new WORCXAxisValuesTypeRecord(r.ssENXAxisValuesType);
		}

		public static implicit operator RCXAxisValuesTypeRecord(WORCXAxisValuesTypeRecord w) {
			RCXAxisValuesTypeRecord r = new RCXAxisValuesTypeRecord("");
			if (w != null) {
				r.ssENXAxisValuesType = w;
			}
			return r;
		}

	}

	partial struct ENXAxisValuesTypeEntityRecord {
		public static implicit operator WORCXAxisValuesTypeRecord(ENXAxisValuesTypeEntityRecord r) {
			return new WORCXAxisValuesTypeRecord(r);
		}

		public static implicit operator ENXAxisValuesTypeEntityRecord(WORCXAxisValuesTypeRecord w) {
			ENXAxisValuesTypeEntityRecord r = new ENXAxisValuesTypeEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssOrder = (int) w.varWSOrder;
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLXAxisValuesTypeRecordList {
		public WORCXAxisValuesTypeRecord[] Array;


		public WORLXAxisValuesTypeRecordList(WORCXAxisValuesTypeRecord[] r) {
			if (r == null)
			Array = new WORCXAxisValuesTypeRecord[0];
			else
			Array = r;
		}
		public WORLXAxisValuesTypeRecordList() {
			Array = new WORCXAxisValuesTypeRecord[0];
		}

		public WORLXAxisValuesTypeRecordList(RLXAxisValuesTypeRecordList rl) {
			rl=(RLXAxisValuesTypeRecordList) rl.Duplicate();
			Array = new WORCXAxisValuesTypeRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCXAxisValuesTypeRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLXAxisValuesTypeRecordList {
		public static implicit operator RLXAxisValuesTypeRecordList(WORCXAxisValuesTypeRecord[] array) {
			RLXAxisValuesTypeRecordList rl = new RLXAxisValuesTypeRecordList();
			if (array != null) {
				foreach(WORCXAxisValuesTypeRecord val in array) {
					rl.Append((RCXAxisValuesTypeRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCXAxisValuesTypeRecord[](RLXAxisValuesTypeRecordList rl) {
			WORCXAxisValuesTypeRecord[] array = new WORCXAxisValuesTypeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCXAxisValuesTypeRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLXAxisValuesTypeRecordList {
		public static implicit operator RLXAxisValuesTypeRecordList(WORLXAxisValuesTypeRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLXAxisValuesTypeRecordList(RLXAxisValuesTypeRecordList rl) {
			return new WORLXAxisValuesTypeRecordList(rl);
		}
		public static implicit operator WORCXAxisValuesTypeRecord[](WORLXAxisValuesTypeRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLXAxisValuesTypeRecordList(WORCXAxisValuesTypeRecord[] array) {
			return new WORLXAxisValuesTypeRecordList(array);
		}
	}
}

