/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Sms;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssTeste_SAP.Flows.FlowMainFlow {

	public class ScrnHomePage: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnHomePage(): base(Teste_SAP_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcPreco</code> that represents the Service Studio local variable
		///  <code>Preco</code> <p>Description: </p>
		/// </summary>
		decimal varLcPreco = 0.0M;

		/// <summary>
		/// Variable <code>varLcCodigoMaterial</code> that represents the Service Studio local variable
		///  <code>CodigoMaterial</code> <p>Description: </p>
		/// </summary>
		string varLcCodigoMaterial = "";

		/// <summary>
		/// Variable <code>varLcDescricaoMaterial</code> that represents the Service Studio local variable
		///  <code>DescricaoMaterial</code> <p>Description: </p>
		/// </summary>
		string varLcDescricaoMaterial = "...";

		/// <summary>
		/// Variable RichWidgets_wt_WebBlockInstance14
		/// </summary>
		protected proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London RichWidgets_wt_WebBlockInstance14;
		protected OutSystems.HubEdition.WebWidgets.Container wtContent;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container18;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container11;
		/// <summary>
		/// Variable (wt_Button5) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button5;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wt_Input3ValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wt_Input3ValidatorType;
		/// <summary>
		/// Variable (wt_Button29) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button29;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container15;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container26;
		/// <summary>
		/// Variable (wt_Button7) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button7;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container13;
		/// <summary>
		/// Variable (wt_Button25) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button25;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container17;
		/// <summary>
		/// Variable (wt_Button20) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button20;


		List<object> explicitChangedVariables = new List<object>();

		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London.GetCss(writer, inline, visited);
			ssTeste_SAP.Flows.FlowCommon.WBlkHeader.GetCss(writer, inline, visited);
			ssTeste_SAP.Flows.FlowCommon.WBlkMenu.GetCss(writer, inline, visited);
			ssTeste_SAP.Flows.FlowCommon.WBlkFooter.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("c_f8eiy3WkaywVcJDWgNyw", "HomePage");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/Teste_SAP/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == OutSystems.HubEdition.RuntimePlatform.AppInfo.GetParameter(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.Callback_Debug_Information_Key)) {
					return OutSystems.HubEdition.RuntimePlatform.AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "c_f8eiy3WkaywVcJDWgNyw", "HomePage");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "c_f8eiy3WkaywVcJDWgNyw", "HomePage");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "c_f8eiy3WkaywVcJDWgNyw", "HomePage");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "c_f8eiy3WkaywVcJDWgNyw", "HomePage");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnHomePage() {
		}




		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssUrl {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssFile {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return "Theme.Teste_SAP.css"; 
			}
		}

		protected override string ThemeCssCacheInvalidationSuffix {
			get {
				return AppUtils.Instance.CacheInvalidationSuffix; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "Theme.Teste_SAP.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return RsseSpaceRichWidgets.Themes.ThemeLondonFixed.ThemeExtraCssUrl; 
			}
		}

		protected override string ThemeExtraCssCacheInvalidationSuffix {
			get {
				return RsseSpaceRichWidgets.CacheInvalidationSuffix; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return "ReferenceTheme.LondonFixed.extra.css"; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsHttps(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "HomePage", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "HomePage", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent();
			base.OnInit(e);
		}
		private void InitializeComponent() {
			RichWidgets_wt_WebBlockInstance14 = (proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London) FindControl("RichWidgets_wt_WebBlockInstance14");
			wtContent = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtContent");
			wt_Container18 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container18");
			wt_Container11 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container11");
			wt_Button5 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button5");
			if (this.wt_Button5 != null) {
				this.wt_Button5.Click += new System.EventHandler(this.wt_Button5_Click);
			}
			wt_Container21 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container21");
			wt_Button29 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button29");
			if (this.wt_Button29 != null) {
				this.wt_Button29.Click += new System.EventHandler(this.wt_Button29_Click);
			}
			wt_Container4 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container4");
			wt_Container15 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container15");
			wt_Container26 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container26");
			wt_Button7 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button7");
			if (this.wt_Button7 != null) {
				this.wt_Button7.Click += new System.EventHandler(this.wt_Button7_Click);
			}
			wt_Container13 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container13");
			wt_Button25 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button25");
			if (this.wt_Button25 != null) {
				this.wt_Button25.Click += new System.EventHandler(this.wt_Button25_Click);
			}
			wt_Container17 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container17");
			wt_Button20 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button20");
			if (this.wt_Button20 != null) {
				this.wt_Button20.Click += new System.EventHandler(this.wt_Button20_Click);
			}
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance30") {
				return RichWidgets_wt_WebBlockInstance14.wtHeader.FindControl("wt_WebBlockInstance30");
			}
			if (id == "wt_WebBlockInstance28") {
				return RichWidgets_wt_WebBlockInstance14.wtMenu.FindControl("wt_WebBlockInstance28");
			}
			if (id == "wtContent") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wtContent");
			}
			if (id == "wt_Container18") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Container18");
			}
			if (id == "wt_Text1") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Text1");
			}
			if (id == "wt_Container11") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Container11");
			}
			if (id == "wt_Text10") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Text10");
			}
			if (id == "wt_InlineExpression27") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_InlineExpression27");
			}
			if (id == "wt_Button5") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Button5");
			}
			if (id == "wt_Container21") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Container21");
			}
			if (id == "wt_Input3") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Input3");
			}
			if (id == "wt_InlineExpression23") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_InlineExpression23");
			}
			if (id == "wt_Button29") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Button29");
			}
			if (id == "wt_Container4") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Container4");
			}
			if (id == "wt_Container15") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Container15");
			}
			if (id == "wt_Text12") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Text12");
			}
			if (id == "wt_Container26") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Container26");
			}
			if (id == "wt_Button7") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Button7");
			}
			if (id == "wt_Container13") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Container13");
			}
			if (id == "wt_Button25") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Button25");
			}
			if (id == "wt_Container17") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Container17");
			}
			if (id == "wt_Button20") {
				return RichWidgets_wt_WebBlockInstance14.wtMainContent.FindControl("wt_Button20");
			}
			if (id == "wt_WebBlockInstance2") {
				return RichWidgets_wt_WebBlockInstance14.wtFooter.FindControl("wt_WebBlockInstance2");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;

			CookieActions.ValidateSessionFixationCookieAgainstSession(heContext);

			if (appInfo != null) {
				heContext = appInfo.OsContext; heContext.RequestTracer.MainEventType = RequestTracerEventType.WebScreenServerExecuted; heContext.RequestTracer.RegisterEndpoint("7afcf773-b72c-465a-b2c1-57090d680dcb", "HomePage"); 
			}
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["Teste_SAP._ScreenParameters_HomePage"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["Teste_SAP._ScreenParameters_HomePage"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(new Exception("eSpace " + appInfo.eSpaceName + " is disabled"), heContext, "Global");
				String contact = BuiltInFunction.EncodeUrl(RuntimePlatformUtils.GetAdministrationEmail());
				try {
					Server.Transfer("/customHandlers/app_offline.aspx?contact=" + contact + "&errorCode=APPLICATION_OFFLINE");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/customHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (appInfo.IsForcingSecurityForScreens(Global.eSpaceId) && !RuntimePlatformUtils.RequestIsSecure(Request)) {
				string redirectUrl = "https" + Request.Url.ToString().Substring(4);
				Response.Redirect(redirectUrl);
				HttpContext.Current.ApplicationInstance.CompleteRequest();
			}
			if (!IsPostBack) {
				CheckPermissions(heContext);
				bool bindEditRecords = !IsPostBack;
				Title = "HomePage"; Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "HomePage", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (heContext.AppInfo.IsForcingSecurityForScreens(Global.eSpaceId) && !RuntimePlatformUtils.RequestIsSecure(Request)) {
					string redirectUrl = "https" + Request.Url.ToString().Substring(4);
					Response.Redirect(redirectUrl);
					HttpContext.Current.ApplicationInstance.CompleteRequest();
				}
				FetchViewState();
			}

		}
		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");

			NegotiateTabIndexes();

			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, true);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button5 = wt_Button5 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button5");
			} catch {}
			string jsString = (wt_Button5 != null) ? "return OsEnterKey('" +wt_Button5.ClientID + "', arguments[0] || window.event)": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"];
						if (onkeydown == null)
						onkeydown = "";
						ctrl.Attributes.Add("onkeydown", onkeydown + jsString);

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short settedTabIndex = 0;
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, Convert.ToInt16(htTabIndexGroupsTI[groupid]), out settedTabIndex);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, tabindex, out settedTabIndex);
							// Increase tabindex if it was not overiden
							if (tabindex == settedTabIndex) {
								tabindex++;
							}
						}
					}
					tabindex = Math.Max(tabindex, ++settedTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssTeste_SAP.Flows.FlowMainFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			{
				bool check;
				ExtendedActions.CheckRegisteredRole(heContext, 0, out check);
				if (check) return;
			}
			{
				bool check;
				ExtendedActions.CheckTeste_SAPUserRole(heContext, 0, out check);
				if (check) return;
			}
			throw new NotRegisteredException("Registered role required");
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("c_f8eiy3WkaywVcJDWgNyw"); 
			}
		}

		public bool isSecure {
			get {
				return Global.App.IsForcingSecurityForScreens(Global.eSpaceId);
			}
		}


		public class lcvTesteDireto: VarsBag {
			public string resZrfcsd001_outParamCanal_De_Venda = "";
			public string resZrfcsd001_outParamCodi_Cliente = "";
			public string resZrfcsd001_outParamCondi_Preco = "";
			public string resZrfcsd001_outParamNum_Material = "";
			public string resZrfcsd001_outParamOrga_Venda = "";
			public string resZrfcsd001_outParamSetor_De_Venda = "";
			public decimal resZrfcsd001_outParamValor_Condicao = 0.0M;

			public lcvTesteDireto() {
			}
		}
		/// <summary>
		/// Action <code>CommandTesteDireto</code> that represents the Service Studio screen action
		///  <code>TesteDireto</code> <p> Description: </p>
		/// </summary>
		private bool CommandTesteDireto(HeContext heContext) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("0fea4e1a-67bd-40ed-833c-19be85e8b799", "TesteDireto"); 
			}
			lcvTesteDireto localVars = new lcvTesteDireto();
			try {
				// Zrfcsd001
				ssTeste_SAP.CcSAPConnectionPRD.ActionZrfcsd001(heContext, Actions.CcSAPConnectionPRDCallbacks.NewInstance(), "15", "0000100062", "ZPRF", "000000000000821060", "0050", "01", out localVars.resZrfcsd001_outParamCanal_De_Venda, out localVars.resZrfcsd001_outParamCodi_Cliente, out localVars.resZrfcsd001_outParamCondi_Preco, out localVars.resZrfcsd001_outParamNum_Material, out localVars.resZrfcsd001_outParamOrga_Venda, out localVars.resZrfcsd001_outParamSetor_De_Venda, out localVars.resZrfcsd001_outParamValor_Condicao);
				varLcPreco = localVars.resZrfcsd001_outParamValor_Condicao; // Preco = Zrfcsd001.Valor_Condicao
				explicitChangedVariables.Add(varLcPreco);
				// Refresh Widget (wtContent)
				((OSPageViewState) Page).AjaxRefresh(wtContent, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvWebServices: VarsBag {
			public RLMaterialdescriptionRecordList resGetMaterialDetail_outWSDescricaoMaterial = new RLMaterialdescriptionRecordList();

			public lcvWebServices() {
			}
		}
		/// <summary>
		/// Action <code>CommandWebServices</code> that represents the Service Studio screen action
		///  <code>WebServices</code> <p> Description: </p>
		/// </summary>
		private bool CommandWebServices(HeContext heContext) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("18268b27-1a0e-4aec-9deb-0d19c18314ad", "WebServices"); 
			}
			lcvWebServices localVars = new lcvWebServices();
			try {
				// GetMaterialDetail
				ExtendedActions.WebRefSAP_GetMaterialDetail(heContext, new bool[] {
					true
				}
				, varLcCodigoMaterial, out localVars.resGetMaterialDetail_outWSDescricaoMaterial);
				varLcDescricaoMaterial = localVars.resGetMaterialDetail_outWSDescricaoMaterial.CurrentRec.ssSTMaterialdescription.ssMatl_Desc; // DescricaoMaterial = GetMaterialDetail.DescricaoMaterial.Current.Materialdescription.Matl_Desc
				explicitChangedVariables.Add(varLcDescricaoMaterial);
				// Refresh Widget (wtContent)
				((OSPageViewState) Page).AjaxRefresh(wtContent, "None", StoreViewState);
				// Update Screen
				return true;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvDownloadExcel: VarsBag {
			public byte[] resRecordListToExcel1_outParamOut = new byte[] {};
			public RLGetPhotosResponseList resGetPhotos_outParamResponse = new RLGetPhotosResponseList();

			public lcvDownloadExcel() {
			}
		}
		/// <summary>
		/// Action <code>CommandDownloadExcel</code> that represents the Service Studio screen action
		///  <code>DownloadExcel</code> <p> Description: </p>
		/// </summary>
		private bool CommandDownloadExcel(HeContext heContext) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("3b5e4234-e686-49bc-a22a-b3bea668fe2f", "DownloadExcel"); 
			}
			lcvDownloadExcel localVars = new lcvDownloadExcel();
			try {
				// GetPhotos
				ssTeste_SAP.CcJsonplaceholderTypicode.ActionGetPhotos(heContext, Actions.CcJsonplaceholderTypicodeCallbacks.NewInstance(), out localVars.resGetPhotos_outParamResponse);
				// RecordListToExcel RLToExcelRecordListToExcel1
				FuncCommandDownloadExcel.RLToExcelRecordListToExcel1(heContext, localVars.resGetPhotos_outParamResponse, out localVars.resRecordListToExcel1_outParamOut);
				// Download Download1
				Response.ClearContent();
				string md5Hash_Download1;
				md5Hash_Download1 = OutSystems.RuntimeCommon.Cryptography.Insecure.MD5HashHelper.Hash(localVars.resRecordListToExcel1_outParamOut);
				Response.ContentType = "application/octet-stream";
				Response.AppendHeader("ETag", "\"" + md5Hash_Download1 + "\"");
				Response.AppendHeader("Content-MD5", md5Hash_Download1);
				Response.AppendHeader("Accept-Ranges", "none");
				string filenameDownload1 = RuntimePlatformUtils.EscapeFilenameForDownload((("photos_" +BuiltInFunction.CurrDateTime().ToString(FormatInfo.GetOutputDateTimeFormatString(), FormatInfo.defaultHeCultureInfo)) + ".xlsx"));
				// Only Internet Explorer needs to escape the text of filename, except blank spaces.
				if (Request.Browser.Browser == "IE") {
					filenameDownload1 = RuntimePlatformUtils.EncodeFilenameForDownload(filenameDownload1);
				}
				Response.AppendHeader("Content-Disposition", "inline; filename=\"" +filenameDownload1+ "\"");
				byte[] downloadDownload1FileContent = localVars.resRecordListToExcel1_outParamOut;

				if (downloadDownload1FileContent.Length > 0) {
					Response.AppendHeader("Content-Length", downloadDownload1FileContent.Length.ToString());
					Response.BinaryWrite(downloadDownload1FileContent);
				} else {
					Response.AppendHeader("Content-Length", "0");
				}

				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "HomePage", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
				Response.End();
				return false;
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		public class lcvTesteLog: VarsBag {
			public bool inParamIsError;
			public lcvTesteLog(bool inParamIsError) {
				this.inParamIsError = inParamIsError;
			}
		}
		/// <summary>
		/// Action <code>CommandTesteLog</code> that represents the Service Studio screen action
		///  <code>TesteLog</code> <p> Description: </p>
		/// </summary>
		private bool CommandTesteLog(HeContext heContext, bool inParamIsError) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("d8660880-1b52-4aa4-b651-39b57edc903c", "TesteLog"); 
			}
			lcvTesteLog localVars = new lcvTesteLog(inParamIsError);
			try {
				if (localVars.inParamIsError) {
					// RaiseError UserException1
					throw new ExcptUserException1("Teste de Error Log!");

				} else {
					// Audit
					ExtendedActions.Audit(heContext, "Teste de General Log!", "TESTE_LOG");
					// ExceptionFeedbackMessage2
					Actions.ActionFeedback_Message(heContext, "\'Teste de General Log\' OK", ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("8xuePnp+TUO346Oyp3_dWQ")).ssId);
					// Update Screen
					return true;

				}
			} // try

			catch (System.Threading.ThreadAbortException) {
				return false;
			}
			catch (Exception exception) {
				ErrorLog.LogApplicationError(exception, heContext, "");
				Global.App.OsContext.Session["ExceptionMessage"] = exception.Message;
				heContext.LastException = exception;
				// Error Handler
				DatabaseAccess.RollbackAllTransactions();
				// ExceptionFeedbackMessage
				Actions.ActionFeedback_Message(heContext, ((string) Global.App.OsContext.Session["ExceptionMessage"]), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("htKb+xw1b0eZ4Wacii2S8w")).ssId);
				// Update Screen
				return true;
			} // Catch
		}
		/// <summary>
		/// RichWidgets_wt_WebBlockInstance14 Functions
		/// </summary>
		public void RichWidgets_webBlck_WebBlockInstance14_onDataBinding(object sender, System.EventArgs e) {
			proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London widget = (proxy_Teste_SAP_RichWidgets.Flows.FlowLayouts.WBlkLayout_London) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance30 Functions
		/// </summary>
		public void webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			ssTeste_SAP.Flows.FlowCommon.WBlkHeader widget = (ssTeste_SAP.Flows.FlowCommon.WBlkHeader) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance28 Functions
		/// </summary>
		public void webBlck_WebBlockInstance28_onDataBinding(object sender, System.EventArgs e) {
			ssTeste_SAP.Flows.FlowCommon.WBlkMenu widget = (ssTeste_SAP.Flows.FlowCommon.WBlkMenu) sender;
			widget.inParamActiveMenuItemId = 0;
			widget.inParamActiveSubMenuItemId = 0;
		}
		/// <summary>
		/// wtContent Functions
		/// </summary>
		public void cntContent_onDataBinding(object sender, System.EventArgs e) {
			cntContent_setInlineAttributes(sender, e);
		}
		public string cntContent_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntContent_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtContent)
		/// </summary>
		/// <returns>The Visible State of wtContent</returns>
		public bool cntContent_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container18 Functions
		/// </summary>
		public void cnt_Container18_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container18_setInlineAttributes(sender, e);
		}
		public string cnt_Container18_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container18_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container18)
		/// </summary>
		/// <returns>The Visible State of wt_Container18</returns>
		public bool cnt_Container18_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container11 Functions
		/// </summary>
		public void cnt_Container11_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container11_setInlineAttributes(sender, e);
		}
		public string cnt_Container11_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container11_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container11)
		/// </summary>
		/// <returns>The Visible State of wt_Container11</returns>
		public bool cnt_Container11_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Text10 Functions
		/// </summary>
		public void wt_Text10_onDataBinding(object sender, System.EventArgs e) {
			wt_Text10_setInlineAttributes(sender, e);
		}
		public string wt_Text10_setInlineAttributes(object sender, System.EventArgs e) {
			{
				string newstyledef;
				string oldstyledef;
				newstyledef = "padding-right: 10px";
				oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
				if (oldstyledef != null) {
					if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
					if (!oldstyledef.EndsWith(newstyledef)) {
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
					}
				} else {
					((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// wt_InlineExpression27 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Ql3isppHC02kDGbk+4ozBA) Expression: Preco
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression27() {
			return OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.RemoveTrailingZeros(Convert.ToString(varLcPreco, FormatInfo.Number), FormatInfo.Number);
		}
		/// <summary>
		/// wt_Button5 Functions
		/// </summary>
		public void btn_Button5_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button5_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandTesteDireto(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button5)
		/// </summary>
		/// <returns>Label of the Button (wt_Button5)</returns>
		public string
		btn_Button5_getLabel() {
			return "Teste Direto SAP";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button5)
		/// </summary>
		/// <returns>The Visible State of wt_Button5</returns>
		public bool btn_Button5_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button5)
		/// </summary>
		/// <returns>The Enabled State of wt_Button5</returns>
		public bool btn_Button5_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container21 Functions
		/// </summary>
		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container21_setInlineAttributes(sender, e);
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container21_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Input3 Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwt_Input3_input_value() {
			if (("" !=varLcCodigoMaterial)) {
				return varLcCodigoMaterial;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wt_Input3");

				if (explicitChangedVariables.Contains(varLcCodigoMaterial) || ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return varLcCodigoMaterial;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwt_Input3_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					varLcCodigoMaterial = ""; 
				} else {
					varLcCodigoMaterial = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				varLcCodigoMaterial = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wt_Input3)
		/// </summary>
		/// <returns>The Visible State of wt_Input3</returns>
		public bool inputwt_Input3_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Input3)
		/// </summary>
		/// <returns>The Enabled State of wt_Input3</returns>
		public bool inputwt_Input3_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwt_Input3)
		/// </summary>
		/// <returns>The Mandatory Value of inputwt_Input3</returns>
		public bool inputwt_Input3_isMandatory() {
			return false;
		}

		/// <summary>
		/// Gets the prompt of the input (wt_Input3)
		/// </summary>
		/// <returns>Prompt of the Input (wt_Input3)</returns>
		public string inputwt_Input3_getPrompt() {
			return "Código do Material";
		}
		/// <summary>
		/// wt_InlineExpression23 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = b95jk+yRcUSUlDSchrX0bQ) Expression: DescricaoMaterial
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression23() {
			return varLcDescricaoMaterial;
		}
		/// <summary>
		/// wt_Button29 Functions
		/// </summary>
		public void btn_Button29_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button29_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandWebServices(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button29)
		/// </summary>
		/// <returns>Label of the Button (wt_Button29)</returns>
		public string
		btn_Button29_getLabel() {
			return "WebServices";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button29)
		/// </summary>
		/// <returns>The Visible State of wt_Button29</returns>
		public bool btn_Button29_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button29)
		/// </summary>
		/// <returns>The Enabled State of wt_Button29</returns>
		public bool btn_Button29_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container4 Functions
		/// </summary>
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container4_setInlineAttributes(sender, e);
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container4_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container15 Functions
		/// </summary>
		public void cnt_Container15_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container15_setInlineAttributes(sender, e);
		}
		public string cnt_Container15_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container15_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container15)
		/// </summary>
		/// <returns>The Visible State of wt_Container15</returns>
		public bool cnt_Container15_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container26 Functions
		/// </summary>
		public void cnt_Container26_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container26_setInlineAttributes(sender, e);
		}
		public string cnt_Container26_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container26_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container26)
		/// </summary>
		/// <returns>The Visible State of wt_Container26</returns>
		public bool cnt_Container26_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Button7 Functions
		/// </summary>
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button7_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandDownloadExcel(heContext)) {
				doRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button7)
		/// </summary>
		/// <returns>Label of the Button (wt_Button7)</returns>
		public string
		btn_Button7_getLabel() {
			return "Download Excel";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button7)
		/// </summary>
		/// <returns>The Visible State of wt_Button7</returns>
		public bool btn_Button7_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button7)
		/// </summary>
		/// <returns>The Enabled State of wt_Button7</returns>
		public bool btn_Button7_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container13 Functions
		/// </summary>
		public void cnt_Container13_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container13_setInlineAttributes(sender, e);
		}
		public string cnt_Container13_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container13_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container13)
		/// </summary>
		/// <returns>The Visible State of wt_Container13</returns>
		public bool cnt_Container13_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Button25 Functions
		/// </summary>
		public void btn_Button25_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button25_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandTesteLog(heContext, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button25)
		/// </summary>
		/// <returns>Label of the Button (wt_Button25)</returns>
		public string
		btn_Button25_getLabel() {
			return "Teste Error Log";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button25)
		/// </summary>
		/// <returns>The Visible State of wt_Button25</returns>
		public bool btn_Button25_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button25)
		/// </summary>
		/// <returns>The Enabled State of wt_Button25</returns>
		public bool btn_Button25_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Container17 Functions
		/// </summary>
		public void cnt_Container17_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container17_setInlineAttributes(sender, e);
		}
		public string cnt_Container17_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container17_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container17)
		/// </summary>
		/// <returns>The Visible State of wt_Container17</returns>
		public bool cnt_Container17_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Button20 Functions
		/// </summary>
		public void btn_Button20_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button20_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandTesteLog(heContext, false)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button20)
		/// </summary>
		/// <returns>Label of the Button (wt_Button20)</returns>
		public string
		btn_Button20_getLabel() {
			return "Teste General Log";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button20)
		/// </summary>
		/// <returns>The Visible State of wt_Button20</returns>
		public bool btn_Button20_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button20)
		/// </summary>
		/// <returns>The Enabled State of wt_Button20</returns>
		public bool btn_Button20_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_WebBlockInstance2 Functions
		/// </summary>
		public void webBlck_WebBlockInstance2_onDataBinding(object sender, System.EventArgs e) {
			ssTeste_SAP.Flows.FlowCommon.WBlkFooter widget = (ssTeste_SAP.Flows.FlowCommon.WBlkFooter) sender;
		}


		public static class FuncCommandTesteDireto {
		}
		public static class FuncCommandWebServices {
		}
		public static class FuncCommandDownloadExcel {
			/// <summary>
			/// RecordList To Excel: RLToExcelRecordListToExcel1 of Action "DownloadExcel"
			/// </summary>

			public static void RLToExcelRecordListToExcel1(HeContext heContext, RLGetPhotosResponseList ssRecordList, out byte[] outParamOut) {
				GemBoxLicensing.SetLicense();

				GemBox.Spreadsheet.ExcelFile excelFile = new GemBox.Spreadsheet.ExcelFile();
				GemBox.Spreadsheet.ExcelWorksheet ws = excelFile.Worksheets.Add("Sheet1");

				ws.Cells[0, 0] .Value = "Album";
				ws.Cells[0, 1] .Value = "Id";
				ws.Cells[0, 2] .Value = "Title";
				ws.Cells[0, 3] .Value = "Url";
				ws.Cells[0, 4] .Value = "Thumbnail Url";


				int i = 1;
				if (!ssRecordList.Empty) {
					try {
						ssRecordList.StartIteration();
						DateTime nullDateTime = new DateTime(1900, 1, 1, 0, 0, 0);
						while (!ssRecordList.Eof) {

							ws.Cells[i, 0] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssAlbumId);
							ws.Cells[i, 1] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssId);
							ws.Cells[i, 2] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssTitle);
							ws.Cells[i, 3] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssUrl);
							ws.Cells[i, 4] .Value = RuntimePlatformUtils.ExcelFixWrongDateTimeVals(ssRecordList.CurrentRec.ssThumbnailUrl);


							ssRecordList.Advance();
							i++;
						}
					} finally {
						ssRecordList.EndIteration();
					}
				}
				System.IO.MemoryStream stream = new System.IO.MemoryStream();
				if (Settings.GetBool(Settings.Configs.GenerateLegacyExcell2003)) {
					excelFile.SaveXls(stream);
				} else {
					excelFile.SaveXlsx(stream);
				}
				outParamOut = stream.ToArray();

			}
		}
		public static class FuncCommandTesteLog {
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssTeste_SAP.Global.eSpaceId;
				Title = "HomePage"; Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "HomePage", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Screen", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			int oldCurrentESpaceId = heContext.CurrentESpaceId;
			try {
				heContext.CurrentESpaceId = ssTeste_SAP.Global.eSpaceId;
				// Perform the partial databind
				Page.DataBind();
				RequestTracer perfTracer = RuntimePlatformUtils.GetRequestTracer(); if (perfTracer != null) {
					perfTracer.RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "HomePage", heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id, heContext.Session.UserId, (string) heContext.Session["MSISDN"], "WEB", "Ajax", Environment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceId = oldCurrentESpaceId;
			}
			StoreWebScreenStackViewState();

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		public override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcPreco", varLcPreco, 0.0M);
			ViewStateAttributes.SetInViewState("varLcCodigoMaterial", varLcCodigoMaterial, "");
			ViewStateAttributes.SetInViewState("varLcDescricaoMaterial", varLcDescricaoMaterial, "");
			ViewStateAttributes.SetInViewState("wt_Input3_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wt_Input3")).Mandatory, false);
			((OSPageViewState) Page).RemoveStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				varLcPreco = (decimal) ViewStateAttributes.GetFromViewState("varLcPreco", 0.0M);
				varLcCodigoMaterial = (string) ViewStateAttributes.GetFromViewState("varLcCodigoMaterial", "");
				varLcDescricaoMaterial = (string) ViewStateAttributes.GetFromViewState("varLcDescricaoMaterial", "");
				((IWidgetRuntimeProperties) this.FindControl("wt_Input3")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wt_Input3_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wt_Input3", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}




}
