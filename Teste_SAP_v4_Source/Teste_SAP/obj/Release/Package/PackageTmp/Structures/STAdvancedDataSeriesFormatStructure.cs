/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STAdvancedDataSeriesFormatStructure</code> that represents the Service Studio
	///  structure <code>AdvancedDataSeriesFormat</code> <p> Description: Information to format a dat
	/// a series using Highcharts JSON.</p>
	/// </summary>
	[Serializable()]
	public partial struct STAdvancedDataSeriesFormatStructure: ISerializable, ITypedRecord<STAdvancedDataSeriesFormatStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdDataSeriesName = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*NS6AAqr2s0OCX6XQIUHhrQ");
		private static readonly GlobalObjectKey IdDataSeriesJSON = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*U9ztd9_WuUKMTUedxXt5wA");

		public static void EnsureInitialized() {}

		static STAdvancedDataSeriesFormatStructure() {
			global::ssTeste_SAP.STAdvancedDataSeriesFormatStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("DataSeriesName")]
		public string ssDataSeriesName;

		[System.Xml.Serialization.XmlElement("DataSeriesJSON")]
		public string ssDataSeriesJSON;


		public BitArray OptimizedAttributes;

		public STAdvancedDataSeriesFormatStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssDataSeriesName = "";
			ssDataSeriesJSON = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssDataSeriesName = r.ReadText(index++, "AdvancedDataSeriesFormat.DataSeriesName", "");
			ssDataSeriesJSON = r.ReadText(index++, "AdvancedDataSeriesFormat.DataSeriesJSON", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STAdvancedDataSeriesFormatStructure r) {
			this = r;
		}


		public static bool operator == (STAdvancedDataSeriesFormatStructure a, STAdvancedDataSeriesFormatStructure b) {
			if (a.ssDataSeriesName != b.ssDataSeriesName) return false;
			if (a.ssDataSeriesJSON != b.ssDataSeriesJSON) return false;
			return true;
		}

		public static bool operator != (STAdvancedDataSeriesFormatStructure a, STAdvancedDataSeriesFormatStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STAdvancedDataSeriesFormatStructure)) return false;
			return (this == (STAdvancedDataSeriesFormatStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssDataSeriesName.GetHashCode()
				^ ssDataSeriesJSON.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STAdvancedDataSeriesFormatStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssDataSeriesName = "";
			ssDataSeriesJSON = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssDataSeriesName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDataSeriesName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDataSeriesName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDataSeriesJSON", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDataSeriesJSON' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDataSeriesJSON = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STAdvancedDataSeriesFormatStructure Duplicate() {
			STAdvancedDataSeriesFormatStructure t;
			t.ssDataSeriesName = this.ssDataSeriesName;
			t.ssDataSeriesJSON = this.ssDataSeriesJSON;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DataSeriesName")) VarValue.AppendAttribute(recordElem, "DataSeriesName", ssDataSeriesName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DataSeriesName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DataSeriesJSON")) VarValue.AppendAttribute(recordElem, "DataSeriesJSON", ssDataSeriesJSON, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DataSeriesJSON");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "dataseriesname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DataSeriesName")) variable.Value = ssDataSeriesName; else variable.Optimized = true;
			} else if (head == "dataseriesjson") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DataSeriesJSON")) variable.Value = ssDataSeriesJSON; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDataSeriesName) {
				return ssDataSeriesName;
			} else if (key == IdDataSeriesJSON) {
				return ssDataSeriesJSON;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssDataSeriesName = (string) other.AttributeGet(IdDataSeriesName);
			ssDataSeriesJSON = (string) other.AttributeGet(IdDataSeriesJSON);
		}
	} // STAdvancedDataSeriesFormatStructure
	/// <summary>
	/// Structure <code>RCAdvancedDataSeriesFormatRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCAdvancedDataSeriesFormatRecord: ISerializable, ITypedRecord<RCAdvancedDataSeriesFormatRecord> {
		private static readonly GlobalObjectKey IdAdvancedDataSeriesFormat = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*hXSCDQWlKWTyThwrEaopUw");

		public static void EnsureInitialized() {}

		static RCAdvancedDataSeriesFormatRecord() {
			global::ssTeste_SAP.RCAdvancedDataSeriesFormatRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("AdvancedDataSeriesFormat")]
		public STAdvancedDataSeriesFormatStructure ssSTAdvancedDataSeriesFormat;


		public static implicit operator STAdvancedDataSeriesFormatStructure(RCAdvancedDataSeriesFormatRecord r) {
			return r.ssSTAdvancedDataSeriesFormat;
		}

		public static implicit operator RCAdvancedDataSeriesFormatRecord(STAdvancedDataSeriesFormatStructure r) {
			RCAdvancedDataSeriesFormatRecord res = new RCAdvancedDataSeriesFormatRecord(null);
			res.ssSTAdvancedDataSeriesFormat = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCAdvancedDataSeriesFormatRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTAdvancedDataSeriesFormat = new STAdvancedDataSeriesFormatStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTAdvancedDataSeriesFormat.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTAdvancedDataSeriesFormat.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCAdvancedDataSeriesFormatRecord r) {
			this = r;
		}


		public static bool operator == (RCAdvancedDataSeriesFormatRecord a, RCAdvancedDataSeriesFormatRecord b) {
			if (a.ssSTAdvancedDataSeriesFormat != b.ssSTAdvancedDataSeriesFormat) return false;
			return true;
		}

		public static bool operator != (RCAdvancedDataSeriesFormatRecord a, RCAdvancedDataSeriesFormatRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCAdvancedDataSeriesFormatRecord)) return false;
			return (this == (RCAdvancedDataSeriesFormatRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTAdvancedDataSeriesFormat.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCAdvancedDataSeriesFormatRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTAdvancedDataSeriesFormat = new STAdvancedDataSeriesFormatStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTAdvancedDataSeriesFormat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTAdvancedDataSeriesFormat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTAdvancedDataSeriesFormat = (STAdvancedDataSeriesFormatStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTAdvancedDataSeriesFormat.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTAdvancedDataSeriesFormat.InternalRecursiveSave();
		}


		public RCAdvancedDataSeriesFormatRecord Duplicate() {
			RCAdvancedDataSeriesFormatRecord t;
			t.ssSTAdvancedDataSeriesFormat = (STAdvancedDataSeriesFormatStructure) this.ssSTAdvancedDataSeriesFormat.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTAdvancedDataSeriesFormat.ToXml(this, recordElem, "AdvancedDataSeriesFormat", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "advanceddataseriesformat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".AdvancedDataSeriesFormat")) variable.Value = ssSTAdvancedDataSeriesFormat; else variable.Optimized = true;
				variable.SetFieldName("advanceddataseriesformat");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdAdvancedDataSeriesFormat) {
				return ssSTAdvancedDataSeriesFormat;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTAdvancedDataSeriesFormat.FillFromOther((IRecord) other.AttributeGet(IdAdvancedDataSeriesFormat));
		}
	} // RCAdvancedDataSeriesFormatRecord
	/// <summary>
	/// RecordList type <code>RLAdvancedDataSeriesFormatRecordList</code> that represents a record list of
	///  <code>AdvancedDataSeriesFormat</code>
	/// </summary>
	[Serializable()]
	public partial class RLAdvancedDataSeriesFormatRecordList: GenericRecordList<RCAdvancedDataSeriesFormatRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLAdvancedDataSeriesFormatRecordList() {
			global::ssTeste_SAP.RLAdvancedDataSeriesFormatRecordListTypeFactoryImpl.InitializeFactory();
		}

		protected override RCAdvancedDataSeriesFormatRecord GetElementDefaultValue() {
			return new RCAdvancedDataSeriesFormatRecord("");
		}

		public T[] ToArray<T>(Func<RCAdvancedDataSeriesFormatRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAdvancedDataSeriesFormatRecordList recordlist, Func<RCAdvancedDataSeriesFormatRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAdvancedDataSeriesFormatRecordList ToList<T>(T[] array, Func <T, RCAdvancedDataSeriesFormatRecord> converter) {
			RLAdvancedDataSeriesFormatRecordList result = new RLAdvancedDataSeriesFormatRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAdvancedDataSeriesFormatRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAdvancedDataSeriesFormatRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAdvancedDataSeriesFormatRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAdvancedDataSeriesFormatRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCAdvancedDataSeriesFormatRecord> NewList() {
			return new RLAdvancedDataSeriesFormatRecordList();
		}


	} // RLAdvancedDataSeriesFormatRecordList
	/// <summary>
	/// RecordList type <code>RLAdvancedDataSeriesFormatList</code> that represents a record list of
	///  <code>Text, Text</code>
	/// </summary>
	[Serializable()]
	public partial class RLAdvancedDataSeriesFormatList: GenericRecordList<STAdvancedDataSeriesFormatStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STAdvancedDataSeriesFormatStructure GetElementDefaultValue() {
			return new STAdvancedDataSeriesFormatStructure("");
		}

		public T[] ToArray<T>(Func<STAdvancedDataSeriesFormatStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLAdvancedDataSeriesFormatList recordlist, Func<STAdvancedDataSeriesFormatStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLAdvancedDataSeriesFormatList ToList<T>(T[] array, Func <T, STAdvancedDataSeriesFormatStructure> converter) {
			RLAdvancedDataSeriesFormatList result = new RLAdvancedDataSeriesFormatList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLAdvancedDataSeriesFormatList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAdvancedDataSeriesFormatList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLAdvancedDataSeriesFormatList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLAdvancedDataSeriesFormatList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STAdvancedDataSeriesFormatStructure> NewList() {
			return new RLAdvancedDataSeriesFormatList();
		}


	} // RLAdvancedDataSeriesFormatList
}

namespace ssTeste_SAP {
	[XmlType("AdvancedDataSeriesFormat")]
	public class WORCAdvancedDataSeriesFormatRecord {
		[System.Xml.Serialization.XmlElement("DataSeriesName")]
		public string varWSDataSeriesName;

		[System.Xml.Serialization.XmlElement("DataSeriesJSON")]
		public string varWSDataSeriesJSON;

		public WORCAdvancedDataSeriesFormatRecord() {
			varWSDataSeriesName = (string) "";
			varWSDataSeriesJSON = (string) "";
		}

		public WORCAdvancedDataSeriesFormatRecord(STAdvancedDataSeriesFormatStructure r) {
			varWSDataSeriesName = BaseAppUtils.RemoveControlChars(r.ssDataSeriesName);
			varWSDataSeriesJSON = BaseAppUtils.RemoveControlChars(r.ssDataSeriesJSON);
		}

		public static RLAdvancedDataSeriesFormatList ToRecordList(WORCAdvancedDataSeriesFormatRecord[] array) {
			RLAdvancedDataSeriesFormatList rl = new RLAdvancedDataSeriesFormatList();
			if (array != null) {
				foreach(WORCAdvancedDataSeriesFormatRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCAdvancedDataSeriesFormatRecord[] FromRecordList(RLAdvancedDataSeriesFormatList rl) {
			WORCAdvancedDataSeriesFormatRecord[] array = new WORCAdvancedDataSeriesFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCAdvancedDataSeriesFormatRecord {
		public static implicit operator WORCAdvancedDataSeriesFormatRecord(RCAdvancedDataSeriesFormatRecord r) {
			return new WORCAdvancedDataSeriesFormatRecord(r.ssSTAdvancedDataSeriesFormat);
		}

		public static implicit operator RCAdvancedDataSeriesFormatRecord(WORCAdvancedDataSeriesFormatRecord w) {
			RCAdvancedDataSeriesFormatRecord r = new RCAdvancedDataSeriesFormatRecord("");
			if (w != null) {
				r.ssSTAdvancedDataSeriesFormat = w;
			}
			return r;
		}

	}

	partial struct STAdvancedDataSeriesFormatStructure {
		public static implicit operator WORCAdvancedDataSeriesFormatRecord(STAdvancedDataSeriesFormatStructure r) {
			return new WORCAdvancedDataSeriesFormatRecord(r);
		}

		public static implicit operator STAdvancedDataSeriesFormatStructure(WORCAdvancedDataSeriesFormatRecord w) {
			STAdvancedDataSeriesFormatStructure r = new STAdvancedDataSeriesFormatStructure("");
			if (w != null) {
				r.ssDataSeriesName = ((string) w.varWSDataSeriesName ?? "");
				r.ssDataSeriesJSON = ((string) w.varWSDataSeriesJSON ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLAdvancedDataSeriesFormatRecordList {
		public WORCAdvancedDataSeriesFormatRecord[] Array;


		public WORLAdvancedDataSeriesFormatRecordList(WORCAdvancedDataSeriesFormatRecord[] r) {
			if (r == null)
			Array = new WORCAdvancedDataSeriesFormatRecord[0];
			else
			Array = r;
		}
		public WORLAdvancedDataSeriesFormatRecordList() {
			Array = new WORCAdvancedDataSeriesFormatRecord[0];
		}

		public WORLAdvancedDataSeriesFormatRecordList(RLAdvancedDataSeriesFormatRecordList rl) {
			rl=(RLAdvancedDataSeriesFormatRecordList) rl.Duplicate();
			Array = new WORCAdvancedDataSeriesFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCAdvancedDataSeriesFormatRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLAdvancedDataSeriesFormatRecordList {
		public static implicit operator RLAdvancedDataSeriesFormatRecordList(WORCAdvancedDataSeriesFormatRecord[] array) {
			RLAdvancedDataSeriesFormatRecordList rl = new RLAdvancedDataSeriesFormatRecordList();
			if (array != null) {
				foreach(WORCAdvancedDataSeriesFormatRecord val in array) {
					rl.Append((RCAdvancedDataSeriesFormatRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAdvancedDataSeriesFormatRecord[](RLAdvancedDataSeriesFormatRecordList rl) {
			WORCAdvancedDataSeriesFormatRecord[] array = new WORCAdvancedDataSeriesFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCAdvancedDataSeriesFormatRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLAdvancedDataSeriesFormatRecordList {
		public static implicit operator RLAdvancedDataSeriesFormatRecordList(WORLAdvancedDataSeriesFormatRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLAdvancedDataSeriesFormatRecordList(RLAdvancedDataSeriesFormatRecordList rl) {
			return new WORLAdvancedDataSeriesFormatRecordList(rl);
		}
		public static implicit operator WORCAdvancedDataSeriesFormatRecord[](WORLAdvancedDataSeriesFormatRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAdvancedDataSeriesFormatRecordList(WORCAdvancedDataSeriesFormatRecord[] array) {
			return new WORLAdvancedDataSeriesFormatRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLAdvancedDataSeriesFormatList {
		public WORCAdvancedDataSeriesFormatRecord[] Array;


		public WORLAdvancedDataSeriesFormatList(WORCAdvancedDataSeriesFormatRecord[] r) {
			if (r == null)
			Array = new WORCAdvancedDataSeriesFormatRecord[0];
			else
			Array = r;
		}
		public WORLAdvancedDataSeriesFormatList() {
			Array = new WORCAdvancedDataSeriesFormatRecord[0];
		}

		public WORLAdvancedDataSeriesFormatList(RLAdvancedDataSeriesFormatList rl) {
			rl=(RLAdvancedDataSeriesFormatList) rl.Duplicate();
			Array = new WORCAdvancedDataSeriesFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLAdvancedDataSeriesFormatList {
		public static implicit operator RLAdvancedDataSeriesFormatList(WORCAdvancedDataSeriesFormatRecord[] array) {
			RLAdvancedDataSeriesFormatList rl = new RLAdvancedDataSeriesFormatList();
			if (array != null) {
				foreach(WORCAdvancedDataSeriesFormatRecord val in array) {
					rl.Append((STAdvancedDataSeriesFormatStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCAdvancedDataSeriesFormatRecord[](RLAdvancedDataSeriesFormatList rl) {
			WORCAdvancedDataSeriesFormatRecord[] array = new WORCAdvancedDataSeriesFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STAdvancedDataSeriesFormatStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLAdvancedDataSeriesFormatList {
		public static implicit operator RLAdvancedDataSeriesFormatList(WORLAdvancedDataSeriesFormatList w) {
			return w.Array;
		}
		public static implicit operator WORLAdvancedDataSeriesFormatList(RLAdvancedDataSeriesFormatList rl) {
			return new WORLAdvancedDataSeriesFormatList(rl);
		}
		public static implicit operator WORCAdvancedDataSeriesFormatRecord[](WORLAdvancedDataSeriesFormatList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLAdvancedDataSeriesFormatList(WORCAdvancedDataSeriesFormatRecord[] array) {
			return new WORLAdvancedDataSeriesFormatList(array);
		}
	}
}

