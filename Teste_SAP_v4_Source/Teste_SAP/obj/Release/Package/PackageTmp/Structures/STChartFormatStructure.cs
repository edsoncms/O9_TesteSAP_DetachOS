/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STChartFormatStructure</code> that represents the Service Studio structure
	///  <code>ChartFormat</code> <p> Description: Information to format the chart.</p>
	/// </summary>
	[Serializable()]
	public partial struct STChartFormatStructure: ISerializable, ITypedRecord<STChartFormatStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdShowDataPointValues = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*G3Uxg5T9uESNS2mJlphFtg");
		private static readonly GlobalObjectKey IdUseAnimation = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*MLoPvqobV0yP45l67NNl+g");

		public static void EnsureInitialized() {}

		static STChartFormatStructure() {
			global::ssTeste_SAP.STChartFormatStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("ShowDataPointValues")]
		public bool ssShowDataPointValues;

		[System.Xml.Serialization.XmlElement("UseAnimation")]
		public bool ssUseAnimation;


		public BitArray OptimizedAttributes;

		public STChartFormatStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssShowDataPointValues = false;
			ssUseAnimation = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssShowDataPointValues = r.ReadBoolean(index++, "ChartFormat.ShowDataPointValues", false);
			ssUseAnimation = r.ReadBoolean(index++, "ChartFormat.UseAnimation", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STChartFormatStructure r) {
			this = r;
		}


		public static bool operator == (STChartFormatStructure a, STChartFormatStructure b) {
			if (a.ssShowDataPointValues != b.ssShowDataPointValues) return false;
			if (a.ssUseAnimation != b.ssUseAnimation) return false;
			return true;
		}

		public static bool operator != (STChartFormatStructure a, STChartFormatStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STChartFormatStructure)) return false;
			return (this == (STChartFormatStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssShowDataPointValues.GetHashCode()
				^ ssUseAnimation.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STChartFormatStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssShowDataPointValues = false;
			ssUseAnimation = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssShowDataPointValues", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssShowDataPointValues' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssShowDataPointValues = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssUseAnimation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssUseAnimation' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssUseAnimation = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STChartFormatStructure Duplicate() {
			STChartFormatStructure t;
			t.ssShowDataPointValues = this.ssShowDataPointValues;
			t.ssUseAnimation = this.ssUseAnimation;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ShowDataPointValues")) VarValue.AppendAttribute(recordElem, "ShowDataPointValues", ssShowDataPointValues, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "ShowDataPointValues");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UseAnimation")) VarValue.AppendAttribute(recordElem, "UseAnimation", ssUseAnimation, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "UseAnimation");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "showdatapointvalues") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ShowDataPointValues")) variable.Value = ssShowDataPointValues; else variable.Optimized = true;
			} else if (head == "useanimation") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UseAnimation")) variable.Value = ssUseAnimation; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdShowDataPointValues) {
				return ssShowDataPointValues;
			} else if (key == IdUseAnimation) {
				return ssUseAnimation;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssShowDataPointValues = (bool) other.AttributeGet(IdShowDataPointValues);
			ssUseAnimation = (bool) other.AttributeGet(IdUseAnimation);
		}
	} // STChartFormatStructure
	/// <summary>
	/// Structure <code>RCChartFormatRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCChartFormatRecord: ISerializable, ITypedRecord<RCChartFormatRecord> {
		private static readonly GlobalObjectKey IdChartFormat = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*Xk6UGuS0iVNrbbFZBuWpFg");

		public static void EnsureInitialized() {}

		static RCChartFormatRecord() {
			global::ssTeste_SAP.RCChartFormatRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("ChartFormat")]
		public STChartFormatStructure ssSTChartFormat;


		public static implicit operator STChartFormatStructure(RCChartFormatRecord r) {
			return r.ssSTChartFormat;
		}

		public static implicit operator RCChartFormatRecord(STChartFormatStructure r) {
			RCChartFormatRecord res = new RCChartFormatRecord(null);
			res.ssSTChartFormat = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCChartFormatRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTChartFormat = new STChartFormatStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTChartFormat.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTChartFormat.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCChartFormatRecord r) {
			this = r;
		}


		public static bool operator == (RCChartFormatRecord a, RCChartFormatRecord b) {
			if (a.ssSTChartFormat != b.ssSTChartFormat) return false;
			return true;
		}

		public static bool operator != (RCChartFormatRecord a, RCChartFormatRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCChartFormatRecord)) return false;
			return (this == (RCChartFormatRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTChartFormat.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCChartFormatRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTChartFormat = new STChartFormatStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTChartFormat", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTChartFormat' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTChartFormat = (STChartFormatStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTChartFormat.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTChartFormat.InternalRecursiveSave();
		}


		public RCChartFormatRecord Duplicate() {
			RCChartFormatRecord t;
			t.ssSTChartFormat = (STChartFormatStructure) this.ssSTChartFormat.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTChartFormat.ToXml(this, recordElem, "ChartFormat", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "chartformat") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ChartFormat")) variable.Value = ssSTChartFormat; else variable.Optimized = true;
				variable.SetFieldName("chartformat");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdChartFormat) {
				return ssSTChartFormat;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTChartFormat.FillFromOther((IRecord) other.AttributeGet(IdChartFormat));
		}
	} // RCChartFormatRecord
	/// <summary>
	/// RecordList type <code>RLChartFormatRecordList</code> that represents a record list of
	///  <code>ChartFormat</code>
	/// </summary>
	[Serializable()]
	public partial class RLChartFormatRecordList: GenericRecordList<RCChartFormatRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCChartFormatRecord GetElementDefaultValue() {
			return new RCChartFormatRecord("");
		}

		public T[] ToArray<T>(Func<RCChartFormatRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLChartFormatRecordList recordlist, Func<RCChartFormatRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLChartFormatRecordList ToList<T>(T[] array, Func <T, RCChartFormatRecord> converter) {
			RLChartFormatRecordList result = new RLChartFormatRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLChartFormatRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLChartFormatRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLChartFormatRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLChartFormatRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCChartFormatRecord> NewList() {
			return new RLChartFormatRecordList();
		}


	} // RLChartFormatRecordList
	/// <summary>
	/// RecordList type <code>RLChartFormatList</code> that represents a record list of <code>Boolean,
	///  Boolean</code>
	/// </summary>
	[Serializable()]
	public partial class RLChartFormatList: GenericRecordList<STChartFormatStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STChartFormatStructure GetElementDefaultValue() {
			return new STChartFormatStructure("");
		}

		public T[] ToArray<T>(Func<STChartFormatStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLChartFormatList recordlist, Func<STChartFormatStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLChartFormatList ToList<T>(T[] array, Func <T, STChartFormatStructure> converter) {
			RLChartFormatList result = new RLChartFormatList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLChartFormatList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLChartFormatList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLChartFormatList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLChartFormatList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STChartFormatStructure> NewList() {
			return new RLChartFormatList();
		}


	} // RLChartFormatList
}

namespace ssTeste_SAP {
	[XmlType("ChartFormat")]
	public class WORCChartFormatRecord {
		[System.Xml.Serialization.XmlElement("ShowDataPointValues")]
		public bool varWSShowDataPointValues;

		[System.Xml.Serialization.XmlElement("UseAnimation")]
		public bool varWSUseAnimation;

		public WORCChartFormatRecord() {
			varWSShowDataPointValues = (bool) false;
			varWSUseAnimation = (bool) false;
		}

		public WORCChartFormatRecord(STChartFormatStructure r) {
			varWSShowDataPointValues = (bool) r.ssShowDataPointValues;
			varWSUseAnimation = (bool) r.ssUseAnimation;
		}

		public static RLChartFormatList ToRecordList(WORCChartFormatRecord[] array) {
			RLChartFormatList rl = new RLChartFormatList();
			if (array != null) {
				foreach(WORCChartFormatRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCChartFormatRecord[] FromRecordList(RLChartFormatList rl) {
			WORCChartFormatRecord[] array = new WORCChartFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCChartFormatRecord {
		public static implicit operator WORCChartFormatRecord(RCChartFormatRecord r) {
			return new WORCChartFormatRecord(r.ssSTChartFormat);
		}

		public static implicit operator RCChartFormatRecord(WORCChartFormatRecord w) {
			RCChartFormatRecord r = new RCChartFormatRecord("");
			if (w != null) {
				r.ssSTChartFormat = w;
			}
			return r;
		}

	}

	partial struct STChartFormatStructure {
		public static implicit operator WORCChartFormatRecord(STChartFormatStructure r) {
			return new WORCChartFormatRecord(r);
		}

		public static implicit operator STChartFormatStructure(WORCChartFormatRecord w) {
			STChartFormatStructure r = new STChartFormatStructure("");
			if (w != null) {
				r.ssShowDataPointValues = (bool) w.varWSShowDataPointValues;
				r.ssUseAnimation = (bool) w.varWSUseAnimation;
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLChartFormatRecordList {
		public WORCChartFormatRecord[] Array;


		public WORLChartFormatRecordList(WORCChartFormatRecord[] r) {
			if (r == null)
			Array = new WORCChartFormatRecord[0];
			else
			Array = r;
		}
		public WORLChartFormatRecordList() {
			Array = new WORCChartFormatRecord[0];
		}

		public WORLChartFormatRecordList(RLChartFormatRecordList rl) {
			rl=(RLChartFormatRecordList) rl.Duplicate();
			Array = new WORCChartFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCChartFormatRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLChartFormatRecordList {
		public static implicit operator RLChartFormatRecordList(WORCChartFormatRecord[] array) {
			RLChartFormatRecordList rl = new RLChartFormatRecordList();
			if (array != null) {
				foreach(WORCChartFormatRecord val in array) {
					rl.Append((RCChartFormatRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCChartFormatRecord[](RLChartFormatRecordList rl) {
			WORCChartFormatRecord[] array = new WORCChartFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCChartFormatRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLChartFormatRecordList {
		public static implicit operator RLChartFormatRecordList(WORLChartFormatRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLChartFormatRecordList(RLChartFormatRecordList rl) {
			return new WORLChartFormatRecordList(rl);
		}
		public static implicit operator WORCChartFormatRecord[](WORLChartFormatRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLChartFormatRecordList(WORCChartFormatRecord[] array) {
			return new WORLChartFormatRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLChartFormatList {
		public WORCChartFormatRecord[] Array;


		public WORLChartFormatList(WORCChartFormatRecord[] r) {
			if (r == null)
			Array = new WORCChartFormatRecord[0];
			else
			Array = r;
		}
		public WORLChartFormatList() {
			Array = new WORCChartFormatRecord[0];
		}

		public WORLChartFormatList(RLChartFormatList rl) {
			rl=(RLChartFormatList) rl.Duplicate();
			Array = new WORCChartFormatRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLChartFormatList {
		public static implicit operator RLChartFormatList(WORCChartFormatRecord[] array) {
			RLChartFormatList rl = new RLChartFormatList();
			if (array != null) {
				foreach(WORCChartFormatRecord val in array) {
					rl.Append((STChartFormatStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCChartFormatRecord[](RLChartFormatList rl) {
			WORCChartFormatRecord[] array = new WORCChartFormatRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STChartFormatStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLChartFormatList {
		public static implicit operator RLChartFormatList(WORLChartFormatList w) {
			return w.Array;
		}
		public static implicit operator WORLChartFormatList(RLChartFormatList rl) {
			return new WORLChartFormatList(rl);
		}
		public static implicit operator WORCChartFormatRecord[](WORLChartFormatList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLChartFormatList(WORCChartFormatRecord[] array) {
			return new WORLChartFormatList(array);
		}
	}
}

