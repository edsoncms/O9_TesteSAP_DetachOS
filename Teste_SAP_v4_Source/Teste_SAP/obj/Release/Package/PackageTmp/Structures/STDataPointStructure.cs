/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;

namespace ssTeste_SAP {
	/// <summary>
	/// Structure <code>STDataPointStructure</code> that represents the Service Studio structure
	///  <code>DataPoint</code> <p> Description: Information to plot a data point on the chart.</p>
	/// </summary>
	[Serializable()]
	public partial struct STDataPointStructure: ISerializable, ITypedRecord<STDataPointStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*c0X+4beCR0yG_nrQ6rfwJg");
		private static readonly GlobalObjectKey IdValue = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*qaxFnCPFm0K4Oa41xF0GBg");
		private static readonly GlobalObjectKey IdDataSeriesName = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*91NCzOzTOEi_nZRcCMgU_Q");
		private static readonly GlobalObjectKey IdTooltip = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*2XrVm82xZ0KLssJWEcp9GQ");
		private static readonly GlobalObjectKey IdColor = GlobalObjectKey.Parse("uQHsYT2wwkKZ1wrN3PIifQ*fLGQ7eE5n0+LdlLUqPx1Ag");

		public static void EnsureInitialized() {}

		static STDataPointStructure() {
			global::ssTeste_SAP.STDataPointStructureTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("Label")]
		public string ssLabel;

		[System.Xml.Serialization.XmlElement("Value")]
		public decimal ssValue;

		[System.Xml.Serialization.XmlElement("DataSeriesName")]
		public string ssDataSeriesName;

		[System.Xml.Serialization.XmlElement("Tooltip")]
		public string ssTooltip;

		[System.Xml.Serialization.XmlElement("Color")]
		public string ssColor;


		public BitArray OptimizedAttributes;

		public STDataPointStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssLabel = "";
			ssValue = 0.0M;
			ssDataSeriesName = "";
			ssTooltip = "";
			ssColor = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssLabel = r.ReadText(index++, "DataPoint.Label", "");
			ssValue = r.ReadDecimal(index++, "DataPoint.Value", 0.0M);
			ssDataSeriesName = r.ReadText(index++, "DataPoint.DataSeriesName", "");
			ssTooltip = r.ReadText(index++, "DataPoint.Tooltip", "");
			ssColor = r.ReadText(index++, "DataPoint.Color", "");
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STDataPointStructure r) {
			this = r;
		}


		public static bool operator == (STDataPointStructure a, STDataPointStructure b) {
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssValue != b.ssValue) return false;
			if (a.ssDataSeriesName != b.ssDataSeriesName) return false;
			if (a.ssTooltip != b.ssTooltip) return false;
			if (a.ssColor != b.ssColor) return false;
			return true;
		}

		public static bool operator != (STDataPointStructure a, STDataPointStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STDataPointStructure)) return false;
			return (this == (STDataPointStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssValue.GetHashCode()
				^ ssDataSeriesName.GetHashCode()
				^ ssTooltip.GetHashCode()
				^ ssColor.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STDataPointStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssLabel = "";
			ssValue = 0.0M;
			ssDataSeriesName = "";
			ssTooltip = "";
			ssColor = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssLabel", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssLabel' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssLabel = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssValue", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssValue' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssValue = (decimal) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssDataSeriesName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssDataSeriesName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssDataSeriesName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssTooltip", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssTooltip' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssTooltip = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssColor", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssColor' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssColor = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STDataPointStructure Duplicate() {
			STDataPointStructure t;
			t.ssLabel = this.ssLabel;
			t.ssValue = this.ssValue;
			t.ssDataSeriesName = this.ssDataSeriesName;
			t.ssTooltip = this.ssTooltip;
			t.ssColor = this.ssColor;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Value")) VarValue.AppendAttribute(recordElem, "Value", ssValue, detailLevel, TypeKind.Decimal); else VarValue.AppendOptimizedAttribute(recordElem, "Value");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DataSeriesName")) VarValue.AppendAttribute(recordElem, "DataSeriesName", ssDataSeriesName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "DataSeriesName");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Tooltip")) VarValue.AppendAttribute(recordElem, "Tooltip", ssTooltip, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Tooltip");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Color")) VarValue.AppendAttribute(recordElem, "Color", ssColor, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Color");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "value") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Value")) variable.Value = ssValue; else variable.Optimized = true;
			} else if (head == "dataseriesname") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DataSeriesName")) variable.Value = ssDataSeriesName; else variable.Optimized = true;
			} else if (head == "tooltip") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tooltip")) variable.Value = ssTooltip; else variable.Optimized = true;
			} else if (head == "color") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Color")) variable.Value = ssColor; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdValue) {
				return ssValue;
			} else if (key == IdDataSeriesName) {
				return ssDataSeriesName;
			} else if (key == IdTooltip) {
				return ssTooltip;
			} else if (key == IdColor) {
				return ssColor;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssLabel = (string) other.AttributeGet(IdLabel);
			ssValue = (decimal) other.AttributeGet(IdValue);
			ssDataSeriesName = (string) other.AttributeGet(IdDataSeriesName);
			ssTooltip = (string) other.AttributeGet(IdTooltip);
			ssColor = (string) other.AttributeGet(IdColor);
		}
	} // STDataPointStructure
	/// <summary>
	/// Structure <code>RCDataPointRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCDataPointRecord: ISerializable, ITypedRecord<RCDataPointRecord> {
		private static readonly GlobalObjectKey IdDataPoint = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*UIGZXAr4IJO0W1GhHLqS7Q");

		public static void EnsureInitialized() {}

		static RCDataPointRecord() {
			global::ssTeste_SAP.RCDataPointRecordTypeFactoryImpl.InitializeFactory();
		}
		[System.Xml.Serialization.XmlElement("DataPoint")]
		public STDataPointStructure ssSTDataPoint;


		public static implicit operator STDataPointStructure(RCDataPointRecord r) {
			return r.ssSTDataPoint;
		}

		public static implicit operator RCDataPointRecord(STDataPointStructure r) {
			RCDataPointRecord res = new RCDataPointRecord(null);
			res.ssSTDataPoint = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCDataPointRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTDataPoint = new STDataPointStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTDataPoint.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTDataPoint.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCDataPointRecord r) {
			this = r;
		}


		public static bool operator == (RCDataPointRecord a, RCDataPointRecord b) {
			if (a.ssSTDataPoint != b.ssSTDataPoint) return false;
			return true;
		}

		public static bool operator != (RCDataPointRecord a, RCDataPointRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCDataPointRecord)) return false;
			return (this == (RCDataPointRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTDataPoint.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCDataPointRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTDataPoint = new STDataPointStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTDataPoint", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTDataPoint' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTDataPoint = (STDataPointStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTDataPoint.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTDataPoint.InternalRecursiveSave();
		}


		public RCDataPointRecord Duplicate() {
			RCDataPointRecord t;
			t.ssSTDataPoint = (STDataPointStructure) this.ssSTDataPoint.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTDataPoint.ToXml(this, recordElem, "DataPoint", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "datapoint") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DataPoint")) variable.Value = ssSTDataPoint; else variable.Optimized = true;
				variable.SetFieldName("datapoint");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdDataPoint) {
				return ssSTDataPoint;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTDataPoint.FillFromOther((IRecord) other.AttributeGet(IdDataPoint));
		}
	} // RCDataPointRecord
	/// <summary>
	/// RecordList type <code>RLDataPointRecordList</code> that represents a record list of
	///  <code>DataPoint</code>
	/// </summary>
	[Serializable()]
	public partial class RLDataPointRecordList: GenericRecordList<RCDataPointRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		static RLDataPointRecordList() {
			global::ssTeste_SAP.RLDataPointRecordListTypeFactoryImpl.InitializeFactory();
		}

		protected override RCDataPointRecord GetElementDefaultValue() {
			return new RCDataPointRecord("");
		}

		public T[] ToArray<T>(Func<RCDataPointRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDataPointRecordList recordlist, Func<RCDataPointRecord, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDataPointRecordList ToList<T>(T[] array, Func <T, RCDataPointRecord> converter) {
			RLDataPointRecordList result = new RLDataPointRecordList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDataPointRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDataPointRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDataPointRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDataPointRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCDataPointRecord> NewList() {
			return new RLDataPointRecordList();
		}


	} // RLDataPointRecordList
	/// <summary>
	/// RecordList type <code>RLDataPointList</code> that represents a record list of <code>Text, Text,
	///  Text, Text, Decimal</code>
	/// </summary>
	[Serializable()]
	public partial class RLDataPointList: GenericRecordList<STDataPointStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STDataPointStructure GetElementDefaultValue() {
			return new STDataPointStructure("");
		}

		public T[] ToArray<T>(Func<STDataPointStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLDataPointList recordlist, Func<STDataPointStructure, T> converter) {
			T[] result = new T[recordlist.Length];
			recordlist.StartIteration();
			while (!recordlist.Eof) {
				result[recordlist.CurrentRowNumber] = converter(recordlist.CurrentRec);
				recordlist.Advance();
			}
			recordlist.EndIteration();
			return result;
		}

		public static RLDataPointList ToList<T>(T[] array, Func <T, STDataPointStructure> converter) {
			RLDataPointList result = new RLDataPointList();
			if (array != null) {
				foreach(T item in array) {
					result.Append(converter(item));
				}
			}
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLDataPointList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDataPointList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLDataPointList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLDataPointList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STDataPointStructure> NewList() {
			return new RLDataPointList();
		}


	} // RLDataPointList
}

namespace ssTeste_SAP {
	[XmlType("DataPoint")]
	public class WORCDataPointRecord {
		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Value")]
		public decimal varWSValue;

		[System.Xml.Serialization.XmlElement("DataSeriesName")]
		public string varWSDataSeriesName;

		[System.Xml.Serialization.XmlElement("Tooltip")]
		public string varWSTooltip;

		[System.Xml.Serialization.XmlElement("Color")]
		public string varWSColor;

		public WORCDataPointRecord() {
			varWSLabel = (string) "";
			varWSValue = (decimal) 0.0M;
			varWSDataSeriesName = (string) "";
			varWSTooltip = (string) "";
			varWSColor = (string) "";
		}

		public WORCDataPointRecord(STDataPointStructure r) {
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSValue = (decimal) r.ssValue;
			varWSDataSeriesName = BaseAppUtils.RemoveControlChars(r.ssDataSeriesName);
			varWSTooltip = BaseAppUtils.RemoveControlChars(r.ssTooltip);
			varWSColor = BaseAppUtils.RemoveControlChars(r.ssColor);
		}

		public static RLDataPointList ToRecordList(WORCDataPointRecord[] array) {
			RLDataPointList rl = new RLDataPointList();
			if (array != null) {
				foreach(WORCDataPointRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCDataPointRecord[] FromRecordList(RLDataPointList rl) {
			WORCDataPointRecord[] array = new WORCDataPointRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial struct RCDataPointRecord {
		public static implicit operator WORCDataPointRecord(RCDataPointRecord r) {
			return new WORCDataPointRecord(r.ssSTDataPoint);
		}

		public static implicit operator RCDataPointRecord(WORCDataPointRecord w) {
			RCDataPointRecord r = new RCDataPointRecord("");
			if (w != null) {
				r.ssSTDataPoint = w;
			}
			return r;
		}

	}

	partial struct STDataPointStructure {
		public static implicit operator WORCDataPointRecord(STDataPointStructure r) {
			return new WORCDataPointRecord(r);
		}

		public static implicit operator STDataPointStructure(WORCDataPointRecord w) {
			STDataPointStructure r = new STDataPointStructure("");
			if (w != null) {
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssValue = (decimal) w.varWSValue;
				r.ssDataSeriesName = ((string) w.varWSDataSeriesName ?? "");
				r.ssTooltip = ((string) w.varWSTooltip ?? "");
				r.ssColor = ((string) w.varWSColor ?? "");
			}
			return r;
		}

	}
}


namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLDataPointRecordList {
		public WORCDataPointRecord[] Array;


		public WORLDataPointRecordList(WORCDataPointRecord[] r) {
			if (r == null)
			Array = new WORCDataPointRecord[0];
			else
			Array = r;
		}
		public WORLDataPointRecordList() {
			Array = new WORCDataPointRecord[0];
		}

		public WORLDataPointRecordList(RLDataPointRecordList rl) {
			rl=(RLDataPointRecordList) rl.Duplicate();
			Array = new WORCDataPointRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCDataPointRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLDataPointRecordList {
		public static implicit operator RLDataPointRecordList(WORCDataPointRecord[] array) {
			RLDataPointRecordList rl = new RLDataPointRecordList();
			if (array != null) {
				foreach(WORCDataPointRecord val in array) {
					rl.Append((RCDataPointRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCDataPointRecord[](RLDataPointRecordList rl) {
			WORCDataPointRecord[] array = new WORCDataPointRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCDataPointRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLDataPointRecordList {
		public static implicit operator RLDataPointRecordList(WORLDataPointRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLDataPointRecordList(RLDataPointRecordList rl) {
			return new WORLDataPointRecordList(rl);
		}
		public static implicit operator WORCDataPointRecord[](WORLDataPointRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLDataPointRecordList(WORCDataPointRecord[] array) {
			return new WORLDataPointRecordList(array);
		}
	}
}

namespace ssTeste_SAP {
	[Serializable()]
	public partial class WORLDataPointList {
		public WORCDataPointRecord[] Array;


		public WORLDataPointList(WORCDataPointRecord[] r) {
			if (r == null)
			Array = new WORCDataPointRecord[0];
			else
			Array = r;
		}
		public WORLDataPointList() {
			Array = new WORCDataPointRecord[0];
		}

		public WORLDataPointList(RLDataPointList rl) {
			rl=(RLDataPointList) rl.Duplicate();
			Array = new WORCDataPointRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssTeste_SAP {
	partial class RLDataPointList {
		public static implicit operator RLDataPointList(WORCDataPointRecord[] array) {
			RLDataPointList rl = new RLDataPointList();
			if (array != null) {
				foreach(WORCDataPointRecord val in array) {
					rl.Append((STDataPointStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCDataPointRecord[](RLDataPointList rl) {
			WORCDataPointRecord[] array = new WORCDataPointRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STDataPointStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssTeste_SAP {
	partial class WORLDataPointList {
		public static implicit operator RLDataPointList(WORLDataPointList w) {
			return w.Array;
		}
		public static implicit operator WORLDataPointList(RLDataPointList rl) {
			return new WORLDataPointList(rl);
		}
		public static implicit operator WORCDataPointRecord[](WORLDataPointList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLDataPointList(WORCDataPointRecord[] array) {
			return new WORLDataPointList(array);
		}
	}
}

