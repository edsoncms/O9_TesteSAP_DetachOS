/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Diagnostics;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Security.Cryptography.X509Certificates;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.WebReference;

using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
namespace ssTeste_SAP.WRefSAP {
	[System.CodeDom.Compiler.GeneratedCodeAttribute("CompilerService", "9.1.616.0")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name= "SAPSoap", Namespace= "http://SAP_WebServices/SAP/")]
	public class WRefSAP: SoapHttpClientProtocol {
		public SoapUnknownHeader[] _listHeaders;
		protected PerformanceCounter _requests=null;
		protected PerformanceCounter _requestsPerSec=null;
		protected string _backupUrl;
		protected string _ssWebServiceName;
		private XmlWriterLog _xmlWriterLog;
		private XmlReaderLog _xmlReaderLog;
		private WebHeaderCollection responseHeaders;
		private WebHeaderCollection requestHeaders;
		private HttpStatusCode statusCode;
		private WebReferenceConfiguration config {
			get {
				return OutSystems.HubEdition.RuntimePlatform.RuntimePlatformUtils.GetWebReferenceLoggingConfiguration("35616172-3a62-4088-b118-b561c39104f0", 94); 
			}
		}

		protected override XmlWriter GetWriterForMessage(SoapClientMessage message, int bufferSize) {
			if (config.Trace) {
				_xmlWriterLog = new XmlWriterLog(base.GetWriterForMessage(message, bufferSize), RequestEncoding);
				return _xmlWriterLog;
			}
			else {
				return base.GetWriterForMessage(message, bufferSize);
			}
		}

		private string _payloadRequest {
			get {
				return (_xmlWriterLog == null ? null: _xmlWriterLog.Xml); 
			}
		}

		protected override WebRequest GetWebRequest(Uri uri) {
			System.Net.WebRequest webRequest = base.GetWebRequest(uri);
			HttpWebRequest request = (HttpWebRequest) webRequest;
			requestHeaders = request.Headers;
			return webRequest;
		}

		protected override XmlReader GetReaderForMessage(SoapClientMessage message, int bufferSize) {
			if (config.Trace) {
				_xmlReaderLog = new XmlReaderLog(base.GetReaderForMessage(message, bufferSize));
				return _xmlReaderLog;
			}
			else {
				return base.GetReaderForMessage(message, bufferSize);
			}
		}

		private string _payloadResponse {
			get {
				return (_xmlReaderLog == null ? "": _xmlReaderLog.Xml); 
			}
		}

		protected override WebResponse GetWebResponse(WebRequest request) {
			WebResponse webResponse = base.GetWebResponse(request);
			HttpWebResponse response = (HttpWebResponse) webResponse;
			responseHeaders = webResponse.Headers;
			statusCode = response.StatusCode;
			return webResponse;
		}

		public WRefSAP() {
			Url = RuntimePlatformUtils.GetWebReferenceEffectiveOrDefaultURL("35616172-3a62-4088-b118-b561c39104f0", 94) ?? "";
			_backupUrl=Url;
			_ssWebServiceName = "SAP";
		}

		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SAP_WebServices/SAP/GetMaterialAllDetail", RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		[System.Web.Services.Protocols.SoapHeader("_listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetMaterialAllDetail(
		[System.Xml.Serialization.XmlElementAttribute("CodigoDoMaterial")]
		System.String inWSCodigoDoMaterial
		,[System.Xml.Serialization.XmlIgnoreAttribute()] bool inWSCodigoDoMaterialSpecified
		,[System.Xml.Serialization.XmlElementAttribute("CanalDistribuicao")]
		System.String inWSCanalDistribuicao
		,[System.Xml.Serialization.XmlIgnoreAttribute()] bool inWSCanalDistribuicaoSpecified
		,[System.Xml.Serialization.XmlElementAttribute("OrganizacaoVendas")]
		System.String inWSOrganizacaoVendas
		,[System.Xml.Serialization.XmlIgnoreAttribute()] bool inWSOrganizacaoVendasSpecified
		,[System.Xml.Serialization.XmlElementAttribute("ClientData")]
		out WORCClientdataRecord outWSClientData
		,[System.Xml.Serialization.XmlArrayAttribute("MaterialDescription")]
		out WORCMaterialdescriptionRecord[] outWSMaterialDescription
		,[System.Xml.Serialization.XmlElementAttribute("SalesData")]
		out WORCSalesdataRecord outWSSalesData
		,[System.Xml.Serialization.XmlArrayAttribute("Unityofmeasure")]
		out WORCUnitsofmeasureRecord[] outWSUnityofmeasure
		,[System.Xml.Serialization.XmlElementAttribute("TextoObs")]
		out System.String outWSTextoObs
		,[System.Xml.Serialization.XmlElementAttribute("TextoBasico")]
		out System.String outWSTextoBasico
		,[System.Xml.Serialization.XmlElementAttribute("TextoQm")]
		out System.String outWSTextoQm
		) {
			HeContext __context = Global.App.OsContext;
			WSEnhancementsElement.RefreshWSElement(__context, this, _ssWebServiceName, _backupUrl);
			string __errorLogId = "";
			DateTime __startExecution = DateTime.Now;
			String __message = null;
			String __detail = null;
			String __detailLabel = null;

			try {
				StringBuilder SOAPTrace = new StringBuilder();
				bool failedRequest = false;
				requestHeaders = new WebHeaderCollection();
				responseHeaders = new WebHeaderCollection();
				try {
					object[] __results;
					this.Timeout = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.DefaultWebReferenceTimeoutMs);
					_listHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(__context, _ssWebServiceName, false, false);
					__results = this.Invoke("GetMaterialAllDetail", new object[] {
						inWSCodigoDoMaterial, inWSCodigoDoMaterialSpecified, inWSCanalDistribuicao, inWSCanalDistribuicaoSpecified, inWSOrganizacaoVendas, inWSOrganizacaoVendasSpecified
					}
					);
					WSEnhancementsElementWithSoapHeaders.SetHeaders(__context, _ssWebServiceName, false, true, _listHeaders);
					outWSClientData = (WORCClientdataRecord) __results[0];
					outWSMaterialDescription = (WORCMaterialdescriptionRecord[]) __results[1];
					outWSSalesData = (WORCSalesdataRecord) __results[2];
					outWSUnityofmeasure = (WORCUnitsofmeasureRecord[]) __results[3];
					outWSTextoObs = (System.String) __results[4];
					outWSTextoBasico = (System.String) __results[5];
					outWSTextoQm = (System.String) __results[6];
					return;
				} catch {
					failedRequest = true;
					throw;
				} finally {
					if (config.Trace) {
						SOAPTrace.AppendLine("Request Headers: ");
						foreach(string key in requestHeaders.AllKeys) {
							string value = requestHeaders[key];
							SOAPTrace.AppendLine(key+ ": " + value);
						}

						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine("Request message: ");
						SOAPTrace.AppendLine(_payloadRequest);

						SOAPTrace.AppendLine("Status Code: " + statusCode.ToString());

						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine("Response Headers: ");
						foreach(string key in responseHeaders.AllKeys) {
							string value = responseHeaders[key];
							SOAPTrace.AppendLine(key+ ": " + value);
						}
						SOAPTrace.AppendLine();

						SOAPTrace.AppendLine("Response message: ");
						SOAPTrace.AppendLine(_payloadResponse);
						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine();
					}
					if (config.TraceAll || (config.TraceErrors && failedRequest)) {
						__message = "";
						__detail = SOAPTrace.ToString();
						__detailLabel = "SOAP Trace";
					}
				}

			} catch (Exception __ex) {
				__errorLogId = ErrorLog.LogApplicationError(__ex, __context, "Web Reference");
				throw __ex;
			} finally {
				if (__context.AppInfo != null && __context.RequestTracer != null) {
					TimeSpan __duration = DateTime.Now.Subtract(__startExecution);
					__context.RequestTracer.RegisterConsumedIntegrationExecuted("WebRefSAP_GetMaterialAllDetail (GetMaterialAllDetail)", "1ce04272-371f-46a7-8027-23f347fbeb03", "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP", "SOAP (Consume)",
					(int) __duration.TotalMilliseconds, DateTime.Now, this.Url);
				}
				if (__context.AppInfo != null && (!__context.AppInfo.SelectiveLoggingEnabled || __context.AppInfo.Properties.AllowLogging)) {
					TimeSpan __duration = DateTime.Now.Subtract(__startExecution);
					String __integrationLogId = IntegrationLog.StaticWrite(
					DateTime.Now,
					(int) __duration.TotalMilliseconds,
					null,
					this.Url,
					 "WebRefSAP_GetMaterialAllDetail (GetMaterialAllDetail)",
					 "SOAP (Consume)",
					(__context.AppInfo != null ? __context.AppInfo.eSpaceId: 0),
					(__context.AppInfo != null && __context.AppInfo.Tenant != null ? __context.AppInfo.Tenant.Id: 0),
					__errorLogId,
					Environment.MachineName,
					false);
					if (!String.IsNullOrEmpty(__detail) ||
					!String.IsNullOrEmpty(__message)) {
						IntDetailLog.StaticWrite(__integrationLogId,
						DateTime.Now,
						(__context.AppInfo != null && __context.AppInfo.Tenant != null ? __context.AppInfo.Tenant.Id: 0),
						__message,
						__detail,
						__detailLabel);
					}
				}
			}
		}
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SAP_WebServices/SAP/GetMaterialDetail", RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		[System.Web.Services.Protocols.SoapHeader("_listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetMaterialDetail(
		[System.Xml.Serialization.XmlElementAttribute("CodigoDoMaterial")]
		System.String inWSCodigoDoMaterial
		,[System.Xml.Serialization.XmlIgnoreAttribute()] bool inWSCodigoDoMaterialSpecified
		,[System.Xml.Serialization.XmlArrayAttribute("DescricaoMaterial")]
		out WORCMaterialdescriptionRecord[] outWSDescricaoMaterial
		) {
			HeContext __context = Global.App.OsContext;
			WSEnhancementsElement.RefreshWSElement(__context, this, _ssWebServiceName, _backupUrl);
			string __errorLogId = "";
			DateTime __startExecution = DateTime.Now;
			String __message = null;
			String __detail = null;
			String __detailLabel = null;

			try {
				StringBuilder SOAPTrace = new StringBuilder();
				bool failedRequest = false;
				requestHeaders = new WebHeaderCollection();
				responseHeaders = new WebHeaderCollection();
				try {
					object[] __results;
					this.Timeout = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.DefaultWebReferenceTimeoutMs);
					_listHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(__context, _ssWebServiceName, false, false);
					__results = this.Invoke("GetMaterialDetail", new object[] {
						inWSCodigoDoMaterial, inWSCodigoDoMaterialSpecified
					}
					);
					WSEnhancementsElementWithSoapHeaders.SetHeaders(__context, _ssWebServiceName, false, true, _listHeaders);
					outWSDescricaoMaterial = (WORCMaterialdescriptionRecord[]) __results[0];
					return;
				} catch {
					failedRequest = true;
					throw;
				} finally {
					if (config.Trace) {
						SOAPTrace.AppendLine("Request Headers: ");
						foreach(string key in requestHeaders.AllKeys) {
							string value = requestHeaders[key];
							SOAPTrace.AppendLine(key+ ": " + value);
						}

						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine("Request message: ");
						SOAPTrace.AppendLine(_payloadRequest);

						SOAPTrace.AppendLine("Status Code: " + statusCode.ToString());

						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine("Response Headers: ");
						foreach(string key in responseHeaders.AllKeys) {
							string value = responseHeaders[key];
							SOAPTrace.AppendLine(key+ ": " + value);
						}
						SOAPTrace.AppendLine();

						SOAPTrace.AppendLine("Response message: ");
						SOAPTrace.AppendLine(_payloadResponse);
						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine();
					}
					if (config.TraceAll || (config.TraceErrors && failedRequest)) {
						__message = "";
						__detail = SOAPTrace.ToString();
						__detailLabel = "SOAP Trace";
					}
				}

			} catch (Exception __ex) {
				__errorLogId = ErrorLog.LogApplicationError(__ex, __context, "Web Reference");
				throw __ex;
			} finally {
				if (__context.AppInfo != null && __context.RequestTracer != null) {
					TimeSpan __duration = DateTime.Now.Subtract(__startExecution);
					__context.RequestTracer.RegisterConsumedIntegrationExecuted("WebRefSAP_GetMaterialDetail (GetMaterialDetail)", "a2125a33-17a3-4723-9073-8cb85d4ddc5b", "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP", "SOAP (Consume)",
					(int) __duration.TotalMilliseconds, DateTime.Now, this.Url);
				}
				if (__context.AppInfo != null && (!__context.AppInfo.SelectiveLoggingEnabled || __context.AppInfo.Properties.AllowLogging)) {
					TimeSpan __duration = DateTime.Now.Subtract(__startExecution);
					String __integrationLogId = IntegrationLog.StaticWrite(
					DateTime.Now,
					(int) __duration.TotalMilliseconds,
					null,
					this.Url,
					 "WebRefSAP_GetMaterialDetail (GetMaterialDetail)",
					 "SOAP (Consume)",
					(__context.AppInfo != null ? __context.AppInfo.eSpaceId: 0),
					(__context.AppInfo != null && __context.AppInfo.Tenant != null ? __context.AppInfo.Tenant.Id: 0),
					__errorLogId,
					Environment.MachineName,
					false);
					if (!String.IsNullOrEmpty(__detail) ||
					!String.IsNullOrEmpty(__message)) {
						IntDetailLog.StaticWrite(__integrationLogId,
						DateTime.Now,
						(__context.AppInfo != null && __context.AppInfo.Tenant != null ? __context.AppInfo.Tenant.Id: 0),
						__message,
						__detail,
						__detailLabel);
					}
				}
			}
		}
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SAP_WebServices/SAP/GetLoteDetail", RequestNamespace= "http://www.outsystems.com", ResponseNamespace= "http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		[System.Web.Services.Protocols.SoapHeader("_listHeaders", Direction = SoapHeaderDirection.InOut)]
		public void GetLoteDetail(
		[System.Xml.Serialization.XmlElementAttribute("Lote")]
		System.String inWSLote
		,[System.Xml.Serialization.XmlIgnoreAttribute()] bool inWSLoteSpecified
		,[System.Xml.Serialization.XmlElementAttribute("DataProducao")]
		out System.String outWSDataProducao
		,[System.Xml.Serialization.XmlElementAttribute("DataValidade")]
		out System.String outWSDataValidade
		,[System.Xml.Serialization.XmlElementAttribute("DescricaoMaterial")]
		out System.String outWSDescricaoMaterial
		,[System.Xml.Serialization.XmlElementAttribute("CodigoMaterial")]
		out System.String outWSCodigoMaterial
		,[System.Xml.Serialization.XmlElementAttribute("LoteOut")]
		out System.String outWSLoteOut
		) {
			HeContext __context = Global.App.OsContext;
			WSEnhancementsElement.RefreshWSElement(__context, this, _ssWebServiceName, _backupUrl);
			string __errorLogId = "";
			DateTime __startExecution = DateTime.Now;
			String __message = null;
			String __detail = null;
			String __detailLabel = null;

			try {
				StringBuilder SOAPTrace = new StringBuilder();
				bool failedRequest = false;
				requestHeaders = new WebHeaderCollection();
				responseHeaders = new WebHeaderCollection();
				try {
					object[] __results;
					this.Timeout = OutSystems.HubEdition.RuntimePlatform.Settings.GetInt(OutSystems.HubEdition.RuntimePlatform.Settings.Configs.DefaultWebReferenceTimeoutMs);
					_listHeaders = WSEnhancementsElementWithSoapHeaders.GetHeaders(__context, _ssWebServiceName, false, false);
					__results = this.Invoke("GetLoteDetail", new object[] {
						inWSLote, inWSLoteSpecified
					}
					);
					WSEnhancementsElementWithSoapHeaders.SetHeaders(__context, _ssWebServiceName, false, true, _listHeaders);
					outWSDataProducao = (System.String) __results[0];
					outWSDataValidade = (System.String) __results[1];
					outWSDescricaoMaterial = (System.String) __results[2];
					outWSCodigoMaterial = (System.String) __results[3];
					outWSLoteOut = (System.String) __results[4];
					return;
				} catch {
					failedRequest = true;
					throw;
				} finally {
					if (config.Trace) {
						SOAPTrace.AppendLine("Request Headers: ");
						foreach(string key in requestHeaders.AllKeys) {
							string value = requestHeaders[key];
							SOAPTrace.AppendLine(key+ ": " + value);
						}

						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine("Request message: ");
						SOAPTrace.AppendLine(_payloadRequest);

						SOAPTrace.AppendLine("Status Code: " + statusCode.ToString());

						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine("Response Headers: ");
						foreach(string key in responseHeaders.AllKeys) {
							string value = responseHeaders[key];
							SOAPTrace.AppendLine(key+ ": " + value);
						}
						SOAPTrace.AppendLine();

						SOAPTrace.AppendLine("Response message: ");
						SOAPTrace.AppendLine(_payloadResponse);
						SOAPTrace.AppendLine();
						SOAPTrace.AppendLine();
					}
					if (config.TraceAll || (config.TraceErrors && failedRequest)) {
						__message = "";
						__detail = SOAPTrace.ToString();
						__detailLabel = "SOAP Trace";
					}
				}

			} catch (Exception __ex) {
				__errorLogId = ErrorLog.LogApplicationError(__ex, __context, "Web Reference");
				throw __ex;
			} finally {
				if (__context.AppInfo != null && __context.RequestTracer != null) {
					TimeSpan __duration = DateTime.Now.Subtract(__startExecution);
					__context.RequestTracer.RegisterConsumedIntegrationExecuted("WebRefSAP_GetLoteDetail (GetLoteDetail)", "a74291f4-cd63-4380-be68-36149edd12f5", "41086537-7a3b-4efa-ae83-a248e04f73a1", "Teste_SAP", "SOAP (Consume)",
					(int) __duration.TotalMilliseconds, DateTime.Now, this.Url);
				}
				if (__context.AppInfo != null && (!__context.AppInfo.SelectiveLoggingEnabled || __context.AppInfo.Properties.AllowLogging)) {
					TimeSpan __duration = DateTime.Now.Subtract(__startExecution);
					String __integrationLogId = IntegrationLog.StaticWrite(
					DateTime.Now,
					(int) __duration.TotalMilliseconds,
					null,
					this.Url,
					 "WebRefSAP_GetLoteDetail (GetLoteDetail)",
					 "SOAP (Consume)",
					(__context.AppInfo != null ? __context.AppInfo.eSpaceId: 0),
					(__context.AppInfo != null && __context.AppInfo.Tenant != null ? __context.AppInfo.Tenant.Id: 0),
					__errorLogId,
					Environment.MachineName,
					false);
					if (!String.IsNullOrEmpty(__detail) ||
					!String.IsNullOrEmpty(__message)) {
						IntDetailLog.StaticWrite(__integrationLogId,
						DateTime.Now,
						(__context.AppInfo != null && __context.AppInfo.Tenant != null ? __context.AppInfo.Tenant.Id: 0),
						__message,
						__detail,
						__detailLabel);
					}
				}
			}
		}
	}
}
namespace ssTeste_SAP {
	using ssTeste_SAP.WRefSAP;
	public partial class ExtendedActions {
		/// <summary>
		/// Action: WebRefSAP_GetMaterialAllDetail
		/// </summary>

		public static void WebRefSAP_GetMaterialAllDetail(HeContext heContext, bool[] optionalValuesBitMask, string inWSCodigoDoMaterial, string inWSCanalDistribuicao, string inWSOrganizacaoVendas, out RCClientdataRecord outWSClientData, out RLMaterialdescriptionRecordList outWSMaterialDescription, out RCSalesdataRecord outWSSalesData, out RLUnitsofmeasureRecordList outWSUnityofmeasure, out string outWSTextoObs, out string outWSTextoBasico, out string outWSTextoQm) {
			outWSClientData = new RCClientdataRecord(null);

			outWSMaterialDescription = new RLMaterialdescriptionRecordList();

			outWSSalesData = new RCSalesdataRecord(null);

			outWSUnityofmeasure = new RLUnitsofmeasureRecordList();

			outWSTextoObs = "";

			outWSTextoBasico = "";

			outWSTextoQm = "";

			WRefSAP.WRefSAP webReference= new WRefSAP.WRefSAP();
			WORCClientdataRecord varWSoutWSClientData;
			WORCMaterialdescriptionRecord[] varWSoutWSMaterialDescription;
			WORCSalesdataRecord varWSoutWSSalesData;
			WORCUnitsofmeasureRecord[] varWSoutWSUnityofmeasure;
			System.String varWSoutWSTextoObs;
			System.String varWSoutWSTextoBasico;
			System.String varWSoutWSTextoQm;
			webReference.GetMaterialAllDetail(BaseAppUtils.RemoveControlChars(inWSCodigoDoMaterial),/*specified*/ inWSCodigoDoMaterial != "" && optionalValuesBitMask[0], BaseAppUtils.RemoveControlChars(inWSCanalDistribuicao),/*specified*/ inWSCanalDistribuicao != "" && optionalValuesBitMask[1], BaseAppUtils.RemoveControlChars(inWSOrganizacaoVendas),/*specified*/ inWSOrganizacaoVendas != "" && optionalValuesBitMask[2], out varWSoutWSClientData, out varWSoutWSMaterialDescription, out varWSoutWSSalesData, out varWSoutWSUnityofmeasure, out varWSoutWSTextoObs, out varWSoutWSTextoBasico, out varWSoutWSTextoQm);
			outWSClientData = varWSoutWSClientData;
			if (varWSoutWSMaterialDescription != null)
			outWSMaterialDescription = varWSoutWSMaterialDescription;
			outWSSalesData = varWSoutWSSalesData;
			if (varWSoutWSUnityofmeasure != null)
			outWSUnityofmeasure = varWSoutWSUnityofmeasure;
			if (varWSoutWSTextoObs != null)
			outWSTextoObs = ((string) varWSoutWSTextoObs ?? outWSTextoObs);
			if (varWSoutWSTextoBasico != null)
			outWSTextoBasico = ((string) varWSoutWSTextoBasico ?? outWSTextoBasico);
			if (varWSoutWSTextoQm != null)
			outWSTextoQm = ((string) varWSoutWSTextoQm ?? outWSTextoQm);

		}

		/// <summary>
		/// Action: WebRefSAP_GetMaterialDetail
		/// </summary>

		public static void WebRefSAP_GetMaterialDetail(HeContext heContext, bool[] optionalValuesBitMask, string inWSCodigoDoMaterial, out RLMaterialdescriptionRecordList outWSDescricaoMaterial) {
			outWSDescricaoMaterial = new RLMaterialdescriptionRecordList();

			WRefSAP.WRefSAP webReference= new WRefSAP.WRefSAP();
			WORCMaterialdescriptionRecord[] varWSoutWSDescricaoMaterial;
			webReference.GetMaterialDetail(BaseAppUtils.RemoveControlChars(inWSCodigoDoMaterial),/*specified*/ inWSCodigoDoMaterial != "" && optionalValuesBitMask[0], out varWSoutWSDescricaoMaterial);
			if (varWSoutWSDescricaoMaterial != null)
			outWSDescricaoMaterial = varWSoutWSDescricaoMaterial;

		}

		/// <summary>
		/// Action: WebRefSAP_GetLoteDetail
		/// </summary>

		public static void WebRefSAP_GetLoteDetail(HeContext heContext, bool[] optionalValuesBitMask, string inWSLote, out string outWSDataProducao, out string outWSDataValidade, out string outWSDescricaoMaterial, out string outWSCodigoMaterial, out string outWSLoteOut) {
			outWSDataProducao = "";

			outWSDataValidade = "";

			outWSDescricaoMaterial = "";

			outWSCodigoMaterial = "";

			outWSLoteOut = "";

			WRefSAP.WRefSAP webReference= new WRefSAP.WRefSAP();
			System.String varWSoutWSDataProducao;
			System.String varWSoutWSDataValidade;
			System.String varWSoutWSDescricaoMaterial;
			System.String varWSoutWSCodigoMaterial;
			System.String varWSoutWSLoteOut;
			webReference.GetLoteDetail(BaseAppUtils.RemoveControlChars(inWSLote),/*specified*/ inWSLote != "" && optionalValuesBitMask[0], out varWSoutWSDataProducao, out varWSoutWSDataValidade, out varWSoutWSDescricaoMaterial, out varWSoutWSCodigoMaterial, out varWSoutWSLoteOut);
			if (varWSoutWSDataProducao != null)
			outWSDataProducao = ((string) varWSoutWSDataProducao ?? outWSDataProducao);
			if (varWSoutWSDataValidade != null)
			outWSDataValidade = ((string) varWSoutWSDataValidade ?? outWSDataValidade);
			if (varWSoutWSDescricaoMaterial != null)
			outWSDescricaoMaterial = ((string) varWSoutWSDescricaoMaterial ?? outWSDescricaoMaterial);
			if (varWSoutWSCodigoMaterial != null)
			outWSCodigoMaterial = ((string) varWSoutWSCodigoMaterial ?? outWSCodigoMaterial);
			if (varWSoutWSLoteOut != null)
			outWSLoteOut = ((string) varWSoutWSLoteOut ?? outWSLoteOut);

		}

	}
}
